{"version":3,"sources":["webpack:///XLSXBuilder.js","webpack:///webpack/bootstrap ec45a77245af68849c0d","webpack:///./core/xlsx/src/xml/XMLNode.js","webpack:///./core/xlsx/src/xml/XMLFile.js","webpack:///./core/xlsx/src/binding/type/Type.js","webpack:///./core/xlsx/src/data/Cell.js","webpack:///./core/xlsx/src/binding/type/Numeric.js","webpack:///./core/xlsx/src/xml/XMLElement.js","webpack:///./core/xlsx/src/objects/Relationships.js","webpack:///./core/xlsx/src/data/Sheet.js","webpack:///./core/xlsx/src/data/Row.js","webpack:///./core/xlsx/src/binding/type/CalendarDate.js","webpack:///./core/xlsx/src/binding/type/BooleanType.js","webpack:///./core/xlsx/src/binding/type/Currency.js","webpack:///./core/xlsx/src/data/SharedStrings.js","webpack:///./core/xlsx/src/binding/type/Text.js","webpack:///./core/xlsx/src/style/Alignment.js","webpack:///./core/xlsx/src/XLSXBuilder.js","webpack:///./core/xlsx/src/objects/App.js","webpack:///./core/xlsx/src/xml/XMLAttribute.js","webpack:///./core/xlsx/src/objects/ContentTypes.js","webpack:///./core/xlsx/src/objects/Core.js","webpack:///./core/xlsx/src/data/SharedString.js","webpack:///./core/xlsx/src/objects/Workbook.js","webpack:///./core/xlsx/src/binding/ColumnConfiguration.js","webpack:///./core/xlsx/src/binding/Column.js","webpack:///./core/xlsx/src/objects/ReferenceNode.js","webpack:///./core/xlsx/src/style/Styles.js","webpack:///./core/xlsx/src/style/Style.js","webpack:///./core/xlsx/src/style/Font.js","webpack:///./core/xlsx/src/style/Fill.js","webpack:///./core/xlsx/src/style/Border.js","webpack:///./core/xlsx/src/style/NumberFormat.js"],"names":["XLSXBuilder","modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","XMLNode","oConfig","j","config","XMLElement","this","tag","value","root","writable","attributes","childs","length","addAttribute","properties","addChild","XMLAttribute","create","constructor","processingInformation","attribute","push","id","node","remove","sProperty","index","referencedElement","aAggregation","indexOf","splice","serialize","sSerialized","xmlEncode","XMLFile","_filename","filename","_path","path","getFileName","setFileName","sFileName","match","Error","getPath","getAbsolutePath","setPath","sPath","lastIndexOf","Type","styleId","_createConfiguration","getStyleId","oData","styles","addStyle","registerAt","oStyles","getValue","Cell","oType","metadata","_applyType","CalendarDate","Numeric","BooleanType","Currency","SharedStrings","DataType","Boolean","Date","InlineString","Number","SharedString","FormularString","type","isCustomFormatted","bindingType","setStyle","nStyle","style","setReference","sReference","reference","setValue","oBusinessObject","shared","_isValuePresent","text","toLowerCase","getInstance","insert","data","unit","unitProperty","delimiter","scale","styleIds","DEFAULT","numberFormat","builtin","1","2","3","4","9","10","11","12","13","37","38","39","40","48","key","result","template","format","parseInt","getPrototypeOf","sValue","_replace","replace","Relationships","oReferenceNode","addRelationship","sTarget","sType","Sheet","oColumnConfiguration","_hierarchyProperty","_hierarchyLevel","_createCols","_createHeader","Row","suffix","MAX_ROWS","col","minWidth","width","_columns","size","columns","_calculateColumnWidth","label","nWidth","factor","step","Math","ceil","max","nCharacters","_setHierarchyDepth","nHierarchyDepth","hierarchyDepth","headerRow","getHeader","views","defaultView","_appendRow","oRow","dimension","getColumnReferenceByIndex","filter","createGroup","sName","nLevel","groupHeaderRow","getGroupHeader","nHierarchyLevel","hierarchyLevelProperty","bind","nIndex","String","fromCharCode","floor","_updateSpans","spans","addCell","oCell","count","calendar","inputFormat","toUpperCase","14","15","16","17","18","19","20","21","22","45","46","47","oSymbols","Y","apply","oDate","setUTCFullYear","M","setUTCMonth","D","setUTCDate","valueOf","_JsDateToExcel","_parseStringDate","odataDurationRegex","test","_parseODataDuration","odataDateRegex","_parseOdataDate","isFinite","vValue","parts","days","hours","minutes","seconds","ms","exec","parseFloat","matchArray","date","offset","setUTCMinutes","getUTCMinutes","getTime","dateStringRegex","nTimestamp","sPattern","substring","slice","charAt","trueValue","falseValue","displayUnit","DEFAULT_SCALE","DIGITS","ADP","AFN","ALL","AMD","BHD","BIF","BYR","CAD","CHF","CLF","CLP","COP","CRC","CZK","DJF","ESP","GNF","GYD","HUF","IDR","IQD","IRR","ISK","ITL","JOD","JPY","KMF","KPW","KRW","KWD","LAK","LBP","LUF","LYD","MGA","MGF","MMK","MNT","MRO","MUR","OMR","PKR","PYG","RSD","RWF","SLL","SOS","STD","SYP","TMM","TND","TRL","TWD","TZS","UGX","UYI","UZS","VND","VUV","XAF","XOF","XPF","YER","ZMK","ZWD","instance","Map","map","has","_shared","set","Text","font","fill","hierarchyLevel","_styleIds","Alignment","align","horizontal","LEFT","indent","level","regex","every","_contains","sAlign","oAggregation","contained","CENTER","RIGHT","contains","vertical","TOP","MIDDLE","BOTTOM","isDefault","setIndent","nIndent","_setAlignmentAttribute","setHorizontalAlignment","setVerticalAlignment","equals","oAlignment","aBinding","oContext","aMetadataConfig","oMetainfoGroup","sSheetName","sMetadataSheetName","Array","app","objects","App","core","Core","workbook","Workbook","sheetName","metaSheetName","sheet","addSheet","selectSheet","metainfo","hideHeader","_insertIntoSheet","items","ContentTypes","build","files","zip","fileConfig","FileType","xmlObject","relation","zipConfig","relationships","target","JSZip","file","getRelationships","getRelatedFiles","forEach","array","compression","support","nodebuffer","generateAsync","Promise","resolve","reject","generate","append","aData","oSheet","shift","application","version","prefix","FILENAME","title","modifiedBy","toISOString","ReferenceNode","_styles","Styles","addRelatedFile","_sharedStrings","RELATIONS","_relationships","_registeredSheets","ColumnConfiguration","sharedStrings","oColumnConfig","nCount","sId","sSheetFileName","sheets","sheetElement","aColumns","oColumn","_row","Column","_initBinding","getCell","normalizedHierarchyLevel","min","outline","cell","row","bold","color","column","sGroupName","oColumnData","Align","Left","_initType","Center","Right","_relatedFiles","oXMLFile","addFill","Style","Font","Fill","Border","NumberFormat","fontId","fillId","borderId","numberFormatId","addFont","addBorder","border","_isBuiltin","addNumberFormat","setFontId","setFillId","getBorderId","setNumberFormatId","setAlignment","_addToAggregation","cellXfs","oNewItem","existingItem","addColor","sHexColor","alreadyPresent","colors","mru","some","rgb","oFont","fonts","oFill","fills","getFill","oBorder","borders","numberFormats","setId","ID_OFFSET","getId","family","getAlignment","alignment","getFontId","getFillId","getNumberFormatId","oAlign","alignProperty","_apply","nFontId","nFillId","setBorderId","sBorderId","nNumFmtId","nId","applyProperty","oStyle","setName","setSize","setFamily","setBold","DEFAULT_SIZE","DEFAULT_NAME","getName","getSize","isBold","getColor","getFamily","valueAttribute","bBold","nFamily","nSize","isNaN","setFill","setType","DEFAULT_TYPE","getType","sColor","reset","BUILTIN_IDS","formatId","getFormat","iId","setFormat","sFormat","oNumberFormat"],"mappings":"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","file":"XLSXBuilder.js","sourcesContent":["var XLSXBuilder =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 17);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLElement = __webpack_require__(5);\nvar XMLAttribute = __webpack_require__(19);\n\n/**\n * JSON representation of XML nodes. Each node has a tag an can have multiple {@link XMLAttribute} entries assigned.\n * It can also have multiple child {@link XMLNode} elements assigned. The node can contain a value.\n *\n * @param {object|string} oConfig - Object representation of the XMLNode containing at least the tag of the element.\n * @param {string} oConfig.tag - String representation of the XML tag.\n * @param {object[]} [oConfig.attributes] - Aggregation for adding {@link XMLAttributes} to the current node.\n * @param {object[]} [oConfig.properties] - Aggregation for adding {@link XMLNode} objects as child objects to this node\n * @param {string} [oConfig.value] - String value inside the XML tag.\n * @class\n * @module xml/XMLNode\n */\nfunction XMLNode(oConfig) {\n\tvar i, j, config;\n\n\tXMLElement.call(this, oConfig);\n\n\t/* Shorthand functionality to simply assign the XMLNode tag name instead of a configuration object */\n\tconfig = typeof oConfig === 'string' ? {tag: oConfig} : oConfig;\n\n\tObject.defineProperty(this, 'root', {value: !!config.root, writable: false});\n\tthis.tag = typeof config.tag == 'string' ? config.tag : '';\n\tthis.attributes = [];\n\tthis.childs = [];\n\n\t/* Initialize the XML node by filling the aggregations if present */\n\tif (config.attributes) {\n\t\tfor (i = 0; i < config.attributes.length; i++) {\n\t\t\tthis.addAttribute(config.attributes[i]);\n\t\t}\n\t}\n\n\tif (config.properties) {\n\t\tfor (j = 0; j < config.properties.length; j++) {\n\t\t\tthis.addChild(config.properties[j]);\n\t\t}\n\t}\n}\n\nXMLNode.prototype = Object.create(XMLElement.prototype);\nXMLNode.prototype.constructor = XMLNode;\n\nXMLNode.processingInformation = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n\n\n/**\n * Adds the provided XMLAttribute object to the XMLNode.\n * If no XMLAttribute is provided it will create one instead.\n * The method returns the XMLAttribute for chaining.\n *\n * @function addAttribute\n * @param {Object} oConfig - XMLAttribute or configuration object that represents a XMLAttribute\n * @returns {Object} - An instance of XMLAttribute that was added to this node\n */\nXMLNode.prototype.addAttribute = function(oConfig) {\n\tvar attribute = oConfig instanceof XMLAttribute ? oConfig : new XMLAttribute(oConfig);\n\n\tthis.attributes.push(attribute);\n\n\tif (oConfig.id) {\n\t\tObject.defineProperty(this, oConfig.id, {value: attribute, writable: false, configurable: true});\n\t}\n\n\treturn attribute;\n};\n\n\n/**\n * Adds the provided XMLNode object as child to the current XMLNode.\n * If no XMLNode is provided it will create one instead.\n * The method returns the XMLNode for chaining.\n *\n * @function addChild\n * @param {Object} oConfig - XMLNode or configuration object that represents a XMLNode\n * @returns {object} - An instance of XMLNode that was added to this node\n */\nXMLNode.prototype.addChild = function(oConfig) {\n\n\t/* Additional Attributes of the child node will be added in the Constructor */\n\tvar node = oConfig instanceof XMLNode ? oConfig : new XMLNode(oConfig);\n\n\tthis.childs.push(node);\n\n\tif (oConfig.id) {\n\t\tObject.defineProperty(this, oConfig.id, {value: node, writable: false, configurable: true});\n\t}\n\n\treturn node;\n};\n\n\n/**\n * Removes the property from this object and also deletes the\n * referenced item within the child nodes or attributes\n * aggregation.\n *\n * The method returns the previously referenced object or null if\n * the property name is not present on this particular XMLNode or\n * if no item is referenced.\n *\n * Builtin properties of XMLNode cannot be removed with this\n * function. These are \"root\", \"tag\", \"attributes\", \"childs\",\n * \"value\".\n *\n * @param {string} sProperty - Name of the property that should be removed\n * @returns {XMLNode|XMLAttribute|null} - The referenced object that gets removed as well\n */\nXMLNode.prototype.remove = function(sProperty) {\n\tvar index, referencedElement, aAggregation;\n\n\t/* Only proceed if property is present */\n\tif (!(sProperty in this)) {\n\t\treturn null;\n\t}\n\n\treferencedElement = this[sProperty];\n\n\t/* Check if referenced element is a XMLAttribute */\n\tif (referencedElement instanceof XMLAttribute) {\n\t\taAggregation = this.attributes;\n\t} else if (referencedElement instanceof XMLNode && !(sProperty in new XMLNode(''))) {\n\t\taAggregation = this.childs;\n\t} else {\n\n\t\t/* Early return if referenced element is neither an XMLAttribute nor XMLNode */\n\t\treturn null;\n\t}\n\n\tindex = aAggregation.indexOf(referencedElement);\n\taAggregation.splice(index, 1); // It is ensured that index > -1 otherwise #addChild or #addAttribute fail\n\tdelete this[sProperty];\n\n\treturn referencedElement;\n};\n\n/**\n * Allows recursive serialization of the object and its descendants. If the XMLNode is marked as root node,\n * it will automatically add the XML processing information in front of the serialized representation.\n *\n * @function serialize\n * @returns {string} - String representation of the XMLNode.\n */\nXMLNode.prototype.serialize = function() {\n\tvar sSerialized, i, j;\n\n\tsSerialized = (this.root ? XMLNode.processingInformation : '') + '<' + this.tag;\n\n\t/* Insert attributes including namespace information */\n\tfor (i = 0; i < this.attributes.length; i++) {\n\t\tsSerialized += this.attributes[i].serialize();\n\t}\n\n\t/* Insert child nodes and value */\n\tif (this.childs.length || this.value || typeof this.value === 'number') {\n\t\tsSerialized += '>';\n\n\t\tfor (j = 0; j < this.childs.length; j++) {\n\t\t\tsSerialized += typeof this.childs[j] === 'string' ? this.childs[j] : this.childs[j].serialize();\n\t\t}\n\t\tsSerialized += this.xmlEncode(this.value);\n\n\t\tsSerialized += '</' + this.tag + '>';\n\t} else {\n\n\t\t/* Shorthand tag support */\n\t\tsSerialized += '/>';\n\t}\n\n\treturn sSerialized;\n};\n\nmodule.exports = XMLNode;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode\t\t = __webpack_require__(0);\n\n/**\n * The XMLFile class is a subclass of XMLNode that enriches the\n * object by path and file name information.\n *\n * @param {Object} oConfig - The configuration object for this XMLFile\n * @param {string} oConfig.path - The relative path of this XMLFile\n * @param {string} oConfig.filename - The file name of this XMLFile\n * @class\n */\nfunction XMLFile(oConfig) {\n\tXMLNode.call(this, oConfig);\n\n\tthis._filename = oConfig.filename;\n\tthis._path = oConfig.path;\n}\n\nXMLFile.prototype = Object.create(XMLNode.prototype);\nXMLFile.prototype.constructor = XMLFile;\n\n/**\n * Returns the name of this particular file including its file extension.\n *\n * @returns {string} Name of the file\n */\nXMLFile.prototype.getFileName = function() {\n\treturn this._filename;\n};\n\n/**\n * Assigns the given string as name of the file. The name must contain a file extension.\n *\n * @param {string} sFileName - Name of the file\n */\nXMLFile.prototype.setFileName = function(sFileName) {\n\n\tif (!sFileName.match(/^\\S+\\.\\S{3,4}$/)) {\n\t\tthrow new Error('Invalid file name: ' + sFileName);\n\t}\n\n\tthis._filename = sFileName;\n};\n\n/**\n * Returns the path of the file without any filename.\n *\n * @returns {string} - Path of the file\n */\nXMLFile.prototype.getPath = function() {\n\treturn this._path;\n};\n\n/**\n * Returns the absolute Path to the file.\n *\n * @returns {string} - Absolute path including the filename\n */\nXMLFile.prototype.getAbsolutePath = function() {\n\treturn this.getPath() + this.getFileName();\n};\n\n/**\n * Assigns the given path to this XMLFile. The path needs to end with\n * a slash to match the criteria.\n *\n * @param {string} sPath - Relative path of this XMLFile\n */\nXMLFile.prototype.setPath = function(sPath) {\n\n\t/* IE compatible endsWith */\n\tif (!sPath || sPath.lastIndexOf('/') !== (sPath.length - 1)) {\n\t\tthrow new Error('Invalid file path: ' + sPath);\n\t}\n\n\tthis._path = sPath;\n};\n\nmodule.exports = XMLFile;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n/**\n * The Type class defines a supported data type, like strings,\n * numeric values, decimals, dates, currencies and so on. It is NOT\n * part of the XML representation of the generated Excel document.\n *\n * This class is marked as abstract therefore only its sub-classes\n * should be used.\n *\n * @constructor\n * @abstract\n */\nfunction Type() {\n\tthis.styleId = null;\n}\n\n/**\n * Creates the type specific configuration that is used to register\n * its corresponding style in the Styles class.\n *\n * @abstract\n * @private\n */\nType.prototype._createConfiguration = function() {\n\tthrow new Error('Abstract method must be implemented by its subclass!');\n};\n\n/**\n * Returns the assigned ID of the Type specific Style that is\n * registered in the Styles class.\n *\n * @param {Object} [oData] - Business object that contains the actual data\n * @returns {number} - ID of the registered Style\n */\nType.prototype.getStyleId = function(oData) {\n\tif (this.styleId === null) {\n\t\tthis.styleId = this.styles.addStyle(this._createConfiguration());\n\t}\n\n\treturn this.styleId;\n};\n\n/**\n * Registers the Style configuration of this Type in the given Styles\n * class.\n *\n * @param {Styles} oStyles - Styles instance where the Type specific styling will be registered\n */\nType.prototype.registerAt = function(oStyles) {\n\tthis.styles = oStyles;\n};\n\n/**\n * Returns the data value of the business object that is bound by\n * this type.\n *\n * @param {string} property - Name of the property that shall be accessed.\n * @param {Object} oData - Business object that contains the data.\n *\n * @returns {string|number|boolean} - The value of the given property after type specific processing.\n */\nType.prototype.getValue = function(property, oData) {\n\treturn oData[property];\n};\n\nmodule.exports = Type;\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode\t\t \t= __webpack_require__(0),\n\tCalendarDate \t= __webpack_require__(9),\n\tNumeric \t\t= __webpack_require__(4),\n\tBooleanType \t= __webpack_require__(10),\n\tCurrency \t\t= __webpack_require__(11),\n\tSharedStrings   = __webpack_require__(12);\n\n/**\n * The Cell class represents a single cell within the spreadsheet\n * that has to be assigned to a particular row. A Cell stores\n * information supporting several types of data.\n *\n * @param {Type} oType - The data type of the cell\n * @class\n */\nfunction Cell(oType) {\n\tXMLNode.call(this, Cell.metadata);\n\n\tthis._applyType(oType);\n}\n\nCell.prototype = Object.create(XMLNode.prototype);\nCell.prototype.constructor = Cell;\n\nCell.DataType = {\n\tBoolean: 'b',\n\tDate: 'd',\n\tInlineString: 'inlineStr', // We do not support inline strings\n\tNumber: 'n',\n\tSharedString: 's',\n\tFormularString: 'str'\n};\n\nCell.metadata = {\n\ttag: 'c',\n\tattributes: [\n\t\t{\n\t\t\tid: 'reference',\n\t\t\tname: 'r',\n\t\t\tvalue: ''\n\t\t},\n\t\t{\n\t\t\tid: 'style',\n\t\t\tname: 's',\n\t\t\tvalue: '0' // Default style id\n\t\t}\n\t],\n\tproperties: [\n\t\t{\n\t\t\tid: 'text',\n\t\t\ttag: 'v'\n\t\t}\n\t]\n};\n\n/**\n * Applies the given type to the current Cell and maps to the\n * corresponding Office Open XML type definition.\n *\n * @param {Type} oType - Value of type {@link Type}\n * @private\n */\nCell.prototype._applyType = function(oType) {\n\tObject.defineProperty(this, 'type', { value: Cell.DataType.SharedString, writable: true });\n\n\tswitch (oType.constructor) {\n\t\tcase CalendarDate:\n\t\t\tthis.type = Cell.DataType.Date;\n\t\t\tbreak;\n\t\tcase Numeric:\n\t\t\tthis.type = Cell.DataType.Number;\n\t\t\tbreak;\n\t\tcase BooleanType:\n\t\t\tthis.type = Cell.DataType.Boolean;\n\n\t\t\tif (!oType.isCustomFormatted()) {\n\t\t\t\tthis.addAttribute({\n\t\t\t\t\tname: 't',\n\t\t\t\t\tvalue: Cell.DataType.Boolean\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tbreak;\n\t\tcase Currency:\n\t\t\tthis.type = Cell.DataType.Number;\n\t\t\tbreak;\n\t\tdefault: // Text is the default case\n\t\t\tthis.addAttribute({\n\t\t\t\tname: 't',\n\t\t\t\tvalue: Cell.DataType.SharedString // Default cell type\n\t\t\t});\n\t\t\tthis.type = Cell.DataType.SharedString;\n\t}\n\n\tthis.bindingType = oType;\n};\n\n/**\n * Applies the specified Style to the cell.\n *\n * @param {number|string} nStyle - Instance of Excel.objects.Style\n */\nCell.prototype.setStyle = function(nStyle) {\n\tthis.style.value = nStyle;\n};\n\n/**\n * Applies the specified cell location as reference. The reference\n * must match the regular expression of Open Document SpreadsheetML\n * sheet format. Starting with at least one uppercase letter for the\n * column followed by a number without leading zeros for the row.\n * [A-Z]+[1-9]+[0-9]*\n *\n * @param {string} sReference - Reference of the cells' location\n */\nCell.prototype.setReference = function(sReference) {\n\tif (typeof sReference != 'string'\n\t\t|| !sReference.match(/^[A-Z]+[1-9]+[0-9]*$/g)) {\n\t\tthrow new Error('The given Cell reference \"' + sReference + '\" does not match the reference pattern.');\n\t}\n\n\tthis.reference.value = sReference;\n};\n\n/**\n * Assigns the value to the current Cell. The method requires either\n * an shared String proxy object or an inline String. This method can\n * only be called once per Cell!\n *\n * @param {(string|Array)} sProperty - single property or Array of properties\n * @param {Object} oBusinessObject - BusinessObject that gets bound to this Cell\n */\nCell.prototype.setValue = function(sProperty, oBusinessObject) {\n\tvar shared, value;\n\n\tvalue = this.bindingType.getValue(sProperty, oBusinessObject);\n\n\tif (!this._isValuePresent(value)) {\n\n\t\t/*\n\t\t * We need to clear the value due to the fact\n\t\t * that we are re-using the Cell for each row\n\t\t */\n\t\tthis.text.value = '';\n\n\t\treturn;\n\t}\n\n\tswitch (this.type) {\n\t\tcase Cell.DataType.Number:\n\t\t\tthis.text.value = value;\n\t\t\tbreak;\n\n\t\tcase Cell.DataType.Boolean:\n\n\t\t\t/* String representations other than \"true\" will result in the boolean value false */\n\t\t\tif (typeof value === 'string') {\n\t\t\t\tvalue = value.toLowerCase() === 'true';\n\t\t\t}\n\t\t\tthis.text.value = value ? '1' : '0';\n\t\t\tbreak;\n\n\t\tcase Cell.DataType.Date:\n\t\t\tthis.text.value = value;\n\t\t\tbreak;\n\n\t\tdefault: // SharedString is the default case\n\t\t\tshared = SharedStrings.getInstance();\n\t\t\tthis.text.value = shared.insert(value);\n\t}\n\n\t/*\n\t * Forces a style update once the value changed. This allows cell\n\t * specific styles for currency types. Due to the fact that the\n\t * Style ID gets cached within the Type, there is no performance\n\t * impact even on large data sets.\n\t */\n\tthis.setStyle(this.bindingType.getStyleId(oBusinessObject));\n};\n\n/**\n * Checks whether there is a value provided or not. Allowed values\n * are Stringsas well as numeric and boolean values. Empty Strings\n * will be evaluated as no value, but the numeric value 0 is a value.\n *\n * @param {(string|number|boolean|Array)} data - The value that gets checked\n * @returns {boolean} - true if a value is present, false if not\n * @private\n */\nCell.prototype._isValuePresent = function(data) {\n\treturn ((typeof data === 'string' && !!data)\n\t\t|| typeof data === 'number'\n\t\t|| typeof data === 'boolean'\n\t\t|| data instanceof Date);\n};\n\nmodule.exports = Cell;\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Type = __webpack_require__(2);\n\n/**\n * The Numeric class represents a numeric data type. Numeric data can\n * handle several options like thousands delimiter, decimal (scale)\n * and different types like 'percent' and 'exponential'.\n *\n * @param {Object} [oConfig] - Configuration object for this numeric representation\n * @param {boolean} [oConfig.delimiter] - Indicates if a thousands delimiter should be used\n * @param {number} [oConfig.scale] - Defines the amount of decimals\n * @param {string} [oConfig.type] - Applies a specific type like 'exponential' or 'percent'\n * @param {string} [oConfig.unit] - Specifies a particular unit of measurement\n * @param {string} [oConfig.unitProperty] - Specifies a property that contains the unit of measurement\n * @constructor\n */\nfunction Numeric(oConfig) {\n\tType.call(this);\n\n\tthis.unit = oConfig ? oConfig.unit : null;\n\tthis.unitProperty = oConfig ? oConfig.unitProperty : null;\n\tthis.delimiter = oConfig ? oConfig.delimiter : false;\n\tthis.scale = oConfig ? oConfig.scale : null;\n\n\tthis.styleIds = {};\n}\n\nNumeric.prototype = Object.create(Type.prototype);\nNumeric.prototype.constructor = Numeric;\n\nNumeric.DEFAULT = {\n\tnumberFormat: 0\n};\n\nNumeric.builtin = {\n\t1: '0',\n\t2: '0.00',\n\t3: '#,##0',\n\t4: '#,##0.00',\n\t9: '0%',\n\t10: '0.00%',\n\t11: '0.00E+00',\n\t12: '# ?/?',\n\t13: '# ??/??',\n\t37: '#,##0;(#,##0)',\n\t38: '#,##0;[Red](#,##0)',\n\t39: '#,##0.00;(#,##0.00)',\n\t40: '#,##0.00;[Red](#,##0.00)',\n\t48: '##0.0E+0'\n};\n\n/**\n * Creates the format according to the provided configuration. If the\n * format matches any builtin format, it will return a reference to\n * its ID instead of the format.\n *\n * Both cases can serve the Style class that consumes this information.\n *\n * @param {Object} oData - Business object that contains additional data that is used for the formatting\n * @returns {Object} - Configuration object for NumberFormat initialization\n * @private\n */\nNumeric.prototype._createConfiguration = function(oData) {\n\tvar i, key, result,\n\t\ttemplate = Numeric.builtin[1],\n\t\tunit = '';\n\n\tif (!this.delimiter && typeof this.scale !== 'number') {\n\t\treturn Numeric.DEFAULT;\n\t}\n\n\tif (this.delimiter) {\n\t\ttemplate = '#,##' + template;\n\t}\n\n\t/* Add decimal*/\n\tif (typeof this.scale === 'number' && this.scale > 0) {\n\t\ttemplate += '.';\n\n\t\tfor (i = 0; i < this.scale; i++) {\n\t\t\ttemplate += '0';\n\t\t}\n\t}\n\n\t/* Obtain unit of measurement if available */\n\tif (typeof this.unitProperty === 'string' && oData) {\n\t\tunit = ' \"' + oData[this.unitProperty] + '\"';\n\t} else if (typeof this.unit === 'string') {\n\t\tunit = ' \"' + this.unit + '\"';\n\t}\n\n\t/* Apply Unit */\n\ttemplate += unit;\n\n\tresult = {\n\t\tnumberFormat: {\n\t\t\tformat: template\n\t\t}\n\t};\n\n\t/* Find possible builtin match */\n\tfor (key in Numeric.builtin) {\n\t\tif (Numeric.builtin[key] === template) {\n\t\t\tresult.numberFormat = parseInt(key, 10);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Returns the assigned ID of the Type specific Style that is\n * registered in the Styles class.\n *\n * @param {Object} oData - Business Object that contains the property for the UoM\n * @returns {number} - ID of the registered Style\n */\nNumeric.prototype.getStyleId = function(oData) {\n\tvar styleId, unit;\n\n\t/* Handle simple numeric without unitProperty */\n\tif (!this.unitProperty) {\n\t\treturn Object.getPrototypeOf(Numeric.prototype).getStyleId.call(this);\n\t}\n\n\tif (!oData) {\n\t\treturn 0;\n\t}\n\n\tunit = oData[this.unitProperty];\n\tstyleId = this.styleIds[unit];\n\n\tif (typeof styleId === 'undefined') {\n\t\tthis.styleIds[unit] = this.styles.addStyle(this._createConfiguration(oData));\n\t}\n\n\treturn this.styleIds[unit];\n};\n\nmodule.exports = Numeric;\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports) {\n\n/**\n * The XMLElement is an abstract base class that can store a\n * particular value and escape XML specific characters.\n *\n * @param {Object} oConfig - Configuration object that contains the value of this XML Element\n * @constructor\n * @abstract\n */\nfunction XMLElement(oConfig) {\n\tthis.value = oConfig && oConfig.value ? oConfig.value : '';\n}\n\n/**\n * Escapes the given String value to fulfill the requirements of\n * XML encoded characters. If the String does not contain any\n * character that needs to be encoded, the original String will\n * be returned.\n *\n * This significantly increases the performance because the\n * initial regular expression match is much faster than the\n * String replace function. We assume that only a few Strings\n * need to be encoded.\n *\n * The following characters need to be encoded:\n * < (lower than)\n * > (greater than)\n * \" (quotes)\n * ' (apostrophe)\n * & (ampersand)\n *\n * @param {string} sValue - The value that needs to be XML encoded\n * @returns {string} - XML encoded String\n */\nXMLElement.prototype.xmlEncode = function(sValue) {\n\treturn typeof sValue === 'string' && sValue.match(/[><\"'&]+/) !== null ? this._replace(sValue) : sValue;\n};\n\n/**\n * @see _xmlEncode\n * @param {string} sValue - The string that contains characters that needs to be replaced\n * @returns {string} - XML encoded String\n * @private\n */\nXMLElement.prototype._replace = function(sValue) {\n\n\t/**\n\t * Perform ampersand replacement first to avoid encoding the\n\t * control ampersand of other encoded characters.\n\t *\n\t * i.E. >& should be encoded as &gt;&amp; instead of &amp;gt;&amp;\n\t */\n\treturn sValue\n\t\t.replace(/&/g, '&amp;')\n\t\t.replace(/</g, '&lt;')\n\t\t.replace(/>/g, '&gt;')\n\t\t.replace(/\"/g, '&quot;')\n\t\t.replace(/'/g, '&apos;');\n};\n\nmodule.exports = XMLElement;\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar\tXMLFile = __webpack_require__(1),\n\tXMLNode = __webpack_require__(0);\n\n/**\n * @param {ReferenceNode} oReferenceNode - ReferenceNode object that is the root of this Relationships XMLFile\n * @constructor\n */\nfunction Relationships(oReferenceNode) {\n\tXMLFile.call(this, Relationships.metadata);\n\n\tif (oReferenceNode instanceof XMLFile) {\n\t\tthis.setFileName(oReferenceNode.getFileName() + '.rels');\n\t\tthis.setPath(oReferenceNode.getPath() + '_rels/');\n\t}\n}\n\nRelationships.prototype = Object.create(XMLFile.prototype);\nRelationships.prototype.constructor = Relationships;\n\nRelationships.metadata = {\n\tfilename: '.rels',\n\tpath: '_rels/',\n\ttag: 'Relationships',\n\troot: true,\n\tattributes: [\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tvalue: 'http://schemas.openxmlformats.org/package/2006/relationships'\n\t\t}\n\t],\n\tproperties: []\n};\n\n/**\n * Creates a new Relationship entry for the current collection.\n * The Relationship references are defined by the ISO/IEC 29500-1:2016 standard.\n *\n * @param {string} sTarget - Target file within the generated Excel\n * @param {string} sType - XMLNS reference of the targets file type\n * @returns {string} The newly created relationship id that can be referenced i.E. \"rId4\"\n */\nRelationships.prototype.addRelationship = function(sTarget, sType) {\n\tvar id = 'rId' + (this.childs.length + 1);\n\n\tthis.childs.push(new XMLNode({\n\t\ttag: 'Relationship',\n\t\tattributes: [\n\t\t\t{\n\t\t\t\tname: 'Id',\n\t\t\t\tvalue: id\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Type',\n\t\t\t\tvalue: sType\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Target',\n\t\t\t\tvalue: sTarget\n\t\t\t}\n\t\t]\n\t}));\n\n\treturn id;\n};\n\nmodule.exports = Relationships;\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLFile\t\t = __webpack_require__(1),\n\tRow\t\t\t = __webpack_require__(8);\n\n/**\n * This class represents a Sheet within an Office Open XML Spreadsheet.\n * @param {Object} oColumnConfiguration - ColumnConfiguration object that provides information about the columns\n * @constructor\n */\nfunction Sheet(oColumnConfiguration) {\n\tXMLFile.call(this, Sheet.metadata);\n\n\tObject.defineProperty(this, '_columns', {value: oColumnConfiguration, writable: false});\n\n\tthis._hierarchyProperty = oColumnConfiguration._hierarchyProperty;\n\tthis._hierarchyLevel = 0;\n\tthis._createCols();\n\tthis._createHeader();\n}\n\nSheet.prototype = Object.create(XMLFile.prototype);\nSheet.prototype.constructor = Sheet;\n\nSheet.metadata = {\n\ttag: 'worksheet',\n\troot: true,\n\tattributes: [\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\n\t\t},\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tsuffix: 'r',\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships'\n\t\t}\n\t],\n\tproperties: [\n\t\t{\n\t\t\ttag: 'sheetPr',\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'outlinePr',\n\t\t\t\t\tattributes: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'summaryBelow',\n\t\t\t\t\t\t\tvalue: '0'\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: 'dimension',\n\t\t\ttag: 'dimension',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'reference',\n\t\t\t\t\tname: 'ref',\n\t\t\t\t\tvalue: 'A1' // Default dimension of an empty Sheet\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: 'views',\n\t\t\ttag: 'sheetViews',\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tid: 'defaultView',\n\t\t\t\t\ttag: 'sheetView',\n\t\t\t\t\tattributes: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'workbookViewId',\n\t\t\t\t\t\t\tvalue: '0'\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\tproperties: [\n\n\t\t\t\t\t\t/* Freezes the header row */\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: 'pane',\n\t\t\t\t\t\t\ttag: 'pane',\n\t\t\t\t\t\t\tattributes: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'ySplit',\n\t\t\t\t\t\t\t\t\tvalue: '1'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'topLeftCell',\n\t\t\t\t\t\t\t\t\tvalue: 'A2'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'activePane',\n\t\t\t\t\t\t\t\t\tvalue: 'bottomLeft'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'state',\n\t\t\t\t\t\t\t\t\tvalue: 'frozen'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: 'format',\n\t\t\ttag: 'sheetFormatPr',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'defaultRowHeight',\n\t\t\t\t\tvalue: '15'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: 'columns',\n\t\t\ttag: 'cols'\n\t\t},\n\t\t{\n\t\t\tid: 'data',\n\t\t\ttag: 'sheetData'\n\t\t},\n\t\t{\n\t\t\tid: 'filter',\n\t\t\ttag: 'autoFilter',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'reference',\n\t\t\t\t\tname: 'ref',\n\t\t\t\t\tvalue: 'A1' // Default dimension of an empty Sheet\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'pageMargins',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'left',\n\t\t\t\t\tvalue: '0.75'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'right',\n\t\t\t\t\tvalue: '0.75'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'top',\n\t\t\t\t\tvalue: '1'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'bottom',\n\t\t\t\t\tvalue: '1'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'header',\n\t\t\t\t\tvalue: '0.5'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'footer',\n\t\t\t\t\tvalue: '0.5'\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n};\n\nSheet.MAX_ROWS = 1048576;\n\n/**\n * Creates the column specific information within the worksheet.\n * Column specific information is i.E. the width or the use of the\n * bestFit functionality.\n *\n * @private\n */\nSheet.prototype._createCols = function() {\n\tvar col, i, minWidth, width,\n\t\tautoFitButtonOffset = 2.4;\n\n\t/**\n\t * Inner function for calculating the column width. The function\n\t * will ceil the width to the next step of 0.25 so that the\n\t * result mod step is 0.\n\t * @param {number} nWidth - The width that needs to be adjusted\n\t * @returns {number}  A width rounded to the accuracy of 0.25\n\t */\n\tfunction roundWidth(nWidth) {\n\t\tvar factor, step;\n\n\t\tstep = 0.25;\n\t\tfactor = 1 / step;\n\n\t\treturn Math.ceil(nWidth * factor) / factor;\n\t}\n\n\tfor (i = 0; i < this._columns.size(); i++) {\n\t\tcol = this._columns.columns[i];\n\t\tminWidth = this._calculateColumnWidth(col.label.length) + autoFitButtonOffset;\n\t\twidth = roundWidth(Math.max(this._calculateColumnWidth(col.width), minWidth));\n\n\t\tthis.columns.addChild({\n\t\t\ttag: 'col',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'min',\n\t\t\t\t\tvalue: (i + 1)\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'max',\n\t\t\t\t\tvalue: (i + 1)\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'bestFit',\n\t\t\t\t\tvalue: '1'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'width',\n\t\t\t\t\tvalue: Math.max(width, minWidth)\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'customWidth',\n\t\t\t\t\tvalue: '1'\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\t}\n};\n\n/**\n * This method calculates the optimal column width for the given\n * amount of characters. It removes the dependency on font size or\n * pixel width.\n *\n * @param {number} nCharacters - Amount of characters that should fit into the column\n * @return {number} Excel internal width value corresponding to the used font size\n * @private\n */\nSheet.prototype._calculateColumnWidth = function(nCharacters) {\n\tvar defaultFontSize = 11, // Needs to be adjusted once we support different font sizes\n\t\tdefaultPaddingAndBorder = 5,\n\t\tscaleFactor = 7.33;\n\n\tif (typeof nCharacters !== 'number') {\n\t\treturn 0;\n\t}\n\n\treturn (((nCharacters * 2 / 3) * defaultFontSize) + defaultPaddingAndBorder) / scaleFactor;\n};\n\n/**\n * Sets the maximal hierarchy depth of this Sheet. The value will\n * only be changed if the given depth is higher than the previous\n * depth.\n *\n * @param {number} nHierarchyDepth - Numerical hierarchy depth\n * @private\n */\nSheet.prototype._setHierarchyDepth = function(nHierarchyDepth) {\n\n\t/* The maximum supported hierarchy depth is 7 */\n\tif (typeof nHierarchyDepth !== 'number' || nHierarchyDepth < 1 || nHierarchyDepth > 7) {\n\t\treturn;\n\t}\n\n\tif (!this.format.hierarchyDepth) {\n\t\tthis.format.addAttribute({\n\t\t\tid: 'hierarchyDepth',\n\t\t\tname: 'outlineLevelRow',\n\t\t\tvalue: nHierarchyDepth || 0\n\t\t});\n\t}\n\n\tthis.format.hierarchyDepth.value = Math.max(this.format.hierarchyDepth.value, nHierarchyDepth);\n};\n\n/**\n * Requests the header Row from the ColumnConfiguration and adds it to the\n * sheet.\n *\n * @private\n */\nSheet.prototype._createHeader = function() {\n\tvar headerRow = this._columns.getHeader();\n\n\tif (headerRow === null) {\n\t\tthis.remove('filter');\n\t\tthis.views.defaultView.remove('pane');\n\n\t\treturn;\n\t}\n\n\tthis._appendRow(headerRow);\n};\n\n/**\n * Adds the specified Row to the sheetData element of this Sheet and\n * automatically propagates its row index to the row and its cells.\n *\n * @param {Object} oRow - The Row object that should be appended to the current Sheet\n * @private\n */\nSheet.prototype._appendRow = function(oRow) {\n\tvar i, dimension;\n\n\toRow.setReference('' + (this.data.childs.length + 1));\n\n\tthis.data.childs.push(oRow.serialize());\n\n\t/* Update sheet dimension */\n\tfor (i = 0; i < this.childs.length; i++) {\n\t\tif (this.childs[i].tag == 'dimension') {\n\t\t\tdimension = 'A1:' + Row.getColumnReferenceByIndex(this._columns.size() - 1) + this.data.childs.length;\n\n\t\t\tthis.dimension.reference.value = dimension;\n\n\t\t\tif (this.filter) {\n\t\t\t\tthis.filter.reference.value = dimension;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Creates a new group inside the sheet with the given hierarchy\n * level. All subsequent data rows will be assigned to this group.\n *\n * @function createGroup\n * @param {string} sName - Name of the group that will be displayed in the group header\n * @param {number} nLevel - Hierarchy level that will be used for outlining\n */\nSheet.prototype.createGroup = function(sName, nLevel) {\n\tvar groupHeaderRow;\n\n\tthis._hierarchyLevel = nLevel;\n\tgroupHeaderRow = this._columns.getGroupHeader(sName);\n\n\tthis._appendRow(groupHeaderRow);\n};\n\n/**\n * Requests a row from the ColumnConfiguration containing the given data\n * and adds it to the sheetData element of this Sheet.\n *\n * The maximum row limit is 1,048,576 but the user rather runs out of\n * memory than reaching this limit.\n *\n * @function insert\n * @param {Object} oData - Data object to be inserted\n */\nSheet.prototype.insert = function(oData) {\n\tvar nHierarchyLevel;\n\n\tif (this.data.childs.length == Sheet.MAX_ROWS) {\n\t\tthrow new Error('Row limit reached.');\n\t}\n\n\tnHierarchyLevel =\n\t\tthis._columns.hierarchyLevelProperty ? oData[this._columns.hierarchyLevelProperty] : this._hierarchyLevel;\n\n\t/* Create row and apply binding */\n\tthis._appendRow(this._columns.bind(oData, nHierarchyLevel));\n\tthis._setHierarchyDepth(nHierarchyLevel);\n};\n\nmodule.exports = Sheet;\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Created by Sebastian Bender on 16.03.2017.\n */\nvar XMLNode = __webpack_require__(0);\nvar Cell\t= __webpack_require__(3);\n\n/**\n * The Row is representing a single row according to the Office Open\n * XML standard. A Row provides information about its index (line\n * number) and can contain several Cell objects.\n *\n * @class\n */\nfunction Row() {\n\tXMLNode.call(this, Row.metadata);\n}\n\nRow.prototype = Object.create(XMLNode.prototype);\nRow.prototype.constructor = Row;\n\nRow.metadata = {\n\ttag: 'row',\n\tattributes: [\n\t\t{\n\t\t\tid: 'reference',\n\t\t\tname: 'r',\n\t\t\tvalue: ''\n\t\t},\n\t\t{\n\t\t\tid: 'spans',\n\t\t\tname: 'spans',\n\t\t\tvalue: '1:1'\n\t\t}\n\t]\n};\n\n/**\n * Calculates the Office Open XML Spreadsheet column reference for a\n * numeric value. Referring to the standard, the column is described\n * as a alphabetical value consisting of at least one uppercase character.\n * This function maps these alphabetical representation to numerical\n * zero-based indices.\n *\n * i.E. the column index 27 (which is the 28th column) results in 'AB'\n *\n * @param {number} nIndex - Numerical index for the requested column\n * @returns {string} - The alphabetical column reference for the given index.\n */\nRow.getColumnReferenceByIndex = function(nIndex) {\n\treturn nIndex < 26 ?\n\t\tString.fromCharCode(65 + nIndex) :\n\t\tRow.getColumnReferenceByIndex(Math.floor(nIndex / 26) - 1) + String.fromCharCode(65 + (nIndex % 26));\n};\n\n\n/**\n * Update the 'spans' attribute on this particular {@link Row} for\n * optimization purposes. This property optimizes the loading and\n * rendering in Microsoft Excel.\n *\n * @private\n */\nRow.prototype._updateSpans = function() {\n\tthis.spans.value = '1:' + this.childs.length;\n};\n\n/**\n * Adds the specified {@link Cell} to the current {@link Row}. If the\n * current row already has a reference or style, it will propagate\n * this information to the newly added Cell.\n *\n * @param {object} oCell - Instance of Excel.objects.Cell\n */\nRow.prototype.addCell = function(oCell) {\n\tvar count;\n\n\tif (!oCell || !(oCell instanceof Cell)) {\n\t\treturn;\n\t}\n\n\tcount = this.childs.push(oCell);\n\tthis._updateSpans();\n\n\t/* Applies the cell reference if row reference is already present */\n\tif (this.reference.value) {\n\t\toCell.setReference(Row.getColumnReferenceByIndex(count - 1) + this.reference.value);\n\t}\n\n\tif (this.style) {\n\t\toCell.setStyle(this.style.value);\n\t}\n};\n\n\n/**\n * Updates the reference of the current {@link Row}. The Row reference\n * represents the line number within the Sheet. It will\n * automatically update all assigned Cell references.\n *\n * @param {string} sReference - Row number within the sheet\n */\nRow.prototype.setReference = function(sReference) {\n\tvar i, reference;\n\n\treference = typeof sReference == 'number' ? String(sReference) : sReference;\n\tif (!reference || !reference.match(/^[1-9]+[0-9]*$/g)) {\n\t\treturn;\n\t}\n\n\t/* Only update if necessary */\n\tif (this.reference.value != reference) {\n\t\tthis.reference.value = reference;\n\t\tfor (i = 0; i < this.childs.length; i++) {\n\t\t\tthis.childs[i].setReference(Row.getColumnReferenceByIndex(i) + reference);\n\t\t}\n\t}\n};\n\n/**\n * Applies the given {@link Style} to the current {@link Row}.\n *\n * @param {(number|string)} nStyle - A number or string representing the Style id\n */\nRow.prototype.setStyle = function(nStyle) {\n\tvar i, style;\n\n\tif (!this.style) {\n\t\tstyle = this.addAttribute({name: 's'});\n\t\tObject.defineProperty(this, 'style', {value: style});\n\t}\n\n\tthis.style.value = nStyle;\n\tfor (i = 0; i < this.childs.length; i++) {\n\t\tthis.childs[i].setStyle(nStyle);\n\t}\n};\n\nmodule.exports = Row;\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Type = __webpack_require__(2);\r\n\r\n/**\r\n * The CalendarDate class represents a date/datetime/time data type.\r\n * It handles the formatting and accepts several options like\r\n * calendar, a custom format string and a subtype.\r\n *\r\n * @param {Object} [oConfig] - A configuration object that is used to specify the formatting\r\n * @param {string} [oConfig.type] - The specific type for this CalendarDate (i.E. date, datetime, time)\r\n * @param {string} [oConfig.format] - A custom format string that will be used as template\r\n * @param {string} [oConfig.calendar] - Specifies the calendar that will be used (default: gregorian)\r\n * @param {string} [oConfig.inputFormat] - Specifies the format of the string formatted date value (uppercase YYYYMMDD)\r\n * @constructor\r\n */\r\nfunction CalendarDate(oConfig) {\r\n\tType.call(this);\r\n\r\n\tthis.type = oConfig ? oConfig.type : null;\r\n\tthis.format = oConfig ? oConfig.format : null;\r\n\tthis.calendar = oConfig ? oConfig.calendar : null;\r\n\tthis.inputFormat = oConfig && typeof oConfig.inputFormat == 'string' ? oConfig.inputFormat.toUpperCase() : null;\r\n}\r\n\r\nCalendarDate.prototype = Object.create(Type.prototype);\r\nCalendarDate.prototype.constructor = CalendarDate;\r\n\r\nCalendarDate.DEFAULT = {\r\n\tnumberFormat: 14\r\n};\r\n\r\nCalendarDate.builtin = {\r\n\t14: 'mm-dd-yy',\r\n\t15: 'd-mmm-yy',\r\n\t16: 'd-mmm',\r\n\t17: 'mmm-yy',\r\n\t18: 'h:mm AM/PM',\r\n\t19: 'h:mm:ss AM/PM',\r\n\t20: 'h:mm',\r\n\t21: 'h:mm:ss',\r\n\t22: 'm/d/yy h:mm',\r\n\t45: 'mm:ss',\r\n\t46: '[h]:mm:ss',\r\n\t47: 'mmss.0'\r\n};\r\n\r\nCalendarDate.oSymbols = {\r\n\t'Y': {\r\n\t\tapply: function(sValue, oDate) {\r\n\t\t\toDate.setUTCFullYear(sValue);\r\n\t\t}\r\n\t},\r\n\t'M': {\r\n\t\tapply: function(sValue, oDate) {\r\n\t\t\toDate.setUTCMonth(sValue - 1);\r\n\t\t}\r\n\t},\r\n\t'D': {\r\n\t\tapply: function(sValue, oDate) {\r\n\t\t\toDate.setUTCDate(sValue);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * Creates the Style configuration object for this CalendarDate\r\n * according to its configuration.\r\n *\r\n * @returns {Object} - Style descriptor object\r\n * @private\r\n */\r\nCalendarDate.prototype._createConfiguration = function() {\r\n\tvar key, result, template;\r\n\r\n\tif (!this.type && !this.format && !this.calendar) {\r\n\t\treturn CalendarDate.DEFAULT;\r\n\t}\r\n\r\n\t/* Evaluate type */\r\n\tswitch (this.type) {\r\n\t\tcase 'datetime':\r\n\t\t\ttemplate = CalendarDate.builtin[22];\r\n\t\t\tbreak;\r\n\t\tcase 'time':\r\n\t\t\ttemplate = CalendarDate.builtin[21];\r\n\t\t\tbreak;\r\n\t\tdefault: // Assume 'date' as default\r\n\t\t\ttemplate = CalendarDate.builtin[14];\r\n\t}\r\n\r\n\tif (typeof this.format === 'string') {\r\n\t\ttemplate = this.format.match(/^[dhmsy\\s-,.:/]+(AM\\/PM)?$/) ? this.format : template;\r\n\t}\r\n\r\n\t/* Evaluate calendar */\r\n\tswitch (this.calendar) {\r\n\t\tcase 'islamic':\r\n\t\t\ttemplate = 'b2d mmmm yyyy';\r\n\t\t\tbreak;\r\n\t\tcase 'japanese':\r\n\t\t\ttemplate = '[$-ja-JP]ge.m.d';\r\n\t\t\tbreak;\r\n\t\tdefault: // Gregorian calendar is the default case\r\n\t}\r\n\r\n\tresult = {\r\n\t\tnumberFormat: {\r\n\t\t\tformat: template\r\n\t\t}\r\n\t};\r\n\r\n\t/* Find possible builtin match */\r\n\tfor (key in CalendarDate.builtin) {\r\n\t\tif (CalendarDate.builtin[key] === template) {\r\n\t\t\tresult.numberFormat = parseInt(key, 10);\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n};\r\n\r\n/**\r\n * Returns the value of the given property that is assigned in the line item.\r\n *\r\n * @param {string} sProperty -\r\n * @param {Object} oData - Line item that contains data\r\n * @returns {number|null} - XLSX specific date/time format in days since 30.12.1899\r\n */\r\nCalendarDate.prototype.getValue = function(sProperty, oData) {\r\n\tvar value = oData[sProperty];\r\n\r\n\tif (value === null || typeof value === 'undefined') {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/* Date or String, Number wrapper */\r\n\tif (typeof value === 'object') {\r\n\t\tvalue = value.valueOf();\r\n\t}\r\n\r\n\t/* 1. Unix timestamp as number */\r\n\tif (typeof value === 'number') {\r\n\t\treturn CalendarDate._JsDateToExcel(value);\r\n\t}\r\n\r\n\t/* 2. Pattern formatted date string */\r\n\tif (this.inputFormat && typeof this.inputFormat === 'string') {\r\n\r\n\t\treturn CalendarDate._JsDateToExcel(CalendarDate._parseStringDate(value, this.inputFormat));\r\n\t}\r\n\r\n\t/* 3. OData duration string 'PT01H23M45S' */\r\n\tif (this.type === 'time' && CalendarDate.odataDurationRegex.test(value)) {\r\n\r\n\t\treturn CalendarDate._JsDateToExcel(CalendarDate._parseODataDuration(value));\r\n\t}\r\n\r\n\t/* 4. OData date string '/Date(1234567890)/' */\r\n\tif (CalendarDate.odataDateRegex.test(value)) {\r\n\r\n\t\treturn CalendarDate._JsDateToExcel(CalendarDate._parseOdataDate(value));\r\n\t}\r\n\r\n\t/* 5. Unix timestamp as string */\r\n\tif (isFinite(value)) {\r\n\t\treturn CalendarDate._JsDateToExcel(parseInt(value, 10));\r\n\t}\r\n\r\n\treturn null;\r\n};\r\n\r\n/** START Copied and adapted from datajs **/\r\n/**\r\n * Extracts the milliseconds if the value is a date/time instance or formatted string.\r\n *\r\n * @param {any} vValue the value (may be <code>undefined</code> or <code>null</code>)\r\n * @returns {any} the number of milliseconds or the value itself\r\n */\r\nCalendarDate._parseODataDuration = function(vValue) {\r\n\tvar parts, days, hours, minutes, seconds, ms;\r\n\t// / <summary>Parses a string in xsd:duration format.</summary>\r\n\t// / <param name=\"duration\" type=\"String\">Duration value.</param>\r\n\t// / <remarks>\r\n\t// / This method will return the input, if the input string has a year or a month component.\r\n\t// / </remarks>\r\n\t// / <returns type=\"Object\">Object representing the time</returns>\r\n\r\n\tparts = CalendarDate.odataDurationRegex.exec(vValue);\r\n\r\n\t// Unsupported duration value for Edm.Time OData spec (if year of month is present)\r\n\tif (parts[2] || parts[3]) {\r\n\t\treturn vValue;\r\n\t}\r\n\r\n\tdays = parseInt(parts[4] || 0, 10);\r\n\thours = parseInt(parts[5] || 0, 10);\r\n\tminutes = parseInt(parts[6] || 0, 10);\r\n\tseconds = parseFloat(parts[7] || 0);\r\n\r\n\tms = parts[8];\r\n\tif (ms) {\r\n\t\t// Parse ms duration value ignoring any precision/scale as that part is anyway ignored by JS Date conversion!\r\n\t\tms = parseFloat('0.' + ms) * 1000;\r\n\t} else {\r\n\t\tms = 0;\r\n\t}\r\n\r\n\tms += (seconds * 1000) + (minutes * 60000) + (hours * 3600000) + (days * 86400000);\r\n\r\n\tif (parts[1] === '-') {\r\n\t\tms = -ms;\r\n\t}\r\n\r\n\treturn ms;\r\n};\r\n\r\n/**\r\n * Parses an OData date string and returns the corresponding timestamp\r\n *\r\n * @param {string} sValue - OData date string i.E. \"/Date(1524141637807)/\"\r\n * @returns {number} - Unix timestamp according to OData date including offset\r\n * @private\r\n */\r\nCalendarDate._parseOdataDate = function(sValue) {\r\n\tvar matchArray, date, offset;\r\n\r\n\t/* The RegExp matches up to 4 groups:\r\n\t\t * 0: Full match\r\n\t\t * 1: Timestamp (mandatory)\r\n\t\t * 2: Timezone offset sign [ + | - ] (optional)\r\n\t\t * 3: Timezone offset minutes [0-9]{2,3} (optional)\r\n\t\t */\r\n\tmatchArray = CalendarDate.odataDateRegex.exec(sValue);\r\n\tdate = new Date(parseInt(matchArray[1], 10));\r\n\r\n\tif (matchArray[2] && matchArray[3]) {\r\n\t\toffset = parseInt(matchArray[2] + matchArray[3], 10);\r\n\t\tdate.setUTCMinutes(date.getUTCMinutes() - offset);\r\n\t}\r\n\r\n\treturn date.getTime();\r\n};\r\n\r\n/* The regular expression corresponds to something like this:\r\n * /Date(123+60)/\r\n *\r\n * This first number is date ticks, the + may be a - and is optional,\r\n * with the second number indicating a timezone offset in minutes.\r\n *\r\n * On the wire, the leading and trailing forward slashes are\r\n * escaped without being required to so the chance of collisions is reduced;\r\n * however, by the time we see the objects, the characters already\r\n * look like regular forward slashes.\r\n*/\r\nCalendarDate.odataDateRegex = /^\\/Date\\((-?\\d+)(\\+|-)?(\\d+)?\\)\\/$/;\r\n\r\n// The captured indices for this expression are:\r\n// 0       - complete input\r\n// 1       - direction\r\n// 2,3,4   - years, months, days\r\n// 5,6,7,8 - hours, minutes, seconds, milliseconds\r\nCalendarDate.odataDurationRegex =\r\n\t/^([+-])?P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)(?:\\.(\\d+))?S)?)?/;\r\n\r\n/** END Copied and adapted from datajs */\r\n\r\nCalendarDate.dateStringRegex = /([Y]{4,}|[M]{2}|[D]{2})/g;\r\n\r\n/**\r\n * Converts a JavaScript Date object to an Office Open XML date\r\n * representation. Office Open XML date epoch starts at 00.01.1900\r\n * which is 31.12.1899 and is represented as a number of days since\r\n * beginning of the epoch.\r\n *\r\n * The Javascript Date epoch starts at 01.01.1970 and is represented\r\n * as a number of milliseconds before or after the beginning of the\r\n * epoch.\r\n *\r\n * The amount of days between 01.01.1900 and 01.01.1970 is exactly\r\n * 25567. According to the wrong offset in Excel (31.12.1899 instead\r\n * of 01.01.1900) and the known leap year bug in Excel, we need to\r\n * add two additional days.\r\n *\r\n * https://support.microsoft.com/en-us/help/214326/excel-incorrectly-assumes-that-the-year-1900-is-a-leap-year\r\n *\r\n *\r\n * @param {number} nTimestamp - JavaScript Date object or corresponding timestamp\r\n * @returns {number} - Amount of days since 01.01.1900\r\n * @private\r\n */\r\nCalendarDate._JsDateToExcel = function(nTimestamp) {\r\n\r\n\t/**\r\n\t * Fallback if date is before UTC 30.12.1899 00:00:00 which\r\n\t * corresponds to 0 in Excel\r\n\t */\r\n\treturn Math.max((nTimestamp / (86400 * 1000)) + (25567 + 2), 0);\r\n};\r\n\r\n/**\r\n * The method parses a given string value according to the provided\r\n * date pattern.\r\n *\r\n * Limitations:\r\n * Currently only the symbols d, m, y are supported which correspond\r\n * to day, month, year.\r\n *\r\n * @param {string} sValue - Date formatted string\r\n * @param {string} sPattern - ISO 8601 pattern that gets applied\r\n * @returns {number|null} - UNIX timestamp that represents the parsed date string\r\n * @private\r\n */\r\nCalendarDate._parseStringDate = function(sValue, sPattern) {\r\n\tvar matchArray, date, substring;\r\n\r\n\tdate = new Date(0);\r\n\r\n\tdo {\r\n\t\tmatchArray = CalendarDate.dateStringRegex.exec(sPattern);\r\n\r\n\t\tif (matchArray !== null) {\r\n\t\t\tsubstring = sValue.slice(matchArray.index, matchArray.index + matchArray[0].length);\r\n\r\n\t\t\tCalendarDate.oSymbols[matchArray[0].charAt(0)].apply(parseInt(substring, 10), date);\r\n\t\t}\r\n\t} while (matchArray !== null);\r\n\r\n\treturn date.getTime();\r\n};\r\n\r\nmodule.exports = CalendarDate;\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Type = __webpack_require__(2);\n\n/**\n * The BooleanType class represents a boolean data type. BooleanType\n * data can work in two different ways. The first way is the Office\n * Open XML Spreadsheet built-in type that always shows TRUE/FALSE in\n * the users locale. This value can easily be used within formulas.\n *\n * @param {Object} [oConfig] - Configuration object for this numeric representation\n * @param {string} [oConfig.trueValue] - Contains the value that gets displayed if the Boolean is true\n * @param {string} [oConfig.falseValue] - Contains the value that gets displayed if the Boolean is false\n * @constructor\n */\nfunction BooleanType(oConfig) {\n\tType.call(this);\n\n\tthis.trueValue = oConfig ? oConfig.trueValue : null;\n\tthis.falseValue = oConfig ? oConfig.falseValue : null;\n}\n\nBooleanType.prototype = Object.create(Type.prototype);\nBooleanType.prototype.constructor = BooleanType;\n\nBooleanType.DEFAULT = {\n\tnumberFormat: 0\n};\n\n/**\n * This method indicates if the properties trueValue and falseValue\n * are configured correctly and the BooleanType supports a custom\n * format.\n *\n * @returns {boolean} - Whether to use a custom formatted BooleanType or the built-in type.\n */\nBooleanType.prototype.isCustomFormatted = function() {\n\treturn !!this.trueValue\n\t\t&& typeof this.trueValue === 'string'\n\t\t&& !!this.falseValue\n\t\t&& typeof this.falseValue === 'string';\n};\n\n/**\n * Creates the format according to the provided configuration. If the\n * format matches any builtin format, it will return a reference to\n * its ID instead of the format.\n *\n * Both cases can serve the Style class that consumes this information.\n *\n * @returns {Object} - Configuration object for NumberFormat initialization\n * @private\n */\nBooleanType.prototype._createConfiguration = function() {\n\tvar result = BooleanType.DEFAULT;\n\n\tif (this.isCustomFormatted()) {\n\t\tresult = {\n\t\t\tnumberFormat: {\n\t\t\t\tformat: '\"' + this.trueValue + '\";;\"' + this.falseValue + '\"'\n\t\t\t}\n\t\t};\n\t}\n\n\treturn result;\n};\n\nmodule.exports = BooleanType;\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Numeric = __webpack_require__(4);\n\n/**\n * The Currency class represents a currency data type. It handles the\n * formatting and accepts several options like second property for\n * the unit of measurement or if the unit of measurement should be\n * displayed.\n *\n * It styles currencies with its particular amount of decimals.\n *\n * @param {Object} oConfig - A configuration object that is used to specify the formatting\n * @param {string} oConfig.unitProperty - A custom format string that will be used as template\n * @param {boolean} [oConfig.displayUnit] - Indicating whether the unit of measurement will be shown (default: true)\n * @param {number} [oConfig.scale] - A fixed scale that will be applied to all cells within this column,\n * regardless of its particular unit of measurement\n * @constructor\n */\nfunction Currency(oConfig) {\n\tNumeric.call(this, oConfig);\n\n\tthis.displayUnit = typeof oConfig.displayUnit === 'boolean' ? oConfig.displayUnit : true;\n}\n\nCurrency.prototype = Object.create(Numeric.prototype);\nCurrency.prototype.constructor = Currency;\n\n/**\n * Defines the display default scale that is used for alignment. This\n * has no effect on the technical scale of currency values. It is\n * only used for alignment purposes so that different currencies with\n * different scale are still aligned correctly.\n *\n * @type {number}\n */\nCurrency.DEFAULT_SCALE = 3;\n\nCurrency.DIGITS = {\n\t'ADP': 0,\n\t'AFN': 0,\n\t'ALL': 0,\n\t'AMD': 0,\n\t'BHD': 3,\n\t'BIF': 0,\n\t'BYR': 0,\n\t'CAD': 2,\n\t'CHF': 2,\n\t'CLF': 4,\n\t'CLP': 0,\n\t'COP': 0,\n\t'CRC': 0,\n\t'CZK': 0,\n\t'DEFAULT': 2,\n\t'DJF': 0,\n\t'ESP': 0,\n\t'GNF': 0,\n\t'GYD': 0,\n\t'HUF': 0,\n\t'IDR': 0,\n\t'IQD': 0,\n\t'IRR': 0,\n\t'ISK': 0,\n\t'ITL': 0,\n\t'JOD': 3,\n\t'JPY': 0,\n\t'KMF': 0,\n\t'KPW': 0,\n\t'KRW': 0,\n\t'KWD': 3,\n\t'LAK': 0,\n\t'LBP': 0,\n\t'LUF': 0,\n\t'LYD': 3,\n\t'MGA': 0,\n\t'MGF': 0,\n\t'MMK': 0,\n\t'MNT': 0,\n\t'MRO': 0,\n\t'MUR': 0,\n\t'OMR': 3,\n\t'PKR': 0,\n\t'PYG': 0,\n\t'RSD': 0,\n\t'RWF': 0,\n\t'SLL': 0,\n\t'SOS': 0,\n\t'STD': 0,\n\t'SYP': 0,\n\t'TMM': 0,\n\t'TND': 3,\n\t'TRL': 0,\n\t'TWD': 0,\n\t'TZS': 0,\n\t'UGX': 0,\n\t'UYI': 0,\n\t'UZS': 0,\n\t'VND': 0,\n\t'VUV': 0,\n\t'XAF': 0,\n\t'XOF': 0,\n\t'XPF': 0,\n\t'YER': 0,\n\t'ZMK': 0,\n\t'ZWD': 0\n};\n\n/**\n * Creates the Style configuration needed for registering the Type\n * specific styling in the Styles class.\n *\n * @param {Object} oData - Business object that gets bound to the styling template\n * @returns {Object} - Styling configuration object\n * @private\n */\nCurrency.prototype._createConfiguration = function(oData) {\n\tvar i, j, scale, template, unit;\n\n\ttemplate = '#,##0';\n\n\t// Apply fixed scale, only if no unitProperty is provided\n\tif (!this.unitProperty && typeof this.scale === 'number') {\n\t\tscale = this.scale;\n\t} else {\n\t\tscale = Currency.DIGITS[oData[this.unitProperty]];\n\t}\n\n\t/* If the currency uses the default scale */\n\tif (typeof scale !== 'number') {\n\t\tscale = Currency.DIGITS.DEFAULT;\n\t}\n\n\t/* Apply separator or placeholder */\n\ttemplate += (scale > 0) ? '.' : '_.';\n\n\tfor (i = 0; i < scale; i++) {\n\t\ttemplate += '0';\n\t}\n\n\tfor (j = Currency.DEFAULT_SCALE - scale; j > 0; j--) {\n\t\ttemplate += '_0';\n\t}\n\n\t/* Add unit of measurement if required */\n\tif (this.displayUnit) {\n\t\tunit = oData[this.unitProperty] ? '\"' + oData[this.unitProperty] + '\"' : '_E_U_R';\n\n\t\t// Applies unit of measurement or a placeholder if unit is empty\n\t\ttemplate = template + ' ' + unit;\n\t}\n\n\t// Add formatting for negative values as well\n\ttemplate = '* ' + template + ';* - ' + template;\n\n\treturn { numberFormat: { format: template } };\n};\n\nmodule.exports = Currency;\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLFile\t\t = __webpack_require__(1),\n\tSharedString\t= __webpack_require__(22);\n\n/**\n * The SharedStrings class represents the list of shared String\n * objects that is used in the Office Open XMl Spreadsheet. The\n * SharedStrings object reduces redundancy within the data by\n * providing a reference to unique Strings instead of repeating\n * them.\n *\n * Due to the fact that the Strings are shared within the whole\n * workbook, each instance of the document export only has one\n * single instance of SharedString and therefore it uses the\n * Singleton pattern to ensure this.\n *\n * @class\n */\nfunction SharedStrings() {\n\tif (SharedStrings.instance instanceof SharedStrings) {\n\t\treturn SharedStrings.instance;\n\t}\n\n\tXMLFile.call(this, SharedStrings.metadata);\n\n\tObject.defineProperty(this, 'map', {value: new Map(), writable: false});\n\tObject.defineProperty(this, '_shared', {value: new SharedString(''), writable: false});\n\n\tSharedStrings.instance = this;\n}\n\nSharedStrings.prototype = Object.create(XMLFile.prototype);\nSharedStrings.prototype.constructor = SharedStrings;\n\n/**\n * Retrieves the Singleton instance of SharedStrings. If no instance is present, it will create one.\n *\n * @function\n * @returns {object} - Singleton instance\n */\nSharedStrings.getInstance = function() {\n\tif (!SharedStrings.instance) {\n\t\tSharedStrings.instance = new SharedStrings();\n\t}\n\n\treturn SharedStrings.instance;\n};\n\nSharedStrings.metadata = {\n\tfilename: 'sharedStrings.xml',\n\ttag: 'sst',\n\troot: true,\n\tattributes: [\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\n\t\t}\n\n\t\t/*\n\t\t,{\n\t\t\tname: 'count', // Optional as long as uniqueCount is not set\n\t\t\tvalue: '0'\n\t\t},\n\t\t{\n\t\t\tname : 'uniqueCount', // Optional as long as count is not set\n\t\t\tvalue: '0'\n\t\t}\n\t\t*/\n\t]\n};\n\n/**\n * Adds the specified string value to the set of SharedStrings. The\n * method creates a SharedString proxy object that contains\n * information about the string itself as well as its index. The\n * index is zero-based and can be used for referencing within Cell\n * objects.\n *\n * @function insert\n * @param {string} sValue - The string that has to be inserted\n * @return {object} - The SharedString instance that represents the provided string value\n */\nSharedStrings.prototype.insert = function(sValue) {\n\tvar index;\n\n\tif (this.map.has(sValue)) {\n\t\treturn this.map.get(sValue);\n\t}\n\n\tthis._shared.setValue(sValue);\n\tindex = this.map.size;\n\tthis.map.set(sValue, index);\n\n\t/* The SharedString needs to be added to the child nodes as well for serialization purposes */\n\tthis.childs.push(this._shared.serialize());\n\n\treturn index;\n};\n\nmodule.exports = SharedStrings;\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Type = __webpack_require__(2);\nvar Alignment = __webpack_require__(14);\n\n/**\n * The Text class represents textual information without any\n * particular formatting. It provides font and sizing details that\n * can be used by the Styles class.\n *\n * @param {Object} [oConfig] - Configuration object for this Text type\n * @param {Object} [oConfig.font] - Font configuration object\n * @param {number} [oConfig.font.size] - Font size\n * @param {string} [oConfig.font.name] - Font name i.E. Arial, Verdana, etc.\n * @param {Object} [oConfig.fill] - Cell fill configuration object\n * @param {Object} [oConfig.fill.color] - Cell fill background color\n * @param {Object} [oConfig.fill.type] - Cell fill type\n * @param {Object} [oConfig.template] - Text template for this Type\n * @param {Object} [oConfig.hierarchyLevel] - Property name that is used for hierarchy level indentation\n * @constructor\n */\nfunction Text(oConfig) {\n\tType.call(this);\n\n\tthis.font = oConfig ? oConfig.font : null;\n\tthis.fill = oConfig ? oConfig.fill : null;\n\tthis.template = oConfig ? oConfig.template : null;\n\tthis.hierarchyLevel = oConfig ? oConfig.hierarchyLevel : null;\n\n\tthis._styleIds = [];\n}\n\nText.prototype = Object.create(Type.prototype);\nText.prototype.constructor = Text;\n\nText.DEFAULT = {\n\tfont: {\n\t\tsize: 11,\n\t\tname: 'Arial'\n\t}\n};\n\n/**\n * This method creates the XLSX specific style configuration depending on the cell content\n *\n * @param {Object} oData - Line item that will be used to evaluate the cell content\n * @returns {Object} - Style configuration used by the Styles class\n * @private\n */\nText.prototype._createConfiguration = function(oData) {\n\tvar result = (this.font || this.fill) ? { font: this.font, fill: this.fill } : { font: Text.DEFAULT.font };\n\n\tif (this.hierarchyLevel) {\n\t\tresult.align = {\n\t\t\talign: Alignment.horizontal.LEFT,\n\t\t\tindent: 2 * oData[this.hierarchyLevel]\n\t\t};\n\t}\n\n\treturn result;\n};\n\n/**\n * Returns the assigned ID of the Type specific Style that is\n * registered in the Styles class.\n *\n * @param {Object} oData - Business Object that contains the property for hierarchy levels\n * @returns {number} - ID of the registered Style\n */\nText.prototype.getStyleId = function(oData) {\n\tvar styleId, level;\n\n\t/* Handle simple numeric without unitProperty */\n\tif (!this.hierarchyLevel) {\n\t\treturn Object.getPrototypeOf(Text.prototype).getStyleId.call(this);\n\t}\n\n\tif (!oData) {\n\t\treturn 0;\n\t}\n\n\tlevel = oData[this.hierarchyLevel];\n\tstyleId = this._styleIds[level];\n\n\tif (typeof styleId === 'undefined') {\n\t\tthis._styleIds[level] = this.styles.addStyle(this._createConfiguration(oData));\n\t}\n\n\treturn this._styleIds[level];\n};\n\n/**\n * Returns the data value of the business object that is bound by\n * this type. If a template is configured, it will automatically fill\n * the template with the values from the business object and returns\n * the processed string.\n *\n * @param {string|Array} properties - Name of the property or array of properties that shall be accessed.\n * @param {Object} oData - Business object that contains the data.\n *\n * @returns {string|number|boolean} - The value of the given property after type specific processing.\n */\nText.prototype.getValue = function(properties, oData) {\n\tvar match, regex, result, skip, value;\n\n\tif (!this.template) {\n\t\treturn typeof properties === 'string' ? oData[properties] : oData[properties[0]];\n\t}\n\n\t// Obtain if the further processing should be skipped due to missing values for the template\n\tskip = properties.every(function(property) {\n\t\treturn oData[property] === null\n\t\t\t|| typeof oData[property] === 'undefined'\n\t\t\t|| (typeof oData[property] === 'string' && oData[property] === '');\n\t});\n\n\tif (skip) {\n\t\treturn '';\n\t}\n\n\tresult = this.template;\n\tregex = /{([0-9]+)}/g;\n\n\tmatch = regex.exec(this.template);\n\twhile (match !== null) {\n\n\t\tvalue = oData[properties[match[1]]];\n\n\t\t// Overwrite empty or undefined values by an empty string\n\t\tif (value === null || typeof value === 'undefined') {\n\t\t\tvalue = '';\n\t\t}\n\n\t\t// Replaces the matched placeholder by the indexed property value\n\t\tresult = result.replace(match[0], value);\n\n\t\tmatch = regex.exec(this.template);\n\t}\n\n\treturn result;\n};\n\nmodule.exports = Text;\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode = __webpack_require__(0);\n\n/**\n * The Alignment class defines the alignment of content within the\n * sheet cells. The Alignment is assigned to a particular Style that\n * is registered in the Styles class.\n *\n * @constructor\n */\nfunction Alignment() {\n\tXMLNode.call(this, Alignment.metadata);\n}\n\nAlignment.prototype = Object.create(XMLNode.prototype);\nAlignment.prototype.constructor = Alignment;\n\nAlignment.metadata = {\n\ttag: 'alignment'\n};\n\nAlignment.horizontal = {\n\tLEFT: 'left',\n\tCENTER: 'center',\n\tRIGHT: 'right',\n\tcontains: function(sAlign) {\n\n\t\treturn _contains(sAlign, Alignment.horizontal);\n\t}\n};\n\nAlignment.vertical = {\n\tTOP: 'top',\n\tMIDDLE: 'middle',\n\tBOTTOM: 'bottom',\n\tcontains: function(sAlign) {\n\n\t\treturn _contains(sAlign, Alignment.vertical);\n\t}\n};\n\n/**\n * Checks whether the requested alignment is contained or not. An\n * alignment that is contained can be assigned within styles. Other\n * alignments that are not contained are not supported and thus not\n * assignable. It differentiates between horizontal and vertical\n * alignments, depending on the aggregation that was provided.\n *\n * @param {string} sAlign - The alignment that should be checked\n * @param {Array} oAggregation - The aggregation the alignment might be in\n * @returns {boolean} - Returns true if the alignment is supported\n * @private\n */\nfunction _contains(sAlign, oAggregation) {\n\tvar key, contained = false;\n\n\tfor (key in oAggregation) {\n\t\tcontained = contained ? contained : oAggregation[key] === sAlign && typeof oAggregation[key] !== 'function';\n\t}\n\n\treturn contained;\n}\n\nAlignment.prototype.isDefault = function() {\n\treturn this.attributes.length == 0;\n};\n\n/**\n * Assigns the given indent to this Alignment object.\n *\n * @param {number} nIndent - Numerical value used as indentation\n */\nAlignment.prototype.setIndent = function(nIndent) {\n\n\t/* Remove indent */\n\tif (typeof nIndent != 'number' || nIndent <= 0) {\n\t\tthis.remove('indent');\n\t\tthis.remove('horizontal');\n\n\t\treturn;\n\t}\n\n\tthis._setAlignmentAttribute('indent', nIndent);\n\n\t/* A correct indent requires an explicit horizontal alignment */\n\tif (!this.horizontal) {\n\t\tthis.setHorizontalAlignment(Alignment.horizontal.LEFT);\n\t}\n};\n\n/**\n * Applies the given alignment as horizontal alignment.\n *\n * @param {string} sAlign - Horizontal alignment that gets applied\n */\nAlignment.prototype.setHorizontalAlignment = function(sAlign) {\n\n\t/* Ignore invalid values */\n\tif (!Alignment.horizontal.contains(sAlign)) {\n\t\treturn;\n\t}\n\n\tthis._setAlignmentAttribute('horizontal', sAlign);\n};\n\n/**\n * Applies the given alignment as vertical alignment.\n *\n * @param {string} sAlign - Vertical alignment that gets applied\n */\nAlignment.prototype.setVerticalAlignment = function(sAlign) {\n\n\t/* Ignore invalid values */\n\tif (!Alignment.vertical.contains(sAlign)) {\n\t\treturn;\n\t}\n\n\tthis._setAlignmentAttribute('vertical', sAlign);\n};\n\n/**\n * Assigns the given value as a named property on this Alignment object.\n *\n * @param {string} id - The named property id\n * @param {number|string} value - Textual or numerical value\n * @private\n */\nAlignment.prototype._setAlignmentAttribute = function(id, value) {\n\n\t/* Create attribute if not present */\n\tif (!this[id]) {\n\t\tthis.addAttribute({\n\t\t\tid: id,\n\t\t\tname: id\n\t\t});\n\t}\n\n\tthis[id].value = value;\n};\n\nAlignment.prototype.equals = function(oAlignment) {\n\treturn typeof oAlignment !== 'undefined' && oAlignment !== null\n\t\t&& this.vertical == oAlignment.vertical\n\t\t&& this.horizontal == oAlignment.horizontal\n\t\t&& this.indent == oAlignment.indent;\n};\n\nmodule.exports = Alignment;\n\n/***/ }),\n/* 15 */,\n/* 16 */,\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar App\t\t\t\t\t= __webpack_require__(18),\n\tContentTypes\t\t= __webpack_require__(20),\n\tCore\t\t\t\t= __webpack_require__(21),\n\tRelationships\t\t= __webpack_require__(6),\n\tSheet\t\t\t\t= __webpack_require__(7),\n\tWorkbook\t\t\t= __webpack_require__(23);\n\n/**\n * The XLSXBuilder class represents an Office Open XML Spreadsheet\n * (Microsoft Excel) that can be used to insert structured and\n * formatted data and pack a zipped *.xlsx document.\n *\n * XLSXBuilder requires JSZip 2.x or 3.x to be present.\n *\n * @param {(Object[]|string[])} aBinding - Binding configuration that is used for {@link Column} definition\n * @param {Object} [oContext] - Context object containing metadata for this particular XLSX\n * @param {string} [oContext.application] - Application that created this XLSX\n * @param {string} [oContext.version] - Application version that was used to create this XLSX\n * @param {string} [oContext.title] - Title of the XLSX document\n * @param {string} [oContext.modifiedBy] - User context for the exported document\n * @param {string} [oContext.sheetName] - The name of the data sheet that will be shown in Excel\n * @param {string} [oContext.metaSheetName] - The name of the metadata sheet that will be shown in Excel\n * @param {Object[]} [oContext.metainfo] - Optional Metadata that will be displayed in the additional Metadata Sheet\n * @param {string} [hierarchyLevel] - Name of the property that contains the hierarchy level of each lime item\n * @constructor\n */\nfunction XLSXBuilder(aBinding, oContext, hierarchyLevel) {\n\tvar aMetadataConfig, i, oMetainfoGroup, sSheetName, sMetadataSheetName;\n\n\tif (!(aBinding instanceof Array) || !aBinding.length) {\n\t\tthrow new Error('No binding provided');\n\t}\n\n\t/* Set default values */\n\tsSheetName = 'SAP Document Export';\n\tsMetadataSheetName = 'Metadata';\n\n\tthis.app = new this.objects.App(oContext);\n\tthis.core = new this.objects.Core(oContext);\n\tthis.workbook = new this.objects.Workbook();\n\n\t/* Overwrite default Sheet names if maintained */\n\tif (oContext) {\n\t\tsSheetName = oContext.sheetName ? oContext.sheetName : sSheetName;\n\t\tsMetadataSheetName = oContext.metaSheetName ? oContext.metaSheetName : sMetadataSheetName;\n\t}\n\n\tthis.sheet = this.workbook.addSheet(sSheetName, { columns: aBinding, hierarchyLevel: hierarchyLevel });\n\tthis.workbook.selectSheet(this.sheet);\n\n\tif (typeof oContext === 'object' && oContext.metainfo instanceof Array) {\n\n\t\t/* Define column configuration for metadata sheet */\n\t\taMetadataConfig = [\n\t\t\t{\n\t\t\t\tproperty: 'key',\n\t\t\t\tlabel: 'Key',\n\t\t\t\twidth: 20\n\t\t\t},\n\t\t\t{\n\t\t\t\tproperty: 'value',\n\t\t\t\tlabel: 'Value',\n\t\t\t\twidth: 20\n\t\t\t}\n\t\t];\n\n\t\t/* Add optional Metadata Sheet*/\n\t\tthis.metadata = this.workbook.addSheet(sMetadataSheetName, { columns: aMetadataConfig, hideHeader: true });\n\n\t\t/*\n\t\t * Add a copy of metadata to the Metadata Sheet. The method\n\t\t * #_insertIntoSheet uses Array#shift and would otherwise\n\t\t * manipulate the original metadata array.\n\t\t */\n\t\tfor (i = 0; i < oContext.metainfo.length; i++) {\n\t\t\toMetainfoGroup = oContext.metainfo[i];\n\n\t\t\tthis.metadata.createGroup(oMetainfoGroup.name, 1);\n\t\t\tthis._insertIntoSheet(oMetainfoGroup.items.slice(), this.metadata);\n\t\t}\n\t}\n}\n\nXLSXBuilder.prototype = {\n\n\tobjects: {\n\t\tApp: App,\n\t\tContentTypes: ContentTypes,\n\t\tCore: Core,\n\t\tRelationships: Relationships,\n\t\tSheet: Sheet,\n\t\tWorkbook: Workbook\n\t},\n\n\t/**\n\t * Triggers the packaging process for the Office Open XML\n\t * SpreadSheet. You need to call the method insert() first,\n\t * otherwise the generated Document will contain no data.\n\t *\n\t * The method returns a promise to allow the library to work\n\t * asynchronously.\n\t *\n\t * @function build\n\t * @returns {object} - Packed zip file as Blob or Nodebuffer, depending on the runtime environment\n\t */\n\tbuild: function() {\n\t\tvar files, zip, i, j, fileConfig, FileType, xmlObject, relation, zipConfig, promise;\n\n\t\tfiles = [\n\t\t\t{\n\t\t\t\tname: '[Content_Types].xml',\n\t\t\t\tpath: '',\n\t\t\t\ttype: this.objects.ContentTypes\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: '.rels',\n\t\t\t\tpath: '_rels/',\n\t\t\t\ttype: this.objects.Relationships,\n\t\t\t\trelationships: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: 'xl/workbook.xml',\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: 'docProps/app.xml',\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: 'docProps/core.xml',\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t];\n\t\tzip = new JSZip();\n\n\t\tfor (i = 0; i < files.length; i++) {\n\t\t\tfileConfig = files[i];\n\t\t\tFileType = fileConfig.type;\n\t\t\txmlObject = new FileType();\n\n\t\t\tif (xmlObject instanceof this.objects.Relationships) {\n\t\t\t\tfor (j = 0; j < fileConfig.relationships.length; j++) {\n\t\t\t\t\trelation = fileConfig.relationships[j];\n\t\t\t\t\txmlObject.addRelationship(relation.target, relation.type);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tzip.file(fileConfig.path + fileConfig.name, xmlObject.serialize());\n\t\t}\n\n\t\t// Add document metadata\n\t\tzip.file(this.app.getAbsolutePath(), this.app.serialize());\n\t\tzip.file(this.core.getAbsolutePath(), this.core.serialize());\n\n\t\t// Add workbook and its related files\n\t\tzip.file(this.workbook.getAbsolutePath(), this.workbook.serialize());\n\t\tzip.file(this.workbook.getRelationships().getAbsolutePath(), this.workbook.getRelationships().serialize());\n\n\t\tthis.workbook.getRelatedFiles().forEach(function(file, index, array) {\n\t\t\tzip.file(file.getAbsolutePath(), file.serialize());\n\t\t});\n\n\t\tzipConfig = {\n\t\t\tcompression: 'DEFLATE',\n\t\t\ttype: JSZip.support.nodebuffer ? 'nodebuffer' : 'arraybuffer'\n\t\t};\n\n\t\tif (zip.generateAsync) {\n\t\t\tpromise = zip.generateAsync(zipConfig);\n\t\t} else { // Zip.generate from JSZip 2.x\n\t\t\tpromise = new Promise(function(resolve, reject) {\n\t\t\t\tvar zipped = zip.generate(zipConfig);\n\n\t\t\t\tresolve(zipped);\n\t\t\t});\n\t\t}\n\n\t\treturn promise;\n\t},\n\n\t/**\n\t * Appends the specified set of data to the Open Document Spreadsheet.\n\t * All data will be bound according to the {@link ColumnConfiguration}.\n\t *\n\t * @function append\n\t * @param {(Object[]|Object)} aData - Array of data that gets appended to the Spreadsheet\n\t */\n\tappend: function(aData) {\n\t\tthis._insertIntoSheet(aData, this.sheet);\n\t},\n\n\t/**\n\t * Inserts the given data into the specified Sheet. The method will throw an Error if no Sheet is provided.\n\t *\n\t * @param {Array} aData - Array of business objects that should be inserted\n\t * @param {Sheet} oSheet - The Sheet where the data should be inserted into\n\t * @private\n\t */\n\t_insertIntoSheet: function(aData, oSheet) {\n\t\tvar array;\n\n\t\t/* We need to check if param is null or undefined because [null].length results in 1 */\n\t\tif (typeof aData === 'undefined' || aData === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tarray = aData instanceof Array ? aData : [aData];\n\n\t\twhile (array.length) {\n\t\t\toSheet.insert(array.shift());\n\t\t}\n\t}\n};\n\nmodule.exports = XLSXBuilder;\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLFile = __webpack_require__(1);\n\n/**\n * This class represents the app.xml within the generated Excel. The\n * App contains information about the application that created the\n * Office Open XML Spreadsheet.\n *\n * @param {Object} [oContext] - Context object containing metadata for this particular Excel\n * @param {string} [oContext.application] - Application that created this Excel\n * @param {string} [oContext.version] - Application version that was used to create this Excel\n * @constructor\n */\nfunction App(oContext) {\n\tXMLFile.call(this, App.metadata);\n\n\tif (oContext) {\n\n\t\tif (oContext.application) {\n\t\t\tthis.application.value = oContext.application;\n\t\t}\n\n\t\tif (oContext.version) {\n\t\t\tthis.version.value = oContext.version;\n\t\t}\n\t}\n}\n\nApp.prototype = Object.create(XMLFile.prototype);\nApp.prototype.constructor = App;\n\nApp.metadata = {\n\tpath: 'docProps/',\n\tfilename: 'app.xml',\n\ttag: 'Properties',\n\troot: true,\n\tattributes: [\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/extended-properties'\n\t\t},\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tsuffix: 'vt',\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes'\n\t\t}\n\t],\n\tproperties: [\n\t\t{\n\t\t\tid: 'application',\n\t\t\ttag: 'Application',\n\t\t\tvalue: 'SAP UI5' // Default value, can be overridden\n\t\t},\n\t\t{\n\t\t\ttag: 'DocSecurity',\n\t\t\tvalue: '0'\n\t\t},\n\t\t{\n\t\t\ttag: 'Company',\n\t\t\tvalue: 'SAP SE'\n\t\t},\n\t\t{\n\t\t\ttag: 'SharedDoc',\n\t\t\tvalue: 'false'\n\t\t},\n\t\t{\n\t\t\tid: 'version',\n\t\t\ttag: 'AppVersion',\n\t\t\tvalue: '1.54' // Default value, can be overridden\n\t\t}\n\t]\n};\n\nmodule.exports = App;\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLElement = __webpack_require__(5);\n\n/**\n * The class XMLAttribute is a wrapper for representing XML-like attributes attributes.\n * It is mainly used for defining namespaces and namespace-related attributes.\n *\n * @param {object} oConfig - Object representation of the XMLNode containing at least the tag of the element.\n * @param {string} oConfig.name - String representation of the XML tag.\n * @param {string} [oConfig.prefix] - Prefix of the {@link XMLAttribute} that will be used for XML namespace purposes.\n * @param {string} [oConfig.suffix] - Suffix of the {@link XMLAttribute} that will be used for XML namespace purposes.\n * @param {string} [oConfig.value] - Textual value of the {@link XMLAttribute}.\n * @class\n * @module xml/XMLAttribute\n */\nfunction XMLAttribute(oConfig) {\n\tXMLElement.call(this, oConfig);\n\n\tthis.name = oConfig.name ? oConfig.name : '';\n\tthis.prefix = oConfig.prefix ? oConfig.prefix : '';\n\tthis.suffix = oConfig.suffix ? oConfig.suffix : '';\n}\n\nXMLAttribute.prototype = Object.create(XMLElement.prototype);\nXMLAttribute.prototype.constructor = XMLAttribute;\n\n/**\n * Performes a String serialization of the XMLAttribute. The representation is formatted as follows:\n * <prefix>:<name>:<suffix>=\"<value>\"\n *\n * i.E. ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"'\n * for { name: 'xmlns', suffix: 'xsi', value: 'http://www.w3.org/2001/XMLSchema-instance' }\n *\n * Note that the serialized String always comes with a leading whitespace to allow easy concatenation.\n *\n * @function serialize\n * @returns {string} - String representation of the XMLAttribute\n */\nXMLAttribute.prototype.serialize = function(){\n\treturn ' ' + (this.prefix ? this.prefix + ':' : '') + this.name\n\t\t+ (this.suffix ? ':' + this.suffix : '') + '=\"' + this.xmlEncode(this.value) + '\"';\n};\n\nmodule.exports = XMLAttribute;\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLFile = __webpack_require__(1);\n\n/**\n * This class represents the [Content_Types].xml within the generated Excel.\n *\n * @constructor\n */\nfunction ContentTypes() {\n\tXMLFile.call(this, ContentTypes.metadata);\n}\n\nContentTypes.prototype = Object.create(XMLFile.prototype);\nContentTypes.prototype.constructor = ContentTypes;\n\n\nContentTypes.FILENAME = '';\nContentTypes.metadata = {\n\tfilename: '[Content_Types].xml',\n\ttag: 'Types',\n\troot: true,\n\tattributes: [\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tvalue: 'http://schemas.openxmlformats.org/package/2006/content-types'\n\t\t}\n\t],\n\tproperties: [\n\t\t{\n\t\t\ttag: 'Default',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Extension',\n\t\t\t\t\tvalue: 'xml'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'ContentType',\n\t\t\t\t\tvalue: 'application/xml'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'Default',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Extension',\n\t\t\t\t\tvalue: 'rels'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'ContentType',\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-package.relationships+xml'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'Override',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'PartName',\n\t\t\t\t\tvalue: '/xl/workbook.xml'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'ContentType',\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'Override',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'PartName',\n\t\t\t\t\tvalue: '/xl/worksheets/sheet1.xml'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'ContentType',\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'Override',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'PartName',\n\t\t\t\t\tvalue: '/xl/styles.xml'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'ContentType',\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'Override',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'PartName',\n\t\t\t\t\tvalue: '/xl/sharedStrings.xml'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'ContentType',\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'Override',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'PartName',\n\t\t\t\t\tvalue: '/docProps/core.xml'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'ContentType',\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-package.core-properties+xml'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'Override',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'PartName',\n\t\t\t\t\tvalue: '/docProps/app.xml'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'ContentType',\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.extended-properties+xml'\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n};\n\nmodule.exports = ContentTypes;\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLFile = __webpack_require__(1);\n\n/**\n * This class represents the core.xml within the generated Excel. The\n * Core contains basic information about the content and the owner of\n * the file.\n *\n * @param {Object} [oContext] - Context object containing metadata for this particular Excel\n * @param {string} [oContext.title] - Title of the Excel document\n * @param {string} [oContext.modifiedBy] - User context for the exported document\n * @constructor\n */\nfunction Core(oContext) {\n\tXMLFile.call(this, Core.metadata);\n\n\tif (oContext) {\n\n\t\tif (oContext.title) {\n\t\t\tthis.title.value = oContext.title;\n\t\t}\n\n\t\tif (oContext.modifiedBy) {\n\t\t\tthis.modifiedBy.value = oContext.modifiedBy;\n\t\t}\n\t}\n}\n\nCore.prototype = Object.create(XMLFile.prototype);\nCore.prototype.constructor = Core;\n\nCore.metadata = {\n\tpath: 'docProps/',\n\tfilename: 'core.xml',\n\ttag: 'cp:coreProperties',\n\troot: true,\n\tattributes: [\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tsuffix: 'cp',\n\t\t\tvalue: 'http://schemas.openxmlformats.org/package/2006/metadata/core-properties'\n\t\t},\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tsuffix: 'dc',\n\t\t\tvalue: 'http://purl.org/dc/elements/1.1/'\n\t\t},\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tsuffix: 'dcterms',\n\t\t\tvalue: 'http://purl.org/dc/terms/'\n\t\t},\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tsuffix: 'dcmitype',\n\t\t\tvalue: 'http://purl.org/dc/dcmitype/'\n\t\t},\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tsuffix: 'xsi',\n\t\t\tvalue: 'http://www.w3.org/2001/XMLSchema-instance'\n\t\t}\n\t],\n\tproperties: [\n\t\t{\n\t\t\tid: 'title',\n\t\t\ttag: 'dc:title',\n\t\t\tvalue: 'Table Export' // Default value, can be overridden\n\t\t},\n\t\t{\n\t\t\ttag: 'dc:creator',\n\t\t\tvalue: 'SAP UI5 Document Export'\n\t\t},\n\t\t{\n\t\t\ttag: 'dcterms:created',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tprefix: 'xsi',\n\t\t\t\t\tname: 'type',\n\t\t\t\t\tvalue: 'dcterms:W3CDTF'\n\t\t\t\t}\n\t\t\t],\n\t\t\tvalue: new Date().toISOString()\n\t\t},\n\t\t{\n\t\t\ttag: 'cp:keywords',\n\t\t\tvalue: 'SAP UI5 EXPORT'\n\t\t},\n\t\t{\n\t\t\tid: 'modifiedBy',\n\t\t\ttag: 'cp:lastModifiedBy',\n\t\t\tvalue: 'SAP UI5' // Default value, can be overridden\n\t\t}\n\t]\n};\n\nmodule.exports = Core;\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode = __webpack_require__(0);\n\n/**\n * The SharedString class represents each shared String within the\n * SharedStrings file.\n *\n * @param {string} sValue - The String that gets represented by this SharedString object\n * @class\n */\nfunction SharedString(sValue) {\n\tXMLNode.call(this, SharedString.metadata);\n\n\tthis.setValue(sValue);\n}\n\nSharedString.prototype = Object.create(XMLNode.prototype);\nSharedString.prototype.constructor = SharedString;\n\n\nSharedString.metadata = {\n\ttag: 'si',\n\tproperties: [\n\t\t{\n\t\t\tid: 'text',\n\t\t\ttag: 't'\n\t\t}\n\t]\n};\n\n/**\n * Assigns the given value to the current SharedString instance.\n *\n * @function\n * @param {string} sValue - The string value that should be added\n */\nSharedString.prototype.setValue = function(sValue) {\n\n\tif (sValue && typeof sValue == 'string') {\n\t\tthis.text.value = sValue;\n\t} else {\n\n\t\t/**\n\t\t * There are other implementations for creating a string\n\t\t * representation out of a number that might be more\n\t\t * convenient like new String(number).toString() or\n\t\t * number.toString() but '' + number is the best performing.\n\t\t */\n\t\tthis.text.value = '' + sValue;\n\t}\n};\n\nmodule.exports = SharedString;\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar ColumnConfiguration\t= __webpack_require__(24),\n\tReferenceNode\t\t= __webpack_require__(26),\n\tSharedStrings\t\t= __webpack_require__(12),\n\tSheet\t\t\t\t= __webpack_require__(7),\n\tStyles\t\t\t\t= __webpack_require__(27);\n\n/**\n * This class represents the workbook.xml file within the generated\n * Office Open XML Spreadsheet. The workbook is the central element\n * of the Office Open XML Spreadsheet that references all the content.\n *\n * @constructor\n */\nfunction Workbook() {\n\tvar key;\n\n\tReferenceNode.call(this, Workbook.metadata);\n\n\t/* Create and register central Styles instance for this workbook */\n\tthis._styles = new Styles();\n\tthis._styles.setPath(this.getPath());\n\tthis.addRelatedFile(this._styles);\n\n\t/* Create and register central SharedStrings instance for this workbook */\n\tthis._sharedStrings = SharedStrings.getInstance();\n\tthis._sharedStrings.setPath(this.getPath());\n\tthis.addRelatedFile(this._sharedStrings);\n\n\tfor (key in Workbook.RELATIONS) {\n\t\tthis._relationships.addRelationship(Workbook.RELATIONS[key].target, Workbook.RELATIONS[key].type);\n\t}\n\n\tthis._registeredSheets = [];\n}\n\nWorkbook.prototype = Object.create(ReferenceNode.prototype);\nWorkbook.prototype.constructor = Workbook;\n\nWorkbook.RELATIONS = {\n\tsharedStrings: {\n\t\ttarget: 'sharedStrings.xml',\n\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings'\n\t},\n\tstyles: {\n\t\ttarget: 'styles.xml',\n\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles'\n\t}\n};\n\nWorkbook.metadata = {\n\tfilename: 'workbook.xml',\n\tpath: 'xl/',\n\ttag: 'workbook',\n\troot: true,\n\tattributes: [\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\n\t\t},\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tsuffix: 'r',\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships'\n\t\t}\n\t],\n\tproperties: [\n\t\t{\n\t\t\ttag: 'bookViews',\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'workbookView',\n\t\t\t\t\tattributes: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'xWindow',\n\t\t\t\t\t\t\tvalue: '0'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'yWindow',\n\t\t\t\t\t\t\tvalue: '0'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'windowWidth',\n\t\t\t\t\t\t\tvalue: '22260'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'windowHeight',\n\t\t\t\t\t\t\tvalue: '12645'\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: 'sheets',\n\t\t\ttag: 'sheets'\n\t\t}\n\t]\n};\n\n/**\n * Adds a new {@link Sheet} to this {@link Workbook}\n *\n * @param {string} sName - Name of the {@link Sheet} that is used as label in Microsoft Excel\n * @param {Object} oColumnConfig - The column configuration of this Sheet\n * @param {boolean} [bHideHeader] - Hides the header row (optional - default: false)\n * @returns {Sheet} - The newly added {@link Sheet}\n */\nWorkbook.prototype.addSheet = function(sName, oColumnConfig) {\n\tvar oColumnConfiguration, nCount, sId, oSheet, sSheetFileName;\n\n\tnCount = this.sheets.childs.length + 1;\n\tsSheetFileName = 'sheet' + nCount + '.xml';\n\tsId = this._relationships.addRelationship('worksheets/' + sSheetFileName,\n\t\t'http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet');\n\n\tthis.sheets.addChild({\n\t\ttag: 'sheet',\n\t\tattributes: [\n\t\t\t{\n\t\t\t\tname: 'name',\n\t\t\t\tvalue: sName\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'sheetId',\n\t\t\t\tvalue: '' + nCount\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'id',\n\t\t\t\tprefix: 'r',\n\t\t\t\tvalue: sId\n\t\t\t}\n\t\t]\n\t});\n\n\toColumnConfiguration = new ColumnConfiguration(oColumnConfig, this._styles);\n\toSheet = new Sheet(oColumnConfiguration);\n\toSheet.setFileName(sSheetFileName);\n\toSheet.setPath(this.getPath() + 'worksheets/');\n\n\tthis.addRelatedFile(oSheet);\n\tthis._registeredSheets.push(oSheet);\n\n\treturn oSheet;\n};\n\n/**\n * Set the given sheet as selected. Unselects all other sheets in the workbook.\n *\n * @param {Sheet} oSheet - The Sheet object that should be selected\n */\nWorkbook.prototype.selectSheet = function(oSheet) {\n\n\tif (!(oSheet instanceof Sheet) || this._registeredSheets.indexOf(oSheet) < 0) {\n\t\tthrow new Error('Could not select sheet. Sheet not found.');\n\t}\n\n\t/* Remove selection on all sheets */\n\tthis._registeredSheets.forEach(function(sheetElement, index, array) {\n\t\tsheetElement.views.defaultView.remove('selected');\n\t});\n\n\t/* Select the particular Sheet */\n\toSheet.views.defaultView.addAttribute({\n\t\tid: 'selected',\n\t\tname: 'tabSelected',\n\t\tvalue: '1' // Refers to W3C XML Schema boolean (true)\n\t});\n};\n\nmodule.exports = Workbook;\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Column\t= __webpack_require__(25),\n\tText\t= __webpack_require__(13),\n\tRow\t\t= __webpack_require__(8),\n\tCell\t= __webpack_require__(3);\n\n/**\n * ColumnConfiguration represents the configuration of all columns within\n * one Sheet. The ColumnConfiguration handles the mapping of object\n * properties to certain columns,, labeling, type definition and also\n * display information like width and alignment.\n *\n * @param {Object} oConfig -  An configuration object that contains all necessary column definitions\n * @param {Object} oConfig.columns -  An array of Column definitions. {@see Column} for further details\n * @param {string} [oConfig.hierarchyLevel] -  Name of the property that holds the hierarchy level\n * @param {boolean} [oConfig.hideHeader] - Flag that allows to hide the header row\n * @param {Styles} oStyles - Style collection that is used to register Cell or row specific styles\n * @module binding/ColumnBinding\n * @constructor\n */\nfunction ColumnConfiguration(oConfig, oStyles) {\n\tvar aColumns, oColumn, i;\n\n\tthis.columns = [];\n\tthis._row = null;\n\tthis.styles = oStyles;\n\tthis.hideHeader = oConfig.hideHeader;\n\n\tObject.defineProperty(this, 'hierarchyLevelProperty', { value: oConfig.hierarchyLevel });\n\n\taColumns = oConfig.columns;\n\n\tfor (i = 0; i < aColumns.length; i++) {\n\n\t\t/* As of specification, the hierarchy level indentation will only be applied on the first row */\n\t\tif (i == 0) {\n\t\t\tif (typeof aColumns[i] === 'string') {\n\t\t\t\taColumns[i] = { property: aColumns[i] };\n\t\t\t}\n\n\t\t\taColumns[i].hierarchyLevel = this.hierarchyLevelProperty;\n\t\t}\n\n\t\toColumn = aColumns[i] instanceof Column ? aColumns[i] : new Column(aColumns[i], this.styles);\n\t\tthis.columns.push(oColumn);\n\t}\n}\n\n/**\n * Initializes the objects that are necessary for the binding. This\n * components are:\n * - a template Row\n * - a Cell for each Column\n * - a Style for each data type referenced by each Column\n *\n * @private\n */\nColumnConfiguration.prototype._initBinding = function() {\n\tvar i;\n\n\tthis._row = new Row();\n\n\tfor (i = 0; i < this.columns.length; i++) {\n\t\tthis._row.addCell(this.columns[i].getCell());\n\t}\n};\n\n\n/**\n * Creates an new Row and binds the provided data to the Row Cells according to the current ColumnConfiguration.\n *\n * @param {Object} oData - The data object that has to be bound to the row\n * @param {number} nHierarchyLevel - Hierarchy level that will be used for indent and outline\n * @returns {Row} - Returns the created Row that contains the provided data\n */\nColumnConfiguration.prototype.bind = function(oData, nHierarchyLevel) {\n\tvar i, normalizedHierarchyLevel;\n\n\tif (this._row === null) {\n\t\tthis._initBinding();\n\t}\n\n\t/* Normalise hierarchy depth to not exceed the maximum depth of 7 */\n\tnormalizedHierarchyLevel = Math.min(nHierarchyLevel, 7);\n\n\t/*\n\t * We need to add, update or delete the outline attribute because\n\t * we reuse the row object\n\t */\n\tif (normalizedHierarchyLevel && !this._row.outline) {\n\t\tthis._row.addAttribute({\n\t\t\tid: 'outline',\n\t\t\tname: 'outlineLevel',\n\t\t\tvalue: normalizedHierarchyLevel\n\t\t});\n\t} else if (normalizedHierarchyLevel && this._row.outline) {\n\t\tthis._row.outline.value = normalizedHierarchyLevel;\n\t} else if (!normalizedHierarchyLevel && this._row.outline) {\n\t\tthis._row.remove('outline');\n\t}\n\n\tfor (i = 0; i < this.columns.length; i++) {\n\t\tthis.columns[i].bind(oData);\n\t}\n\n\treturn this._row;\n};\n\n\n/**\n * Creates the header Row according to the current ColumnConfiguration and returns it.\n *\n * @returns {Row} - Header row according to the ColumnConfiguration\n */\nColumnConfiguration.prototype.getHeader = function() {\n\tvar cell, row, type;\n\n\tif (this.hideHeader) {\n\t\treturn null;\n\t}\n\n\trow = new Row();\n\ttype = new Text({\n\t\tfont: {\n\t\t\tname: 'Arial',\n\t\t\tsize: 11,\n\t\t\tbold: true\n\t\t},\n\t\tfill: {\n\t\t\tcolor: 'F7F7F7'\n\t\t}\n\t});\n\n\t/* Register header style */\n\ttype.registerAt(this.styles);\n\n\trow.setStyle(type.getStyleId());\n\trow.addAttribute({\n\t\tname: 'customFormat',\n\t\tvalue: '1'\n\t});\n\n\tthis.columns.forEach(function(column, index, array) {\n\n\t\t/* Create new Cell and assign value */\n\t\tcell = new Cell(type);\n\t\tcell.setValue('label', column);\n\n\t\trow.addCell(cell);\n\t});\n\n\treturn row;\n};\n\nColumnConfiguration.prototype.getGroupHeader = function(sGroupName) {\n\tvar cell, row, type;\n\n\trow = new Row();\n\ttype = new Text({\n\t\tfont: {\n\t\t\tname: 'Arial',\n\t\t\tsize: 11,\n\t\t\tbold: true\n\t\t},\n\t\tfill: {\n\t\t\tcolor: 'F2F2F2'\n\t\t}\n\t});\n\n\t/* Register header style */\n\ttype.registerAt(this.styles);\n\n\trow.setStyle(type.getStyleId());\n\trow.addAttribute({\n\t\tname: 'customFormat',\n\t\tvalue: '1'\n\t});\n\n\trow.spans.value = '1:' + this.size();\n\n\t/* Create new Cell and assign value */\n\tcell = new Cell(type);\n\tcell.setValue('name', {name: sGroupName});\n\n\trow.addCell(cell);\n\n\treturn row;\n};\n\n\n/**\n * Returns the size of the ColumnConfiguration - respectively the\n * count of the configured columns.\n *\n * @returns {number} Count of configured columns\n */\nColumnConfiguration.prototype.size = function() {\n\treturn this.columns.length;\n};\n\nmodule.exports = ColumnConfiguration;\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Cell\t\t\t= __webpack_require__(3),\n\tCalendarDate \t= __webpack_require__(9),\n\tNumeric \t\t= __webpack_require__(4),\n\tCurrency \t\t= __webpack_require__(11),\n\tBooleanType \t= __webpack_require__(10),\n\tText\t\t \t= __webpack_require__(13);\n\n/**\n * The Column class represents the field type of columns. It handles\n * styling, data types and data binding.\n *\n * @param {(Object|string)} oData - Data object representing the Column configuration\n * @param {string} oData.property - References the data object property that is bound as value for this column\n * @param {string} [oData.align] - Optional alignment. Default: Column.Align.Left\n * @param {string} [oData.label] - Optional column label that will be shown in the header row\n * @param {string} [oData.type] - Optional data type for this column. Default: Column.Type.Text\n * @param {string} [oData.width] - Optional width of the\n * @param {Styles} oStyles - Styles collection that is needed to register each Style a Column uses\n * @class\n * @module binding/Column\n */\nfunction Column(oData, oStyles) {\n\tvar oColumnData;\n\n\t/* Fallback assignment if only a key is provided */\n\toColumnData = typeof oData === 'string' ? {property: oData} : oData;\n\tif (!oColumnData || !oColumnData.property) { throw new Error('The property for the column is not defined'); }\n\n\tthis.align = oColumnData.align ? oColumnData.align : Column.Align.Left;\n\tthis.property = oColumnData.property;\n\tthis.label = oColumnData.label ? oColumnData.label : oColumnData.property;\n\tthis.width = oColumnData.width;\n\tthis.styles = oStyles;\n\tthis.type = this._initType(oColumnData);\n}\n\nColumn.Align = {\n\tLeft: 'left',\n\tCenter: 'center',\n\tRight: 'right'\n};\n\n/**\n * Initializes the data type for this Column. Type specific\n * formatting information will be evaluated and applied.\n *\n * @param {Object} oData - Configuration object for this Column that also contains type and formatting information\n * @param {string} oData.type - Specifies the data type\n * @param {boolean} [oData.delimiter] - Specifies if a thousands delimiter is shown\n * @param {number} [oData.scale] - Specifies the the decimal scale\n * @param {string} [oData.calendar] - Specifies the calendar if type is date, datetime or time\n * @param {string} [oData.format] - Specifies a custom format if type is date, datetime or time\n * @param {string} [oData.unit] - Specifies the UoM if type is number\n * @param {string} [oData.unitProperty] - Name of the property that contains the UoM if type is number or currency\n * @param {boolean} [oData.displayUnit] - Specifies if the UoM will be shown or not if type is number or currency\n * @param {string} [oData.trueValue] - Specifies the displayed value if the boolean type has the value true\n * @param {string} [oData.falseValue] - Specifies the displayed value if the boolean type has the value false\n * @param {string} [oData.template] - Specifies a template string that can be filled with several properties\n * @param {string} [oData.hierarchyLevel] - Specifies the name of the property that contains the hierarchy level\n * @param {string} [oData.inputFormat] - Specifies the input format of a string based date\n *\n * @returns {Type} - Returns the specific Type object that contains all the formatting\n * @private\n */\nColumn.prototype._initType = function(oData) {\n\tvar type, sType;\n\n\tsType = oData.type;\n\n\tif (sType === 'date' || sType === 'datetime' || sType === 'time') {\n\t\ttype = new CalendarDate({\n\t\t\tcalendar: oData.calendar,\n\t\t\tformat: oData.format,\n\t\t\ttype: sType,\n\t\t\tinputFormat: oData.inputFormat\n\t\t});\n\n\t\t/* Add \"UTC\" to all columns headers of type datetime to indicate that all timestamps in EXCEL are UTC */\n\t\tthis.label = sType === 'datetime' ? this.label + ' (UTC)' : this.label;\n\n\t} else if (sType === 'number' || sType === 'percent' || sType === 'exponent') {\n\t\ttype = new Numeric({\n\t\t\tdelimiter: oData.delimiter,\n\t\t\tscale: oData.scale,\n\t\t\ttype: oData.type,\n\t\t\tunit: oData.unit,\n\t\t\tunitProperty: oData.unitProperty\n\t\t});\n\t} else if (sType === 'currency') {\n\t\ttype = new Currency({\n\t\t\ttype: sType,\n\t\t\tunitProperty: oData.unitProperty,\n\t\t\tdisplayUnit: oData.displayUnit,\n\t\t\tscale: oData.scale\n\t\t});\n\t} else if (sType === 'boolean') {\n\t\ttype = new BooleanType({\n\t\t\ttrueValue: oData.trueValue,\n\t\t\tfalseValue: oData.falseValue\n\t\t});\n\t} else {\n\t\ttype = new Text({\n\t\t\ttype: 'text',\n\t\t\ttemplate: oData.template,\n\t\t\thierarchyLevel: oData.hierarchyLevel\n\t\t});\n\t}\n\n\ttype.registerAt(this.styles);\n\n\treturn type;\n};\n\n/**\n * Returns the Cell object that is referenced by this particular\n * Column. Every Column references only one single Cell that gets\n * reused for each and every Row.\n *\n * When binding the actual data to a row, the Cell content, its\n * references and its styling get updated and a serialized version\n * of the row is stored within the sheet.\n *\n * @returns {Cell} - The Cell that belongs to this particular Column\n */\nColumn.prototype.getCell = function() {\n\tif (!this.cell) {\n\t\tthis.cell = new Cell(this.type);\n\t}\n\n\treturn this.cell;\n};\n\n/**\n * This method binds the actual business object property to the columns cell.\n *\n * @param {object} oData - Business object that gets bound to the Cell of this Column.\n */\nColumn.prototype.bind = function(oData) {\n\n\t/*\n\t * Due to the fact that Cell#setValue updates the Style depending\n\t * on the actual Cell value (i.E. Unit of Measurement for\n\t * Currencies), we need to provide the original business object\n\t * so that the Cell knows the whole business object instead of\n\t * just the value of its particular property.\n\t */\n\tthis.cell.setValue(this.property, oData);\n};\n\nmodule.exports = Column;\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLFile\t\t\t= __webpack_require__(1),\n\tRelationships\t= __webpack_require__(6);\n\n/**\n * This class represents the a Office Open XML Spreadsheet object\n * that is related to other objects via Relationships. The object\n * manages its Relationships by itself to encapsulate the complexity.\n *\n * A ReferenceNode also provides information about its path so that\n * all relationships that are connected to this ReferenceNode are are\n * relative to its path.\n *\n * @param {Object} oConfig - Configuration object that is used by the super class XMLFile\n * @constructor\n */\nfunction ReferenceNode(oConfig) {\n\tXMLFile.call(this, oConfig);\n\n\tthis._relatedFiles = [];\n\tthis._relationships = new Relationships(this);\n\n\tthis.addRelatedFile(this._relationships);\n}\n\nReferenceNode.prototype = Object.create(XMLFile.prototype);\nReferenceNode.prototype.constructor = ReferenceNode;\n\n\nReferenceNode.prototype.addRelatedFile = function(oXMLFile) {\n\tif (!(oXMLFile instanceof XMLFile)) {\n\t\tthrow new Error('A related file must be of type XMLFile');\n\t}\n\n\tthis._relatedFiles.push(oXMLFile);\n};\n\nReferenceNode.prototype.getRelationships = function() {\n\treturn this._relationships;\n};\n\n/**\n * Returns an Array of {@link XMLFile} objects that are reference by\n * this {@link ReferenceNode}. The method provides a flat copy of the\n * original data to avoid manipulation.\n *\n * @returns {Array} Array containing referenced files\n */\nReferenceNode.prototype.getRelatedFiles = function() {\n\treturn this._relatedFiles.slice();\n};\n\nmodule.exports = ReferenceNode;\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLFile\t\t\t= __webpack_require__(1),\n\tStyle\t\t\t= __webpack_require__(28),\n\tFont\t\t\t= __webpack_require__(29),\n\tFill\t\t\t= __webpack_require__(30),\n\tBorder\t\t\t= __webpack_require__(31),\n\tNumberFormat\t= __webpack_require__(32);\n\n/**\n *\n * @class\n * @module style/Styles\n */\nfunction Styles() {\n\tXMLFile.call(this, Styles.metadata);\n\n\t/* Microsoft Excel fix - specific fill that needs to be present */\n\tthis.addFill({ type: 'none' }); // Add a default fill at index 0\n\tthis.addFill({ type: 'gray125' }); // Needs to have index 1\n\tthis.addStyle(Style.DEFAULT); // Apply base style to feed the hard-coded cellStyles and cellStyleXfs\n}\n\nStyles.prototype = Object.create(XMLFile.prototype);\nStyles.prototype.constructor = Styles;\n\nStyles.metadata = {\n\tfilename: 'styles.xml',\n\ttag: 'styleSheet',\n\troot: true,\n\tattributes: [\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\n\t\t}\n\t],\n\tproperties: [\n\t\t{\n\t\t\tid: 'numberFormats',\n\t\t\ttag: 'numFmts',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'count',\n\t\t\t\t\tname: 'count',\n\t\t\t\t\tvalue: '0'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: 'fonts',\n\t\t\ttag: 'fonts',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'count',\n\t\t\t\t\tname: 'count',\n\t\t\t\t\tvalue: '0'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: 'fills',\n\t\t\ttag: 'fills',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'count',\n\t\t\t\t\tname: 'count',\n\t\t\t\t\tvalue: '0'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: 'borders',\n\t\t\ttag: 'borders',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'count',\n\t\t\t\t\tname: 'count',\n\t\t\t\t\tvalue: '0'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'cellStyleXfs',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'count',\n\t\t\t\t\tvalue: '1'\n\t\t\t\t}\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'xf',\n\t\t\t\t\tattributes: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'numFmtId',\n\t\t\t\t\t\t\tvalue: '0'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'fontId',\n\t\t\t\t\t\t\tvalue: '0'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'fillId',\n\t\t\t\t\t\t\tvalue: '0'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'borderId',\n\t\t\t\t\t\t\tvalue: '0'\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: 'cellXfs',\n\t\t\ttag: 'cellXfs',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'count',\n\t\t\t\t\tname: 'count',\n\t\t\t\t\tvalue: '0'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'cellStyles',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'count',\n\t\t\t\t\tvalue: '1'\n\t\t\t\t}\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'cellStyle',\n\t\t\t\t\tattributes: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'name',\n\t\t\t\t\t\t\tvalue: 'Normal'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'xfId',\n\t\t\t\t\t\t\tvalue: '0'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'builtinId',\n\t\t\t\t\t\t\tvalue: '0'\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'dxfs',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'count',\n\t\t\t\t\tvalue: '0'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'tableStyles',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'count',\n\t\t\t\t\tvalue: '0'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'defaultTableStyle',\n\t\t\t\t\tvalue: 'TableStyleMedium2'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'defaultPivotStyle',\n\t\t\t\t\tvalue: 'PivotStyleLight16'\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n};\n\n\n/**\n * Adds the specified Style to the Styles class according to the\n * Style configuration. The method will return a Style object that\n * references Font, Fill, Border and an optional NumberFormat. If\n * some of the referenced Font, Fill, Border or NumberFormat objects\n * are not present yet, it will create them automatically, otherwise\n * it will re-use existing ones.\n *\n * The method ensures that particular Style combinations exist only\n * once and there are no duplicates.\n *\n * @param {Object} oData - Configuration object that defines the Style information\n * @param {Object} [oData.font] - Configuration object that defines the Font information\n * @param {string} [oData.font.name] - Name of the used Font i.E. 'Arial'\n * @param {string} [oData.font.size] - Preferred Font size i.E. '12'\n * @param {boolean} [oData.font.bold] - Defines the Font weight\n * @param {Object} [oData.fill] - Configuration object that defines the Fill information\n * @param {string} [oData.fill.color] - HEX string defining the color of the cell fill\n * @param {string} [oData.fill.type] - Defines the type of the fill i.E. 'none' or 'solid'\n * @param {Object} [oData.border] - Configuration object that defines the Border information\n * @param {Object|number} [oData.numberFormat] - Configuration object that defines the NumberFormat information\n * @param {string} [oData.numberFormat.format] - Formatting template that will be used\n * @param {Object} [oData.align] - Defines the text alignment within the cell\n * @param {string} [oData.align.horizontal] - Horizontal alignment\n * @param {string} [oData.align.vertical] - Vertical alignment\n * @param {string} [oData.align.indent] - Cell indentation\n * @returns {number} - The ID of the unique Style object that needs to be referenced\n */\nStyles.prototype.addStyle = function(oData) {\n\tvar style, fontId, fillId, borderId, numberFormatId;\n\n\t/* Add Font, Fill, Border and NumberFormat if needed */\n\tfontId = this.addFont(oData.font);\n\tfillId = this.addFill(oData.fill);\n\tborderId = this.addBorder(oData.border);\n\n\t/* Fallback to avoid custom NumberFormats that won't be used if oData.numberFormat is undefined */\n\tif (typeof oData.numberFormat === 'undefined') {\n\t\toData.numberFormat = 0;\n\t}\n\n\tnumberFormatId =\n\t\tNumberFormat._isBuiltin(oData.numberFormat) ? oData.numberFormat : this.addNumberFormat(oData.numberFormat);\n\n\t/* Create temporary Style */\n\tstyle = new Style();\n\n\tstyle.setFontId(fontId);\n\tstyle.setFillId(fillId);\n\tstyle.getBorderId(borderId);\n\tstyle.setNumberFormatId(numberFormatId);\n\tstyle.setAlignment(oData.align);\n\n\t/* Add Style if not already present */\n\treturn this._addToAggregation(style, this.cellXfs);\n};\n\n\n/**\n * Adds the specific item to the provided aggregation. This Method\n * should only be called by the library itself due to possible\n * failures. It automatically updates the count within the XML\n * representation of this aggregation.\n *\n * This method should only be used for Font, Fill, Border or\n * NumberFormat objects.\n *\n * @param {Font|Fill|Border|NumberFormat|Style} oNewItem - The item that needs to be appended to the aggregation\n * @param {Array} aAggregation - An array that represents the aggregation\n * @returns {number} - The zero-based index of the element after it was inserted\n * @private\n */\nStyles.prototype._addToAggregation = function(oNewItem, aAggregation) {\n\tvar count, i;\n\n\ti = -1;\n\n\taAggregation.childs.forEach(function(existingItem, index, array) {\n\t\tif (existingItem.equals(oNewItem)) {\n\t\t\ti = index;\n\t\t}\n\t});\n\n\tif (i === -1) {\n\t\taAggregation.addChild(oNewItem);\n\t\tcount = aAggregation.childs.length;\n\n\t\taAggregation.count.value = count;\n\t\ti = count - 1;\n\t}\n\n\treturn i;\n};\n\n\n/**\n * This method adds a RGB color to the Styles collection that is\n * referenced by several Styles.\n *\n * If this particular color is already present, it will not add it a\n * second time.\n *\n * @param {string} sHexColor - HEX string representing a RGB color\n */\nStyles.prototype.addColor = function(sHexColor) {\n\tvar alreadyPresent;\n\n\tif (!this.colors) {\n\t\tthis.addChild({\n\t\t\tid: 'colors',\n\t\t\ttag: 'colors',\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tid: 'mru',\n\t\t\t\t\ttag: 'mruColors'\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\t}\n\n\talreadyPresent = this.colors.mru.childs.some(function(color) {\n\t\treturn color.rgb.value === 'FF' + sHexColor;\n\t});\n\n\tif (alreadyPresent) {\n\t\treturn;\n\t}\n\n\tthis.colors.mru.addChild({\n\t\ttag: 'color',\n\t\tattributes: [\n\t\t\t{\n\t\t\t\tid: 'rgb',\n\t\t\t\tname: 'rgb',\n\t\t\t\tvalue: 'FF' + sHexColor\n\t\t\t}\n\t\t]\n\t});\n};\n\n\n/**\n * This method adds a Font to the Styles collection that can be\n * referenced by several Styles. The Font is instantiated according\n * to the provided configuration object.\n *\n * If this particular Font is already present, it will not add it a\n * second time. This ensures that each referenced Font is unique\n * according to the criteria of Font#equals.\n *\n * The method returns the index which deals as an identifier for this\n * Font.\n *\n * @param {Object} oData - Configuration object for this Font\n * @returns {number} - The index of this Font used for reference by Style objects\n */\nStyles.prototype.addFont = function(oData) {\n\tvar oFont = new Font(oData);\n\n\treturn this._addToAggregation(oFont, this.fonts);\n};\n\n\n/**\n * This method adds a Fill to the Styles collection that can be\n * referenced by several Styles. The Fill is instantiated according\n * to the provided configuration object.\n *\n * If this particular Fill is already present, it will not add it a\n * second time. This ensures that each referenced Fill is unique\n * according to the criteria of Fill#equals.\n *\n * The method returns the index which deals as an identifier for this\n * Fill.\n *\n * @param {Object} oData - Configuration object for this Fill\n * @returns {number} - The index of this Fill used for reference by Style objects\n */\nStyles.prototype.addFill = function(oData) {\n\tvar index, oFill;\n\n\toFill = new Fill(oData);\n\n\tindex = this._addToAggregation(oFill, this.fills);\n\n\tif (oFill.getFill() !== null) {\n\t\tthis.addColor(oFill.getFill());\n\t}\n\n\treturn index;\n};\n\n\n/**\n * This method adds a Border to the Styles collection that can be\n * referenced by several Styles. The Border is instantiated according\n * to the provided configuration object.\n *\n * If this particular Border is already present, it will not add it a\n * second time. This ensures that each referenced Border is unique\n * according to the criteria of Border#equals.\n *\n * The method returns the index which deals as an identifier for this\n * Border.\n *\n * @param {Object} oData - Configuration object for this Border\n * @returns {number} - The index of this Border used for reference by Style objects\n */\nStyles.prototype.addBorder = function(oData) {\n\tvar oBorder = new Border(oData);\n\n\treturn this._addToAggregation(oBorder, this.borders);\n};\n\n\n/**\n * This method adds a NumberFormat to the Styles collection that can\n * be referenced by several Styles. The NumberFormat is instantiated\n * according to the provided configuration object.\n *\n * If this particular NumberFormat is already present, it will not\n * add it a second time. This ensures that each referenced\n * NumberFormat is unique according to the criteria of\n * NumberFormat#equals.\n *\n * The method returns the index which deals as an identifier for this\n * NumberFormat.\n *\n * @param {Object} oData - Configuration object for this NumberFormat\n * @returns {number} - The index of this NumberFormat used for reference by Style objects\n */\nStyles.prototype.addNumberFormat = function(oData) {\n\tvar index, numberFormat;\n\n\tnumberFormat = new NumberFormat(oData);\n\tindex = this._addToAggregation(numberFormat, this.numberFormats);\n\n\tnumberFormat.setId(NumberFormat.ID_OFFSET + index);\n\n\treturn numberFormat.getId();\n};\n\nmodule.exports = Styles;\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode = __webpack_require__(0);\nvar Alignment = __webpack_require__(14);\n\n/**\n * Represents a particular Style within the Office Open XML Spreadsheet.\n * Instances of this type will be created by the Styles Class after\n * registering a new Style.\n *\n * @constructor\n */\nfunction Style() {\n\tXMLNode.call(this, Style.metadata);\n}\n\nStyle.prototype = Object.create(XMLNode.prototype);\nStyle.prototype.constructor = Style;\n\nStyle.metadata = {\n\ttag: 'xf',\n\tattributes: [\n\t\t{\n\t\t\tid: 'numberFormat',\n\t\t\tname: 'numFmtId',\n\t\t\tvalue: '0'\n\t\t},\n\t\t{\n\t\t\tid: 'font',\n\t\t\tname: 'fontId',\n\t\t\tvalue: '0'\n\t\t},\n\t\t{\n\t\t\tid: 'fill',\n\t\t\tname: 'fillId',\n\t\t\tvalue: '0'\n\t\t},\n\t\t{\n\t\t\tid: 'border',\n\t\t\tname: 'borderId',\n\t\t\tvalue: '0'\n\t\t}\n\t]\n};\n\nStyle.DEFAULT = {\n\tfont: {\n\t\tname: 'Arial',\n\t\tsize: 11,\n\t\tfamily: '2',\n\t\tcolor: '1',\n\t\tbold: false\n\t},\n\tfill: {\n\t\ttype: 'none'\n\t}\n};\n\nStyle.prototype.getAlignment = function() {\n\treturn this.alignment ? this.alignment : null;\n};\n\nStyle.prototype.getFontId = function() {\n\treturn this.font.value;\n};\n\nStyle.prototype.getFillId = function() {\n\treturn this.fill.value;\n};\n\nStyle.prototype.getBorderId = function() {\n\treturn this.border.value;\n};\n\nStyle.prototype.getNumberFormatId = function() {\n\treturn this.numberFormat.value;\n};\n\n/**\n * Applies the alignment to the Style. The alignment must match the\n * predefined options of <code>Alignment</code> as far as it is not\n * null. Other values will be ignored.\n *\n * The value <code>null</code> will delete the current alignment.\n *\n * @param {Object} oAlign - Alignment configuration that gets applied or null\n * @param {string} [oAlign.horizontal] - Horizontal alignment\n * @param {string} [oAlign.vertical] - Vertical alignment\n * @param {number} [oAlign.indent] - Cell indentation\n */\nStyle.prototype.setAlignment = function(oAlign) {\n\tvar alignment, alignProperty;\n\n\talignProperty = 'alignment';\n\n\t// Removes the applyAlignment automatically when sAlign is null\n\tthis._apply(oAlign, 'Alignment');\n\n\tif (typeof oAlign === 'undefined' || oAlign === null) {\n\t\tthis.remove(alignProperty);\n\n\t\treturn;\n\t}\n\n\tif (!(alignProperty in this)) {\n\t\talignment = new Alignment();\n\n\t\tthis.addChild(alignment);\n\t\tObject.defineProperty(this, alignProperty, {value: alignment, writable: false, configurable: true});\n\t}\n\n\tthis[alignProperty].setHorizontalAlignment(oAlign.horizontal);\n\tthis[alignProperty].setVerticalAlignment(oAlign.vertical);\n\tthis[alignProperty].setIndent(oAlign.indent);\n};\n\nStyle.prototype.setFontId = function(nFontId) {\n\tthis._apply(nFontId, 'Font');\n\n\tthis.font.value = nFontId;\n};\n\nStyle.prototype.setFillId = function(nFillId) {\n\tthis._apply(nFillId, 'Fill');\n\n\tthis.fill.value = nFillId;\n};\n\nStyle.prototype.setBorderId = function(sBorderId) {\n\tthis.border.value = sBorderId;\n};\n\nStyle.prototype.setNumberFormatId = function(nNumFmtId) {\n\tthis._apply(nNumFmtId, 'NumberFormat');\n\n\tthis.numberFormat.value = nNumFmtId;\n};\n\nStyle.prototype._apply = function(nId, sType) {\n\tvar applyProperty = 'apply' + sType;\n\n\tthis.remove(applyProperty);\n\n\tif (nId) {\n\t\tthis.addAttribute({\n\t\t\tid: applyProperty,\n\t\t\tname: applyProperty,\n\t\t\tvalue: '1'\n\t\t});\n\t}\n};\n\nStyle.prototype.equals = function(oStyle) {\n\tif (!(oStyle instanceof Style)) {\n\t\treturn false;\n\t}\n\n\treturn this.getFontId() === oStyle.getFontId()\n\t\t&& this.getFillId() === oStyle.getFillId()\n\t\t&& this.getBorderId() === oStyle.getBorderId()\n\t\t&& this.getNumberFormatId() === oStyle.getNumberFormatId()\n\t\t&& ( (!this.alignment && !oStyle.alignment) || (this.alignment && this.alignment.equals(oStyle.alignment)) );\n};\n\nmodule.exports = Style;\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode = __webpack_require__(0);\n\n/**\n * The Font class represents a Font configuration within an Office\n * Open XML Spreadsheet.\n *\n * @param {Object} oData - Configuration object for this Font\n * @param {boolean} [oData.bold] - Boolean value indicating if the Font should be bold\n * @param {string} [oData.name] - The name of the font that gets used by this Font object i.E. Arial, Verdana, etc.\n * @param {number|String} [oData.size] - The font size that is been used\n * @param {number} [oData.family] - The font family reference {@see getFamily}\n * @constructor\n */\nfunction Font(oData) {\n\tXMLNode.call(this, Font.metadata);\n\n\tif (oData && oData instanceof Object) {\n\t\tthis.setName(oData.name)\n\t\t\t.setSize(oData.size)\n\t\t\t.setFamily(oData.family)\n\t\t\t.setBold(!!oData.bold);\n\t}\n}\n\nFont.prototype = Object.create(XMLNode.prototype);\nFont.prototype.constructor = Font;\n\nFont.DEFAULT_SIZE = 11;\nFont.DEFAULT_NAME = 'Arial';\n\nFont.metadata = {\n\ttag: 'font',\n\tproperties: [\n\t\t{\n\t\t\tid: 'size',\n\t\t\ttag: 'sz',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'valueAttribute',\n\t\t\t\t\tname: 'val',\n\t\t\t\t\tvalue: Font.DEFAULT_SIZE\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: 'color',\n\t\t\ttag: 'color',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'valueAttribute',\n\t\t\t\t\tname: 'theme',\n\t\t\t\t\tvalue: '1'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: 'name',\n\t\t\ttag: 'name',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'valueAttribute',\n\t\t\t\t\tname: 'val',\n\t\t\t\t\tvalue: Font.DEFAULT_NAME\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: 'family',\n\t\t\ttag: 'family',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'valueAttribute',\n\t\t\t\t\tname: 'val',\n\t\t\t\t\tvalue: 2\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n};\n\n/**\n * Checks if the current Font is equal to the given parameter.\n *\n * @param {Font} oFont - The Font to compare with\n * @return {boolean} - Returns true if both Font objects contain the same configuration.\n */\nFont.prototype.equals = function(oFont) {\n\tif (!(oFont instanceof Font)) {\n\t\treturn false;\n\t}\n\n\treturn this.getName() == oFont.getName()\n\t\t&& this.getSize() == oFont.getSize()\n\t\t&& this.isBold() == oFont.isBold()\n\t\t&& this.getColor() == oFont.getColor()\n\t\t&& this.getFamily() == oFont.getFamily();\n};\n\n/**\n * Returns whether the Font will be displayed bold or not.\n *\n * @returns {boolean} - Returns true if the Font is bold\n */\nFont.prototype.isBold = function() {\n\treturn !!this.bold;\n};\n\n/**\n * Returns the size of this Font.\n *\n * @returns {number} - The size of the Font\n */\nFont.prototype.getSize = function() {\n\treturn this.size.valueAttribute.value;\n};\n\n/**\n * Returns the name of this Font. I.E. Arial, Calibri, etc.\n *\n * @returns {string} - The name of the Font\n */\nFont.prototype.getName = function() {\n\treturn this.name.valueAttribute.value;\n};\n\n/**\n * Returns the color reference of this Font.\n *\n * @returns {string} - The color as HEX string\n */\nFont.prototype.getColor = function() {\n\treturn this.color.valueAttribute.value;\n};\n\n/**\n * Returns the Font family reference of this Font. The reference is\n * defined within the Office Open XML specification.\n * 1 : Roman (Times New Roman, SAP-icons)\n * 2 : Swiss (Arial, Calibri, Segoe UI, Tahoma, Verdana)\n * 3 : Modern\n * 4 : Script\n * 5 : Decorative\n * 6-14 : Reserved for future use\n *\n * @returns {number} - The Font family ID\n */\nFont.prototype.getFamily = function() {\n\treturn this.family.valueAttribute.value;\n};\n\n/**\n * This method can be used to set the Font to bold or not.\n *\n * @param {boolean} bBold - A boolean value that indicates if the Font should be bold or not\n * @return {Font} - Returns the current Font object for chaining\n */\nFont.prototype.setBold = function(bBold) {\n\tvar boldProperty = 'bold';\n\n\t/* Early return if bold status is already correct */\n\tif (bBold === !!this[boldProperty]) {\n\t\treturn this;\n\t}\n\n\tif (bBold) {\n\t\tthis.addChild({\n\t\t\tid: boldProperty,\n\t\t\ttag: 'b'\n\t\t});\n\t} else {\n\t\tthis.remove(boldProperty);\n\t}\n\n\treturn this;\n};\n\n/**\n * This method is used to set the Font family reference for the used font.\n *\n * @see {@link getFamily}\n * @param {number} nFamily - Number that references the Font family\n * @returns {Font} - Returns the current Font object for chaining\n */\nFont.prototype.setFamily = function(nFamily) {\n\n\tif (nFamily > 0 && nFamily < 15) {\n\t\tthis.family.valueAttribute.value = nFamily;\n\t}\n\n\treturn this;\n};\n\n/**\n * Assigns the given font name to this object.\n *\n * @param {string} sName - Name of the font i.E. Arial, Calibri, etc.\n * @return {Font} - Returns the current Font object for chaining\n */\nFont.prototype.setName = function(sName) {\n\tif (sName && typeof sName === 'string') {\n\t\tthis.name.valueAttribute.value = sName;\n\t}\n\n\t/*\n\t * If the font name is Calibri we need to add another child node:\n\t *\n\t *\t{\n\t *\t\ttag: 'scheme',\n\t *\t\tattributes: [\n\t *\t\t\t{\n\t *\t\t\t\tname: 'val',\n\t *\t\t\t\tvalue: 'minor'\n\t *\t\t\t}\n\t *\t\t]\n\t *\t}\n\t */\n\n\treturn this;\n};\n\n/**\n * Assigns the given font size to this object.\n *\n * @param {number} nSize - Textual representation of the font size\n * @return {Font} - Returns the current Font object for chaining\n */\nFont.prototype.setSize = function(nSize) {\n\n\t/* Check preconditions */\n\tif (typeof nSize !== 'number' || isNaN(nSize) || nSize < 1 || nSize > 96) {\n\t\tthrow new Error('The size ' + nSize + ' is not supported.');\n\t}\n\n\tthis.size.valueAttribute.value = nSize;\n\n\treturn this;\n};\n\nmodule.exports = Font;\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode = __webpack_require__(0);\n\n/**\n * This Class represents a background fill of cells within the Office\n * Open Spreadsheet document. The Fill accepts a configuration object\n * which might have either an \"color\" or an \"type\" property.\n *\n * @param {Object} oData - Configuration object for this Fill\n * @param {string} [oData.color] - HEX string defining the colored fill\n * @param {string} [oData.type] - Color independent fill type\n * @constructor\n */\nfunction Fill(oData) {\n\tXMLNode.call(this, Fill.metadata);\n\n\tif (oData) {\n\t\tif (oData.color) {\n\t\t\tthis.setFill(oData.color);\n\t\t} else if (oData.type) {\n\t\t\tthis.setType(oData.type);\n\t\t}\n\t}\n}\n\nFill.prototype = Object.create(XMLNode.prototype);\nFill.prototype.constructor = Fill;\n\nFill.DEFAULT_TYPE = 'none';\n\nFill.metadata = {\n\ttag: 'fill',\n\tproperties: [\n\t\t{\n\t\t\tid: 'fill',\n\t\t\ttag: 'patternFill',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'type',\n\t\t\t\t\tname: 'patternType',\n\t\t\t\t\tvalue: Fill.DEFAULT_TYPE\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n};\n\n/**\n * Checks if the current Fill is equal to the one that was provided.\n *\n * @param {Fill} oFill - The Fill that gets compared to the current Fill\n * @returns {boolean} - Returns true if the compared objects are of the same type and contain the same color fill\n */\nFill.prototype.equals = function(oFill) {\n\tif (!(oFill instanceof Fill)) {\n\t\treturn false;\n\t}\n\n\treturn this.getType() === oFill.getType()\n\t\t&& this.getFill() === oFill.getFill();\n};\n\n/**\n * Returns the color of the current Fill.\n *\n * @returns {string|null} - String containing the color HEX color of the Fill or null of no color is assigned\n */\nFill.prototype.getFill = function() {\n\n\t/* The opacity needs to be removed before returning the HEX color */\n\treturn this.fill.childs.length ? this.fill.color.rgb.value.substring(2) : null;\n};\n\nFill.prototype.setFill = function(sColor) {\n\tthis.reset();\n\n\tif (sColor && typeof sColor === 'string' && /^[A-Fa-f0-9]{6}$/.test(sColor)) {\n\t\tthis.fill.type.value = 'solid';\n\n\t\t/**\n\t\t * Apply the provided color as forground color of the\n\t\t * background. We add 'FF' in front of the HEX-color\n\t\t * for opacity.\n\t\t */\n\t\tthis.fill.addChild({\n\t\t\tid: 'color',\n\t\t\ttag: 'fgColor',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'rgb',\n\t\t\t\t\tname: 'rgb',\n\t\t\t\t\tvalue: 'FF' + sColor\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\n\t\t/**\n\t\t * Add default background layer which will be used once the\n\t\t * foreground color uses transparency\n\t\t */\n\t\tthis.fill.addChild({\n\t\t\ttag: 'bgColor',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'indexed',\n\t\t\t\t\tvalue: '64'\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\t}\n};\n\n/**\n * Returns the current Fill type.\n *\n * @returns {string} - Current Fill type\n */\nFill.prototype.getType = function() {\n\treturn this.fill.type.value;\n};\n\n/**\n * Assigns the given type as Fill type. The Fill will be reset to\n * default before the type is applied.\n *\n * @param {string} sType - Type that needs to be assigned\n */\nFill.prototype.setType = function(sType) {\n\tthis.reset();\n\n\tthis.fill.type.value = sType;\n};\n\n/**\n * Resets the current fill to avoid side effects that might occur\n * when the fill is modified.\n */\nFill.prototype.reset = function() {\n\tthis.fill.type.value = 'none';\n\tthis.fill.childs.length = 0;\n};\n\nmodule.exports = Fill;\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode = __webpack_require__(0);\n\n/**\n * This class represents border configuration for Office Open XML Spreadsheets.\n * @constructor\n */\nfunction Border() {\n\tXMLNode.call(this, Border.metadata);\n}\n\nBorder.prototype = Object.create(XMLNode.prototype);\nBorder.prototype.constructor = Border;\n\nBorder.metadata = {\n\ttag: 'border',\n\tproperties: [\n\t\t{\n\t\t\ttag: 'left'\n\t\t},\n\t\t{\n\t\t\ttag: 'right'\n\t\t},\n\t\t{\n\t\t\ttag: 'top'\n\t\t},\n\t\t{\n\t\t\ttag: 'bottom'\n\t\t},\n\t\t{\n\t\t\ttag: 'diagonal'\n\t\t}\n\t]\n};\n\n/**\n * Checks if the current Border is equal to the given parameter.\n *\n * @param {Border} oBorder - Border that get's compared to the current one\n * @return {boolean} - Returns true if both Borders have the same configuration\n */\nBorder.prototype.equals = function(oBorder) {\n\n\t/**\n\t * Once it is a Border object we always return true because we\n\t * don't provide more than one border type\n\t */\n\treturn oBorder instanceof Border;\n};\n\nmodule.exports = Border;\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode = __webpack_require__(0);\n\n/**\n * The NumberFormat class is used to store custom formatting for\n * numeric values. In addition to a variety of built-in formats that\n * cannot be used as identifier for a particular format, the user can\n * create up to 250 different number formats.\n *\n * (https://support.office.com/en-us/article/Excel-specifications-and-limits-1672b34d-7043-467e-8e27-269d656771c3)\n *\n * @param {Object} oData - Configuration object that is used for initialization\n * @param {string} oData.format - Custom format that will be applied\n * @constructor\n */\nfunction NumberFormat(oData) {\n\tXMLNode.call(this, NumberFormat.metadata);\n\n\tthis.format.value = oData && oData.format ? oData.format : NumberFormat.DEFAULT;\n}\n\nNumberFormat.prototype = Object.create(XMLNode.prototype);\nNumberFormat.prototype.constructor = NumberFormat;\n\nNumberFormat.metadata = {\n\ttag: 'numFmt',\n\tattributes: [\n\t\t{\n\t\t\tid: 'formatId',\n\t\t\tname: 'numFmtId'\n\t\t},\n\t\t{\n\t\t\tid: 'format',\n\t\t\tname: 'formatCode'\n\t\t}\n\t]\n};\n\nNumberFormat.BUILTIN_IDS = [ 0, 1, 2, 3, 4, 9, 10, 11, 12, 13, 14, 15,\n\t16, 17, 18, 19, 20, 21, 22, 37, 38, 39, 40, 45, 46, 47, 48, 49 ];\nNumberFormat.ID_OFFSET = 166;\nNumberFormat.DEFAULT = '#,##0.00';\n\n/**\n * This method returns the ID of this NumberFormat. If there was no\n * ID assigned yet, it will return undefined.\n *\n * @returns {number} - The ID of this NumberFormat\n */\nNumberFormat.prototype.getId = function() {\n\treturn this.formatId.value;\n};\n\n\n/**\n * Returns the format of this NumberFormat as a string.\n *\n * @returns {string} - The format template that gets applied\n */\nNumberFormat.prototype.getFormat = function() {\n\treturn this.format.value;\n};\n\n\n/**\n * Assigns the provided ID to the current NumberFormat.\n *\n * @param {number|string} sId - The ID of this NumberFormat that can be referenced\n */\nNumberFormat.prototype.setId = function(sId) {\n\tvar iId = typeof sId === 'number' ? sId : parseInt(sId, 10);\n\n\t/* Checks if NaN, below zero or builtin ID */\n\tif (isNaN(iId) || iId < 0 || NumberFormat._isBuiltin(iId)) {\n\t\treturn;\n\t}\n\n\tthis.formatId.value = sId;\n};\n\n\n/**\n * Sets a specific format.\n *\n * @param {string} sFormat - The format that gets applied by this NumberFormat\n */\nNumberFormat.prototype.setFormat = function(sFormat) {\n\tthis.format.value = sFormat;\n};\n\n\n/**\n * Checks if a given ID is a builtin ID or not. Builtin IDs cannot be used for custom NumberFormats.\n *\n * @param {number} iId - ID that needs to be checked if it is a builtin ID\n *\n * @returns {boolean} - Returns true if the provided ID is a builtin ID that cannot be used\n * @private\n */\nNumberFormat._isBuiltin = function(iId) {\n\treturn NumberFormat.BUILTIN_IDS.indexOf(iId) > -1;\n};\n\n\n/**\n * Compares another NumberFormat to the current one. This method will\n * match NumberFormat objects by its format regardless of their ID.\n *\n * @param {NumberFormat} oNumberFormat - The NumberFormat to compare with\n * @returns {boolean} - Returns true if the format template is equal to the one from the compared object\n */\nNumberFormat.prototype.equals = function(oNumberFormat) {\n\tif (!(oNumberFormat instanceof NumberFormat)) {\n\t\treturn false;\n\t}\n\n\treturn this.getFormat() === oNumberFormat.getFormat();\n};\n\nmodule.exports = NumberFormat;\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// XLSXBuilder.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ec45a77245af68849c0d","var XMLElement = require('./XMLElement');\nvar XMLAttribute = require('./XMLAttribute');\n\n/**\n * JSON representation of XML nodes. Each node has a tag an can have multiple {@link XMLAttribute} entries assigned.\n * It can also have multiple child {@link XMLNode} elements assigned. The node can contain a value.\n *\n * @param {object|string} oConfig - Object representation of the XMLNode containing at least the tag of the element.\n * @param {string} oConfig.tag - String representation of the XML tag.\n * @param {object[]} [oConfig.attributes] - Aggregation for adding {@link XMLAttributes} to the current node.\n * @param {object[]} [oConfig.properties] - Aggregation for adding {@link XMLNode} objects as child objects to this node\n * @param {string} [oConfig.value] - String value inside the XML tag.\n * @class\n * @module xml/XMLNode\n */\nfunction XMLNode(oConfig) {\n\tvar i, j, config;\n\n\tXMLElement.call(this, oConfig);\n\n\t/* Shorthand functionality to simply assign the XMLNode tag name instead of a configuration object */\n\tconfig = typeof oConfig === 'string' ? {tag: oConfig} : oConfig;\n\n\tObject.defineProperty(this, 'root', {value: !!config.root, writable: false});\n\tthis.tag = typeof config.tag == 'string' ? config.tag : '';\n\tthis.attributes = [];\n\tthis.childs = [];\n\n\t/* Initialize the XML node by filling the aggregations if present */\n\tif (config.attributes) {\n\t\tfor (i = 0; i < config.attributes.length; i++) {\n\t\t\tthis.addAttribute(config.attributes[i]);\n\t\t}\n\t}\n\n\tif (config.properties) {\n\t\tfor (j = 0; j < config.properties.length; j++) {\n\t\t\tthis.addChild(config.properties[j]);\n\t\t}\n\t}\n}\n\nXMLNode.prototype = Object.create(XMLElement.prototype);\nXMLNode.prototype.constructor = XMLNode;\n\nXMLNode.processingInformation = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n\n\n/**\n * Adds the provided XMLAttribute object to the XMLNode.\n * If no XMLAttribute is provided it will create one instead.\n * The method returns the XMLAttribute for chaining.\n *\n * @function addAttribute\n * @param {Object} oConfig - XMLAttribute or configuration object that represents a XMLAttribute\n * @returns {Object} - An instance of XMLAttribute that was added to this node\n */\nXMLNode.prototype.addAttribute = function(oConfig) {\n\tvar attribute = oConfig instanceof XMLAttribute ? oConfig : new XMLAttribute(oConfig);\n\n\tthis.attributes.push(attribute);\n\n\tif (oConfig.id) {\n\t\tObject.defineProperty(this, oConfig.id, {value: attribute, writable: false, configurable: true});\n\t}\n\n\treturn attribute;\n};\n\n\n/**\n * Adds the provided XMLNode object as child to the current XMLNode.\n * If no XMLNode is provided it will create one instead.\n * The method returns the XMLNode for chaining.\n *\n * @function addChild\n * @param {Object} oConfig - XMLNode or configuration object that represents a XMLNode\n * @returns {object} - An instance of XMLNode that was added to this node\n */\nXMLNode.prototype.addChild = function(oConfig) {\n\n\t/* Additional Attributes of the child node will be added in the Constructor */\n\tvar node = oConfig instanceof XMLNode ? oConfig : new XMLNode(oConfig);\n\n\tthis.childs.push(node);\n\n\tif (oConfig.id) {\n\t\tObject.defineProperty(this, oConfig.id, {value: node, writable: false, configurable: true});\n\t}\n\n\treturn node;\n};\n\n\n/**\n * Removes the property from this object and also deletes the\n * referenced item within the child nodes or attributes\n * aggregation.\n *\n * The method returns the previously referenced object or null if\n * the property name is not present on this particular XMLNode or\n * if no item is referenced.\n *\n * Builtin properties of XMLNode cannot be removed with this\n * function. These are \"root\", \"tag\", \"attributes\", \"childs\",\n * \"value\".\n *\n * @param {string} sProperty - Name of the property that should be removed\n * @returns {XMLNode|XMLAttribute|null} - The referenced object that gets removed as well\n */\nXMLNode.prototype.remove = function(sProperty) {\n\tvar index, referencedElement, aAggregation;\n\n\t/* Only proceed if property is present */\n\tif (!(sProperty in this)) {\n\t\treturn null;\n\t}\n\n\treferencedElement = this[sProperty];\n\n\t/* Check if referenced element is a XMLAttribute */\n\tif (referencedElement instanceof XMLAttribute) {\n\t\taAggregation = this.attributes;\n\t} else if (referencedElement instanceof XMLNode && !(sProperty in new XMLNode(''))) {\n\t\taAggregation = this.childs;\n\t} else {\n\n\t\t/* Early return if referenced element is neither an XMLAttribute nor XMLNode */\n\t\treturn null;\n\t}\n\n\tindex = aAggregation.indexOf(referencedElement);\n\taAggregation.splice(index, 1); // It is ensured that index > -1 otherwise #addChild or #addAttribute fail\n\tdelete this[sProperty];\n\n\treturn referencedElement;\n};\n\n/**\n * Allows recursive serialization of the object and its descendants. If the XMLNode is marked as root node,\n * it will automatically add the XML processing information in front of the serialized representation.\n *\n * @function serialize\n * @returns {string} - String representation of the XMLNode.\n */\nXMLNode.prototype.serialize = function() {\n\tvar sSerialized, i, j;\n\n\tsSerialized = (this.root ? XMLNode.processingInformation : '') + '<' + this.tag;\n\n\t/* Insert attributes including namespace information */\n\tfor (i = 0; i < this.attributes.length; i++) {\n\t\tsSerialized += this.attributes[i].serialize();\n\t}\n\n\t/* Insert child nodes and value */\n\tif (this.childs.length || this.value || typeof this.value === 'number') {\n\t\tsSerialized += '>';\n\n\t\tfor (j = 0; j < this.childs.length; j++) {\n\t\t\tsSerialized += typeof this.childs[j] === 'string' ? this.childs[j] : this.childs[j].serialize();\n\t\t}\n\t\tsSerialized += this.xmlEncode(this.value);\n\n\t\tsSerialized += '</' + this.tag + '>';\n\t} else {\n\n\t\t/* Shorthand tag support */\n\t\tsSerialized += '/>';\n\t}\n\n\treturn sSerialized;\n};\n\nmodule.exports = XMLNode;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/xml/XMLNode.js\n// module id = 0\n// module chunks = 0","var XMLNode\t\t = require('../xml/XMLNode');\n\n/**\n * The XMLFile class is a subclass of XMLNode that enriches the\n * object by path and file name information.\n *\n * @param {Object} oConfig - The configuration object for this XMLFile\n * @param {string} oConfig.path - The relative path of this XMLFile\n * @param {string} oConfig.filename - The file name of this XMLFile\n * @class\n */\nfunction XMLFile(oConfig) {\n\tXMLNode.call(this, oConfig);\n\n\tthis._filename = oConfig.filename;\n\tthis._path = oConfig.path;\n}\n\nXMLFile.prototype = Object.create(XMLNode.prototype);\nXMLFile.prototype.constructor = XMLFile;\n\n/**\n * Returns the name of this particular file including its file extension.\n *\n * @returns {string} Name of the file\n */\nXMLFile.prototype.getFileName = function() {\n\treturn this._filename;\n};\n\n/**\n * Assigns the given string as name of the file. The name must contain a file extension.\n *\n * @param {string} sFileName - Name of the file\n */\nXMLFile.prototype.setFileName = function(sFileName) {\n\n\tif (!sFileName.match(/^\\S+\\.\\S{3,4}$/)) {\n\t\tthrow new Error('Invalid file name: ' + sFileName);\n\t}\n\n\tthis._filename = sFileName;\n};\n\n/**\n * Returns the path of the file without any filename.\n *\n * @returns {string} - Path of the file\n */\nXMLFile.prototype.getPath = function() {\n\treturn this._path;\n};\n\n/**\n * Returns the absolute Path to the file.\n *\n * @returns {string} - Absolute path including the filename\n */\nXMLFile.prototype.getAbsolutePath = function() {\n\treturn this.getPath() + this.getFileName();\n};\n\n/**\n * Assigns the given path to this XMLFile. The path needs to end with\n * a slash to match the criteria.\n *\n * @param {string} sPath - Relative path of this XMLFile\n */\nXMLFile.prototype.setPath = function(sPath) {\n\n\t/* IE compatible endsWith */\n\tif (!sPath || sPath.lastIndexOf('/') !== (sPath.length - 1)) {\n\t\tthrow new Error('Invalid file path: ' + sPath);\n\t}\n\n\tthis._path = sPath;\n};\n\nmodule.exports = XMLFile;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/xml/XMLFile.js\n// module id = 1\n// module chunks = 0","/**\n * The Type class defines a supported data type, like strings,\n * numeric values, decimals, dates, currencies and so on. It is NOT\n * part of the XML representation of the generated Excel document.\n *\n * This class is marked as abstract therefore only its sub-classes\n * should be used.\n *\n * @constructor\n * @abstract\n */\nfunction Type() {\n\tthis.styleId = null;\n}\n\n/**\n * Creates the type specific configuration that is used to register\n * its corresponding style in the Styles class.\n *\n * @abstract\n * @private\n */\nType.prototype._createConfiguration = function() {\n\tthrow new Error('Abstract method must be implemented by its subclass!');\n};\n\n/**\n * Returns the assigned ID of the Type specific Style that is\n * registered in the Styles class.\n *\n * @param {Object} [oData] - Business object that contains the actual data\n * @returns {number} - ID of the registered Style\n */\nType.prototype.getStyleId = function(oData) {\n\tif (this.styleId === null) {\n\t\tthis.styleId = this.styles.addStyle(this._createConfiguration());\n\t}\n\n\treturn this.styleId;\n};\n\n/**\n * Registers the Style configuration of this Type in the given Styles\n * class.\n *\n * @param {Styles} oStyles - Styles instance where the Type specific styling will be registered\n */\nType.prototype.registerAt = function(oStyles) {\n\tthis.styles = oStyles;\n};\n\n/**\n * Returns the data value of the business object that is bound by\n * this type.\n *\n * @param {string} property - Name of the property that shall be accessed.\n * @param {Object} oData - Business object that contains the data.\n *\n * @returns {string|number|boolean} - The value of the given property after type specific processing.\n */\nType.prototype.getValue = function(property, oData) {\n\treturn oData[property];\n};\n\nmodule.exports = Type;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/binding/type/Type.js\n// module id = 2\n// module chunks = 0","var XMLNode\t\t \t= require('../xml/XMLNode'),\n\tCalendarDate \t= require('../binding/type/CalendarDate'),\n\tNumeric \t\t= require('../binding/type/Numeric'),\n\tBooleanType \t= require('../binding/type/BooleanType'),\n\tCurrency \t\t= require('../binding/type/Currency'),\n\tSharedStrings   = require('../data/SharedStrings');\n\n/**\n * The Cell class represents a single cell within the spreadsheet\n * that has to be assigned to a particular row. A Cell stores\n * information supporting several types of data.\n *\n * @param {Type} oType - The data type of the cell\n * @class\n */\nfunction Cell(oType) {\n\tXMLNode.call(this, Cell.metadata);\n\n\tthis._applyType(oType);\n}\n\nCell.prototype = Object.create(XMLNode.prototype);\nCell.prototype.constructor = Cell;\n\nCell.DataType = {\n\tBoolean: 'b',\n\tDate: 'd',\n\tInlineString: 'inlineStr', // We do not support inline strings\n\tNumber: 'n',\n\tSharedString: 's',\n\tFormularString: 'str'\n};\n\nCell.metadata = {\n\ttag: 'c',\n\tattributes: [\n\t\t{\n\t\t\tid: 'reference',\n\t\t\tname: 'r',\n\t\t\tvalue: ''\n\t\t},\n\t\t{\n\t\t\tid: 'style',\n\t\t\tname: 's',\n\t\t\tvalue: '0' // Default style id\n\t\t}\n\t],\n\tproperties: [\n\t\t{\n\t\t\tid: 'text',\n\t\t\ttag: 'v'\n\t\t}\n\t]\n};\n\n/**\n * Applies the given type to the current Cell and maps to the\n * corresponding Office Open XML type definition.\n *\n * @param {Type} oType - Value of type {@link Type}\n * @private\n */\nCell.prototype._applyType = function(oType) {\n\tObject.defineProperty(this, 'type', { value: Cell.DataType.SharedString, writable: true });\n\n\tswitch (oType.constructor) {\n\t\tcase CalendarDate:\n\t\t\tthis.type = Cell.DataType.Date;\n\t\t\tbreak;\n\t\tcase Numeric:\n\t\t\tthis.type = Cell.DataType.Number;\n\t\t\tbreak;\n\t\tcase BooleanType:\n\t\t\tthis.type = Cell.DataType.Boolean;\n\n\t\t\tif (!oType.isCustomFormatted()) {\n\t\t\t\tthis.addAttribute({\n\t\t\t\t\tname: 't',\n\t\t\t\t\tvalue: Cell.DataType.Boolean\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tbreak;\n\t\tcase Currency:\n\t\t\tthis.type = Cell.DataType.Number;\n\t\t\tbreak;\n\t\tdefault: // Text is the default case\n\t\t\tthis.addAttribute({\n\t\t\t\tname: 't',\n\t\t\t\tvalue: Cell.DataType.SharedString // Default cell type\n\t\t\t});\n\t\t\tthis.type = Cell.DataType.SharedString;\n\t}\n\n\tthis.bindingType = oType;\n};\n\n/**\n * Applies the specified Style to the cell.\n *\n * @param {number|string} nStyle - Instance of Excel.objects.Style\n */\nCell.prototype.setStyle = function(nStyle) {\n\tthis.style.value = nStyle;\n};\n\n/**\n * Applies the specified cell location as reference. The reference\n * must match the regular expression of Open Document SpreadsheetML\n * sheet format. Starting with at least one uppercase letter for the\n * column followed by a number without leading zeros for the row.\n * [A-Z]+[1-9]+[0-9]*\n *\n * @param {string} sReference - Reference of the cells' location\n */\nCell.prototype.setReference = function(sReference) {\n\tif (typeof sReference != 'string'\n\t\t|| !sReference.match(/^[A-Z]+[1-9]+[0-9]*$/g)) {\n\t\tthrow new Error('The given Cell reference \"' + sReference + '\" does not match the reference pattern.');\n\t}\n\n\tthis.reference.value = sReference;\n};\n\n/**\n * Assigns the value to the current Cell. The method requires either\n * an shared String proxy object or an inline String. This method can\n * only be called once per Cell!\n *\n * @param {(string|Array)} sProperty - single property or Array of properties\n * @param {Object} oBusinessObject - BusinessObject that gets bound to this Cell\n */\nCell.prototype.setValue = function(sProperty, oBusinessObject) {\n\tvar shared, value;\n\n\tvalue = this.bindingType.getValue(sProperty, oBusinessObject);\n\n\tif (!this._isValuePresent(value)) {\n\n\t\t/*\n\t\t * We need to clear the value due to the fact\n\t\t * that we are re-using the Cell for each row\n\t\t */\n\t\tthis.text.value = '';\n\n\t\treturn;\n\t}\n\n\tswitch (this.type) {\n\t\tcase Cell.DataType.Number:\n\t\t\tthis.text.value = value;\n\t\t\tbreak;\n\n\t\tcase Cell.DataType.Boolean:\n\n\t\t\t/* String representations other than \"true\" will result in the boolean value false */\n\t\t\tif (typeof value === 'string') {\n\t\t\t\tvalue = value.toLowerCase() === 'true';\n\t\t\t}\n\t\t\tthis.text.value = value ? '1' : '0';\n\t\t\tbreak;\n\n\t\tcase Cell.DataType.Date:\n\t\t\tthis.text.value = value;\n\t\t\tbreak;\n\n\t\tdefault: // SharedString is the default case\n\t\t\tshared = SharedStrings.getInstance();\n\t\t\tthis.text.value = shared.insert(value);\n\t}\n\n\t/*\n\t * Forces a style update once the value changed. This allows cell\n\t * specific styles for currency types. Due to the fact that the\n\t * Style ID gets cached within the Type, there is no performance\n\t * impact even on large data sets.\n\t */\n\tthis.setStyle(this.bindingType.getStyleId(oBusinessObject));\n};\n\n/**\n * Checks whether there is a value provided or not. Allowed values\n * are Stringsas well as numeric and boolean values. Empty Strings\n * will be evaluated as no value, but the numeric value 0 is a value.\n *\n * @param {(string|number|boolean|Array)} data - The value that gets checked\n * @returns {boolean} - true if a value is present, false if not\n * @private\n */\nCell.prototype._isValuePresent = function(data) {\n\treturn ((typeof data === 'string' && !!data)\n\t\t|| typeof data === 'number'\n\t\t|| typeof data === 'boolean'\n\t\t|| data instanceof Date);\n};\n\nmodule.exports = Cell;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/data/Cell.js\n// module id = 3\n// module chunks = 0","var Type = require('./Type');\n\n/**\n * The Numeric class represents a numeric data type. Numeric data can\n * handle several options like thousands delimiter, decimal (scale)\n * and different types like 'percent' and 'exponential'.\n *\n * @param {Object} [oConfig] - Configuration object for this numeric representation\n * @param {boolean} [oConfig.delimiter] - Indicates if a thousands delimiter should be used\n * @param {number} [oConfig.scale] - Defines the amount of decimals\n * @param {string} [oConfig.type] - Applies a specific type like 'exponential' or 'percent'\n * @param {string} [oConfig.unit] - Specifies a particular unit of measurement\n * @param {string} [oConfig.unitProperty] - Specifies a property that contains the unit of measurement\n * @constructor\n */\nfunction Numeric(oConfig) {\n\tType.call(this);\n\n\tthis.unit = oConfig ? oConfig.unit : null;\n\tthis.unitProperty = oConfig ? oConfig.unitProperty : null;\n\tthis.delimiter = oConfig ? oConfig.delimiter : false;\n\tthis.scale = oConfig ? oConfig.scale : null;\n\n\tthis.styleIds = {};\n}\n\nNumeric.prototype = Object.create(Type.prototype);\nNumeric.prototype.constructor = Numeric;\n\nNumeric.DEFAULT = {\n\tnumberFormat: 0\n};\n\nNumeric.builtin = {\n\t1: '0',\n\t2: '0.00',\n\t3: '#,##0',\n\t4: '#,##0.00',\n\t9: '0%',\n\t10: '0.00%',\n\t11: '0.00E+00',\n\t12: '# ?/?',\n\t13: '# ??/??',\n\t37: '#,##0;(#,##0)',\n\t38: '#,##0;[Red](#,##0)',\n\t39: '#,##0.00;(#,##0.00)',\n\t40: '#,##0.00;[Red](#,##0.00)',\n\t48: '##0.0E+0'\n};\n\n/**\n * Creates the format according to the provided configuration. If the\n * format matches any builtin format, it will return a reference to\n * its ID instead of the format.\n *\n * Both cases can serve the Style class that consumes this information.\n *\n * @param {Object} oData - Business object that contains additional data that is used for the formatting\n * @returns {Object} - Configuration object for NumberFormat initialization\n * @private\n */\nNumeric.prototype._createConfiguration = function(oData) {\n\tvar i, key, result,\n\t\ttemplate = Numeric.builtin[1],\n\t\tunit = '';\n\n\tif (!this.delimiter && typeof this.scale !== 'number') {\n\t\treturn Numeric.DEFAULT;\n\t}\n\n\tif (this.delimiter) {\n\t\ttemplate = '#,##' + template;\n\t}\n\n\t/* Add decimal*/\n\tif (typeof this.scale === 'number' && this.scale > 0) {\n\t\ttemplate += '.';\n\n\t\tfor (i = 0; i < this.scale; i++) {\n\t\t\ttemplate += '0';\n\t\t}\n\t}\n\n\t/* Obtain unit of measurement if available */\n\tif (typeof this.unitProperty === 'string' && oData) {\n\t\tunit = ' \"' + oData[this.unitProperty] + '\"';\n\t} else if (typeof this.unit === 'string') {\n\t\tunit = ' \"' + this.unit + '\"';\n\t}\n\n\t/* Apply Unit */\n\ttemplate += unit;\n\n\tresult = {\n\t\tnumberFormat: {\n\t\t\tformat: template\n\t\t}\n\t};\n\n\t/* Find possible builtin match */\n\tfor (key in Numeric.builtin) {\n\t\tif (Numeric.builtin[key] === template) {\n\t\t\tresult.numberFormat = parseInt(key, 10);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Returns the assigned ID of the Type specific Style that is\n * registered in the Styles class.\n *\n * @param {Object} oData - Business Object that contains the property for the UoM\n * @returns {number} - ID of the registered Style\n */\nNumeric.prototype.getStyleId = function(oData) {\n\tvar styleId, unit;\n\n\t/* Handle simple numeric without unitProperty */\n\tif (!this.unitProperty) {\n\t\treturn Object.getPrototypeOf(Numeric.prototype).getStyleId.call(this);\n\t}\n\n\tif (!oData) {\n\t\treturn 0;\n\t}\n\n\tunit = oData[this.unitProperty];\n\tstyleId = this.styleIds[unit];\n\n\tif (typeof styleId === 'undefined') {\n\t\tthis.styleIds[unit] = this.styles.addStyle(this._createConfiguration(oData));\n\t}\n\n\treturn this.styleIds[unit];\n};\n\nmodule.exports = Numeric;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/binding/type/Numeric.js\n// module id = 4\n// module chunks = 0","/**\n * The XMLElement is an abstract base class that can store a\n * particular value and escape XML specific characters.\n *\n * @param {Object} oConfig - Configuration object that contains the value of this XML Element\n * @constructor\n * @abstract\n */\nfunction XMLElement(oConfig) {\n\tthis.value = oConfig && oConfig.value ? oConfig.value : '';\n}\n\n/**\n * Escapes the given String value to fulfill the requirements of\n * XML encoded characters. If the String does not contain any\n * character that needs to be encoded, the original String will\n * be returned.\n *\n * This significantly increases the performance because the\n * initial regular expression match is much faster than the\n * String replace function. We assume that only a few Strings\n * need to be encoded.\n *\n * The following characters need to be encoded:\n * < (lower than)\n * > (greater than)\n * \" (quotes)\n * ' (apostrophe)\n * & (ampersand)\n *\n * @param {string} sValue - The value that needs to be XML encoded\n * @returns {string} - XML encoded String\n */\nXMLElement.prototype.xmlEncode = function(sValue) {\n\treturn typeof sValue === 'string' && sValue.match(/[><\"'&]+/) !== null ? this._replace(sValue) : sValue;\n};\n\n/**\n * @see _xmlEncode\n * @param {string} sValue - The string that contains characters that needs to be replaced\n * @returns {string} - XML encoded String\n * @private\n */\nXMLElement.prototype._replace = function(sValue) {\n\n\t/**\n\t * Perform ampersand replacement first to avoid encoding the\n\t * control ampersand of other encoded characters.\n\t *\n\t * i.E. >& should be encoded as &gt;&amp; instead of &amp;gt;&amp;\n\t */\n\treturn sValue\n\t\t.replace(/&/g, '&amp;')\n\t\t.replace(/</g, '&lt;')\n\t\t.replace(/>/g, '&gt;')\n\t\t.replace(/\"/g, '&quot;')\n\t\t.replace(/'/g, '&apos;');\n};\n\nmodule.exports = XMLElement;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/xml/XMLElement.js\n// module id = 5\n// module chunks = 0","var\tXMLFile = require('../xml/XMLFile'),\n\tXMLNode = require('../xml/XMLNode');\n\n/**\n * @param {ReferenceNode} oReferenceNode - ReferenceNode object that is the root of this Relationships XMLFile\n * @constructor\n */\nfunction Relationships(oReferenceNode) {\n\tXMLFile.call(this, Relationships.metadata);\n\n\tif (oReferenceNode instanceof XMLFile) {\n\t\tthis.setFileName(oReferenceNode.getFileName() + '.rels');\n\t\tthis.setPath(oReferenceNode.getPath() + '_rels/');\n\t}\n}\n\nRelationships.prototype = Object.create(XMLFile.prototype);\nRelationships.prototype.constructor = Relationships;\n\nRelationships.metadata = {\n\tfilename: '.rels',\n\tpath: '_rels/',\n\ttag: 'Relationships',\n\troot: true,\n\tattributes: [\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tvalue: 'http://schemas.openxmlformats.org/package/2006/relationships'\n\t\t}\n\t],\n\tproperties: []\n};\n\n/**\n * Creates a new Relationship entry for the current collection.\n * The Relationship references are defined by the ISO/IEC 29500-1:2016 standard.\n *\n * @param {string} sTarget - Target file within the generated Excel\n * @param {string} sType - XMLNS reference of the targets file type\n * @returns {string} The newly created relationship id that can be referenced i.E. \"rId4\"\n */\nRelationships.prototype.addRelationship = function(sTarget, sType) {\n\tvar id = 'rId' + (this.childs.length + 1);\n\n\tthis.childs.push(new XMLNode({\n\t\ttag: 'Relationship',\n\t\tattributes: [\n\t\t\t{\n\t\t\t\tname: 'Id',\n\t\t\t\tvalue: id\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Type',\n\t\t\t\tvalue: sType\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Target',\n\t\t\t\tvalue: sTarget\n\t\t\t}\n\t\t]\n\t}));\n\n\treturn id;\n};\n\nmodule.exports = Relationships;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/objects/Relationships.js\n// module id = 6\n// module chunks = 0","var XMLFile\t\t = require('../xml/XMLFile'),\n\tRow\t\t\t = require('./Row');\n\n/**\n * This class represents a Sheet within an Office Open XML Spreadsheet.\n * @param {Object} oColumnConfiguration - ColumnConfiguration object that provides information about the columns\n * @constructor\n */\nfunction Sheet(oColumnConfiguration) {\n\tXMLFile.call(this, Sheet.metadata);\n\n\tObject.defineProperty(this, '_columns', {value: oColumnConfiguration, writable: false});\n\n\tthis._hierarchyProperty = oColumnConfiguration._hierarchyProperty;\n\tthis._hierarchyLevel = 0;\n\tthis._createCols();\n\tthis._createHeader();\n}\n\nSheet.prototype = Object.create(XMLFile.prototype);\nSheet.prototype.constructor = Sheet;\n\nSheet.metadata = {\n\ttag: 'worksheet',\n\troot: true,\n\tattributes: [\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\n\t\t},\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tsuffix: 'r',\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships'\n\t\t}\n\t],\n\tproperties: [\n\t\t{\n\t\t\ttag: 'sheetPr',\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'outlinePr',\n\t\t\t\t\tattributes: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'summaryBelow',\n\t\t\t\t\t\t\tvalue: '0'\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: 'dimension',\n\t\t\ttag: 'dimension',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'reference',\n\t\t\t\t\tname: 'ref',\n\t\t\t\t\tvalue: 'A1' // Default dimension of an empty Sheet\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: 'views',\n\t\t\ttag: 'sheetViews',\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tid: 'defaultView',\n\t\t\t\t\ttag: 'sheetView',\n\t\t\t\t\tattributes: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'workbookViewId',\n\t\t\t\t\t\t\tvalue: '0'\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\tproperties: [\n\n\t\t\t\t\t\t/* Freezes the header row */\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: 'pane',\n\t\t\t\t\t\t\ttag: 'pane',\n\t\t\t\t\t\t\tattributes: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'ySplit',\n\t\t\t\t\t\t\t\t\tvalue: '1'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'topLeftCell',\n\t\t\t\t\t\t\t\t\tvalue: 'A2'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'activePane',\n\t\t\t\t\t\t\t\t\tvalue: 'bottomLeft'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'state',\n\t\t\t\t\t\t\t\t\tvalue: 'frozen'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: 'format',\n\t\t\ttag: 'sheetFormatPr',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'defaultRowHeight',\n\t\t\t\t\tvalue: '15'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: 'columns',\n\t\t\ttag: 'cols'\n\t\t},\n\t\t{\n\t\t\tid: 'data',\n\t\t\ttag: 'sheetData'\n\t\t},\n\t\t{\n\t\t\tid: 'filter',\n\t\t\ttag: 'autoFilter',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'reference',\n\t\t\t\t\tname: 'ref',\n\t\t\t\t\tvalue: 'A1' // Default dimension of an empty Sheet\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'pageMargins',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'left',\n\t\t\t\t\tvalue: '0.75'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'right',\n\t\t\t\t\tvalue: '0.75'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'top',\n\t\t\t\t\tvalue: '1'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'bottom',\n\t\t\t\t\tvalue: '1'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'header',\n\t\t\t\t\tvalue: '0.5'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'footer',\n\t\t\t\t\tvalue: '0.5'\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n};\n\nSheet.MAX_ROWS = 1048576;\n\n/**\n * Creates the column specific information within the worksheet.\n * Column specific information is i.E. the width or the use of the\n * bestFit functionality.\n *\n * @private\n */\nSheet.prototype._createCols = function() {\n\tvar col, i, minWidth, width,\n\t\tautoFitButtonOffset = 2.4;\n\n\t/**\n\t * Inner function for calculating the column width. The function\n\t * will ceil the width to the next step of 0.25 so that the\n\t * result mod step is 0.\n\t * @param {number} nWidth - The width that needs to be adjusted\n\t * @returns {number}  A width rounded to the accuracy of 0.25\n\t */\n\tfunction roundWidth(nWidth) {\n\t\tvar factor, step;\n\n\t\tstep = 0.25;\n\t\tfactor = 1 / step;\n\n\t\treturn Math.ceil(nWidth * factor) / factor;\n\t}\n\n\tfor (i = 0; i < this._columns.size(); i++) {\n\t\tcol = this._columns.columns[i];\n\t\tminWidth = this._calculateColumnWidth(col.label.length) + autoFitButtonOffset;\n\t\twidth = roundWidth(Math.max(this._calculateColumnWidth(col.width), minWidth));\n\n\t\tthis.columns.addChild({\n\t\t\ttag: 'col',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'min',\n\t\t\t\t\tvalue: (i + 1)\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'max',\n\t\t\t\t\tvalue: (i + 1)\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'bestFit',\n\t\t\t\t\tvalue: '1'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'width',\n\t\t\t\t\tvalue: Math.max(width, minWidth)\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'customWidth',\n\t\t\t\t\tvalue: '1'\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\t}\n};\n\n/**\n * This method calculates the optimal column width for the given\n * amount of characters. It removes the dependency on font size or\n * pixel width.\n *\n * @param {number} nCharacters - Amount of characters that should fit into the column\n * @return {number} Excel internal width value corresponding to the used font size\n * @private\n */\nSheet.prototype._calculateColumnWidth = function(nCharacters) {\n\tvar defaultFontSize = 11, // Needs to be adjusted once we support different font sizes\n\t\tdefaultPaddingAndBorder = 5,\n\t\tscaleFactor = 7.33;\n\n\tif (typeof nCharacters !== 'number') {\n\t\treturn 0;\n\t}\n\n\treturn (((nCharacters * 2 / 3) * defaultFontSize) + defaultPaddingAndBorder) / scaleFactor;\n};\n\n/**\n * Sets the maximal hierarchy depth of this Sheet. The value will\n * only be changed if the given depth is higher than the previous\n * depth.\n *\n * @param {number} nHierarchyDepth - Numerical hierarchy depth\n * @private\n */\nSheet.prototype._setHierarchyDepth = function(nHierarchyDepth) {\n\n\t/* The maximum supported hierarchy depth is 7 */\n\tif (typeof nHierarchyDepth !== 'number' || nHierarchyDepth < 1 || nHierarchyDepth > 7) {\n\t\treturn;\n\t}\n\n\tif (!this.format.hierarchyDepth) {\n\t\tthis.format.addAttribute({\n\t\t\tid: 'hierarchyDepth',\n\t\t\tname: 'outlineLevelRow',\n\t\t\tvalue: nHierarchyDepth || 0\n\t\t});\n\t}\n\n\tthis.format.hierarchyDepth.value = Math.max(this.format.hierarchyDepth.value, nHierarchyDepth);\n};\n\n/**\n * Requests the header Row from the ColumnConfiguration and adds it to the\n * sheet.\n *\n * @private\n */\nSheet.prototype._createHeader = function() {\n\tvar headerRow = this._columns.getHeader();\n\n\tif (headerRow === null) {\n\t\tthis.remove('filter');\n\t\tthis.views.defaultView.remove('pane');\n\n\t\treturn;\n\t}\n\n\tthis._appendRow(headerRow);\n};\n\n/**\n * Adds the specified Row to the sheetData element of this Sheet and\n * automatically propagates its row index to the row and its cells.\n *\n * @param {Object} oRow - The Row object that should be appended to the current Sheet\n * @private\n */\nSheet.prototype._appendRow = function(oRow) {\n\tvar i, dimension;\n\n\toRow.setReference('' + (this.data.childs.length + 1));\n\n\tthis.data.childs.push(oRow.serialize());\n\n\t/* Update sheet dimension */\n\tfor (i = 0; i < this.childs.length; i++) {\n\t\tif (this.childs[i].tag == 'dimension') {\n\t\t\tdimension = 'A1:' + Row.getColumnReferenceByIndex(this._columns.size() - 1) + this.data.childs.length;\n\n\t\t\tthis.dimension.reference.value = dimension;\n\n\t\t\tif (this.filter) {\n\t\t\t\tthis.filter.reference.value = dimension;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Creates a new group inside the sheet with the given hierarchy\n * level. All subsequent data rows will be assigned to this group.\n *\n * @function createGroup\n * @param {string} sName - Name of the group that will be displayed in the group header\n * @param {number} nLevel - Hierarchy level that will be used for outlining\n */\nSheet.prototype.createGroup = function(sName, nLevel) {\n\tvar groupHeaderRow;\n\n\tthis._hierarchyLevel = nLevel;\n\tgroupHeaderRow = this._columns.getGroupHeader(sName);\n\n\tthis._appendRow(groupHeaderRow);\n};\n\n/**\n * Requests a row from the ColumnConfiguration containing the given data\n * and adds it to the sheetData element of this Sheet.\n *\n * The maximum row limit is 1,048,576 but the user rather runs out of\n * memory than reaching this limit.\n *\n * @function insert\n * @param {Object} oData - Data object to be inserted\n */\nSheet.prototype.insert = function(oData) {\n\tvar nHierarchyLevel;\n\n\tif (this.data.childs.length == Sheet.MAX_ROWS) {\n\t\tthrow new Error('Row limit reached.');\n\t}\n\n\tnHierarchyLevel =\n\t\tthis._columns.hierarchyLevelProperty ? oData[this._columns.hierarchyLevelProperty] : this._hierarchyLevel;\n\n\t/* Create row and apply binding */\n\tthis._appendRow(this._columns.bind(oData, nHierarchyLevel));\n\tthis._setHierarchyDepth(nHierarchyLevel);\n};\n\nmodule.exports = Sheet;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/data/Sheet.js\n// module id = 7\n// module chunks = 0","/**\n * Created by Sebastian Bender on 16.03.2017.\n */\nvar XMLNode = require('../xml/XMLNode');\nvar Cell\t= require('./Cell');\n\n/**\n * The Row is representing a single row according to the Office Open\n * XML standard. A Row provides information about its index (line\n * number) and can contain several Cell objects.\n *\n * @class\n */\nfunction Row() {\n\tXMLNode.call(this, Row.metadata);\n}\n\nRow.prototype = Object.create(XMLNode.prototype);\nRow.prototype.constructor = Row;\n\nRow.metadata = {\n\ttag: 'row',\n\tattributes: [\n\t\t{\n\t\t\tid: 'reference',\n\t\t\tname: 'r',\n\t\t\tvalue: ''\n\t\t},\n\t\t{\n\t\t\tid: 'spans',\n\t\t\tname: 'spans',\n\t\t\tvalue: '1:1'\n\t\t}\n\t]\n};\n\n/**\n * Calculates the Office Open XML Spreadsheet column reference for a\n * numeric value. Referring to the standard, the column is described\n * as a alphabetical value consisting of at least one uppercase character.\n * This function maps these alphabetical representation to numerical\n * zero-based indices.\n *\n * i.E. the column index 27 (which is the 28th column) results in 'AB'\n *\n * @param {number} nIndex - Numerical index for the requested column\n * @returns {string} - The alphabetical column reference for the given index.\n */\nRow.getColumnReferenceByIndex = function(nIndex) {\n\treturn nIndex < 26 ?\n\t\tString.fromCharCode(65 + nIndex) :\n\t\tRow.getColumnReferenceByIndex(Math.floor(nIndex / 26) - 1) + String.fromCharCode(65 + (nIndex % 26));\n};\n\n\n/**\n * Update the 'spans' attribute on this particular {@link Row} for\n * optimization purposes. This property optimizes the loading and\n * rendering in Microsoft Excel.\n *\n * @private\n */\nRow.prototype._updateSpans = function() {\n\tthis.spans.value = '1:' + this.childs.length;\n};\n\n/**\n * Adds the specified {@link Cell} to the current {@link Row}. If the\n * current row already has a reference or style, it will propagate\n * this information to the newly added Cell.\n *\n * @param {object} oCell - Instance of Excel.objects.Cell\n */\nRow.prototype.addCell = function(oCell) {\n\tvar count;\n\n\tif (!oCell || !(oCell instanceof Cell)) {\n\t\treturn;\n\t}\n\n\tcount = this.childs.push(oCell);\n\tthis._updateSpans();\n\n\t/* Applies the cell reference if row reference is already present */\n\tif (this.reference.value) {\n\t\toCell.setReference(Row.getColumnReferenceByIndex(count - 1) + this.reference.value);\n\t}\n\n\tif (this.style) {\n\t\toCell.setStyle(this.style.value);\n\t}\n};\n\n\n/**\n * Updates the reference of the current {@link Row}. The Row reference\n * represents the line number within the Sheet. It will\n * automatically update all assigned Cell references.\n *\n * @param {string} sReference - Row number within the sheet\n */\nRow.prototype.setReference = function(sReference) {\n\tvar i, reference;\n\n\treference = typeof sReference == 'number' ? String(sReference) : sReference;\n\tif (!reference || !reference.match(/^[1-9]+[0-9]*$/g)) {\n\t\treturn;\n\t}\n\n\t/* Only update if necessary */\n\tif (this.reference.value != reference) {\n\t\tthis.reference.value = reference;\n\t\tfor (i = 0; i < this.childs.length; i++) {\n\t\t\tthis.childs[i].setReference(Row.getColumnReferenceByIndex(i) + reference);\n\t\t}\n\t}\n};\n\n/**\n * Applies the given {@link Style} to the current {@link Row}.\n *\n * @param {(number|string)} nStyle - A number or string representing the Style id\n */\nRow.prototype.setStyle = function(nStyle) {\n\tvar i, style;\n\n\tif (!this.style) {\n\t\tstyle = this.addAttribute({name: 's'});\n\t\tObject.defineProperty(this, 'style', {value: style});\n\t}\n\n\tthis.style.value = nStyle;\n\tfor (i = 0; i < this.childs.length; i++) {\n\t\tthis.childs[i].setStyle(nStyle);\n\t}\n};\n\nmodule.exports = Row;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/data/Row.js\n// module id = 8\n// module chunks = 0","var Type = require('./Type');\r\n\r\n/**\r\n * The CalendarDate class represents a date/datetime/time data type.\r\n * It handles the formatting and accepts several options like\r\n * calendar, a custom format string and a subtype.\r\n *\r\n * @param {Object} [oConfig] - A configuration object that is used to specify the formatting\r\n * @param {string} [oConfig.type] - The specific type for this CalendarDate (i.E. date, datetime, time)\r\n * @param {string} [oConfig.format] - A custom format string that will be used as template\r\n * @param {string} [oConfig.calendar] - Specifies the calendar that will be used (default: gregorian)\r\n * @param {string} [oConfig.inputFormat] - Specifies the format of the string formatted date value (uppercase YYYYMMDD)\r\n * @constructor\r\n */\r\nfunction CalendarDate(oConfig) {\r\n\tType.call(this);\r\n\r\n\tthis.type = oConfig ? oConfig.type : null;\r\n\tthis.format = oConfig ? oConfig.format : null;\r\n\tthis.calendar = oConfig ? oConfig.calendar : null;\r\n\tthis.inputFormat = oConfig && typeof oConfig.inputFormat == 'string' ? oConfig.inputFormat.toUpperCase() : null;\r\n}\r\n\r\nCalendarDate.prototype = Object.create(Type.prototype);\r\nCalendarDate.prototype.constructor = CalendarDate;\r\n\r\nCalendarDate.DEFAULT = {\r\n\tnumberFormat: 14\r\n};\r\n\r\nCalendarDate.builtin = {\r\n\t14: 'mm-dd-yy',\r\n\t15: 'd-mmm-yy',\r\n\t16: 'd-mmm',\r\n\t17: 'mmm-yy',\r\n\t18: 'h:mm AM/PM',\r\n\t19: 'h:mm:ss AM/PM',\r\n\t20: 'h:mm',\r\n\t21: 'h:mm:ss',\r\n\t22: 'm/d/yy h:mm',\r\n\t45: 'mm:ss',\r\n\t46: '[h]:mm:ss',\r\n\t47: 'mmss.0'\r\n};\r\n\r\nCalendarDate.oSymbols = {\r\n\t'Y': {\r\n\t\tapply: function(sValue, oDate) {\r\n\t\t\toDate.setUTCFullYear(sValue);\r\n\t\t}\r\n\t},\r\n\t'M': {\r\n\t\tapply: function(sValue, oDate) {\r\n\t\t\toDate.setUTCMonth(sValue - 1);\r\n\t\t}\r\n\t},\r\n\t'D': {\r\n\t\tapply: function(sValue, oDate) {\r\n\t\t\toDate.setUTCDate(sValue);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * Creates the Style configuration object for this CalendarDate\r\n * according to its configuration.\r\n *\r\n * @returns {Object} - Style descriptor object\r\n * @private\r\n */\r\nCalendarDate.prototype._createConfiguration = function() {\r\n\tvar key, result, template;\r\n\r\n\tif (!this.type && !this.format && !this.calendar) {\r\n\t\treturn CalendarDate.DEFAULT;\r\n\t}\r\n\r\n\t/* Evaluate type */\r\n\tswitch (this.type) {\r\n\t\tcase 'datetime':\r\n\t\t\ttemplate = CalendarDate.builtin[22];\r\n\t\t\tbreak;\r\n\t\tcase 'time':\r\n\t\t\ttemplate = CalendarDate.builtin[21];\r\n\t\t\tbreak;\r\n\t\tdefault: // Assume 'date' as default\r\n\t\t\ttemplate = CalendarDate.builtin[14];\r\n\t}\r\n\r\n\tif (typeof this.format === 'string') {\r\n\t\ttemplate = this.format.match(/^[dhmsy\\s-,.:/]+(AM\\/PM)?$/) ? this.format : template;\r\n\t}\r\n\r\n\t/* Evaluate calendar */\r\n\tswitch (this.calendar) {\r\n\t\tcase 'islamic':\r\n\t\t\ttemplate = 'b2d mmmm yyyy';\r\n\t\t\tbreak;\r\n\t\tcase 'japanese':\r\n\t\t\ttemplate = '[$-ja-JP]ge.m.d';\r\n\t\t\tbreak;\r\n\t\tdefault: // Gregorian calendar is the default case\r\n\t}\r\n\r\n\tresult = {\r\n\t\tnumberFormat: {\r\n\t\t\tformat: template\r\n\t\t}\r\n\t};\r\n\r\n\t/* Find possible builtin match */\r\n\tfor (key in CalendarDate.builtin) {\r\n\t\tif (CalendarDate.builtin[key] === template) {\r\n\t\t\tresult.numberFormat = parseInt(key, 10);\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n};\r\n\r\n/**\r\n * Returns the value of the given property that is assigned in the line item.\r\n *\r\n * @param {string} sProperty -\r\n * @param {Object} oData - Line item that contains data\r\n * @returns {number|null} - XLSX specific date/time format in days since 30.12.1899\r\n */\r\nCalendarDate.prototype.getValue = function(sProperty, oData) {\r\n\tvar value = oData[sProperty];\r\n\r\n\tif (value === null || typeof value === 'undefined') {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/* Date or String, Number wrapper */\r\n\tif (typeof value === 'object') {\r\n\t\tvalue = value.valueOf();\r\n\t}\r\n\r\n\t/* 1. Unix timestamp as number */\r\n\tif (typeof value === 'number') {\r\n\t\treturn CalendarDate._JsDateToExcel(value);\r\n\t}\r\n\r\n\t/* 2. Pattern formatted date string */\r\n\tif (this.inputFormat && typeof this.inputFormat === 'string') {\r\n\r\n\t\treturn CalendarDate._JsDateToExcel(CalendarDate._parseStringDate(value, this.inputFormat));\r\n\t}\r\n\r\n\t/* 3. OData duration string 'PT01H23M45S' */\r\n\tif (this.type === 'time' && CalendarDate.odataDurationRegex.test(value)) {\r\n\r\n\t\treturn CalendarDate._JsDateToExcel(CalendarDate._parseODataDuration(value));\r\n\t}\r\n\r\n\t/* 4. OData date string '/Date(1234567890)/' */\r\n\tif (CalendarDate.odataDateRegex.test(value)) {\r\n\r\n\t\treturn CalendarDate._JsDateToExcel(CalendarDate._parseOdataDate(value));\r\n\t}\r\n\r\n\t/* 5. Unix timestamp as string */\r\n\tif (isFinite(value)) {\r\n\t\treturn CalendarDate._JsDateToExcel(parseInt(value, 10));\r\n\t}\r\n\r\n\treturn null;\r\n};\r\n\r\n/** START Copied and adapted from datajs **/\r\n/**\r\n * Extracts the milliseconds if the value is a date/time instance or formatted string.\r\n *\r\n * @param {any} vValue the value (may be <code>undefined</code> or <code>null</code>)\r\n * @returns {any} the number of milliseconds or the value itself\r\n */\r\nCalendarDate._parseODataDuration = function(vValue) {\r\n\tvar parts, days, hours, minutes, seconds, ms;\r\n\t// / <summary>Parses a string in xsd:duration format.</summary>\r\n\t// / <param name=\"duration\" type=\"String\">Duration value.</param>\r\n\t// / <remarks>\r\n\t// / This method will return the input, if the input string has a year or a month component.\r\n\t// / </remarks>\r\n\t// / <returns type=\"Object\">Object representing the time</returns>\r\n\r\n\tparts = CalendarDate.odataDurationRegex.exec(vValue);\r\n\r\n\t// Unsupported duration value for Edm.Time OData spec (if year of month is present)\r\n\tif (parts[2] || parts[3]) {\r\n\t\treturn vValue;\r\n\t}\r\n\r\n\tdays = parseInt(parts[4] || 0, 10);\r\n\thours = parseInt(parts[5] || 0, 10);\r\n\tminutes = parseInt(parts[6] || 0, 10);\r\n\tseconds = parseFloat(parts[7] || 0);\r\n\r\n\tms = parts[8];\r\n\tif (ms) {\r\n\t\t// Parse ms duration value ignoring any precision/scale as that part is anyway ignored by JS Date conversion!\r\n\t\tms = parseFloat('0.' + ms) * 1000;\r\n\t} else {\r\n\t\tms = 0;\r\n\t}\r\n\r\n\tms += (seconds * 1000) + (minutes * 60000) + (hours * 3600000) + (days * 86400000);\r\n\r\n\tif (parts[1] === '-') {\r\n\t\tms = -ms;\r\n\t}\r\n\r\n\treturn ms;\r\n};\r\n\r\n/**\r\n * Parses an OData date string and returns the corresponding timestamp\r\n *\r\n * @param {string} sValue - OData date string i.E. \"/Date(1524141637807)/\"\r\n * @returns {number} - Unix timestamp according to OData date including offset\r\n * @private\r\n */\r\nCalendarDate._parseOdataDate = function(sValue) {\r\n\tvar matchArray, date, offset;\r\n\r\n\t/* The RegExp matches up to 4 groups:\r\n\t\t * 0: Full match\r\n\t\t * 1: Timestamp (mandatory)\r\n\t\t * 2: Timezone offset sign [ + | - ] (optional)\r\n\t\t * 3: Timezone offset minutes [0-9]{2,3} (optional)\r\n\t\t */\r\n\tmatchArray = CalendarDate.odataDateRegex.exec(sValue);\r\n\tdate = new Date(parseInt(matchArray[1], 10));\r\n\r\n\tif (matchArray[2] && matchArray[3]) {\r\n\t\toffset = parseInt(matchArray[2] + matchArray[3], 10);\r\n\t\tdate.setUTCMinutes(date.getUTCMinutes() - offset);\r\n\t}\r\n\r\n\treturn date.getTime();\r\n};\r\n\r\n/* The regular expression corresponds to something like this:\r\n * /Date(123+60)/\r\n *\r\n * This first number is date ticks, the + may be a - and is optional,\r\n * with the second number indicating a timezone offset in minutes.\r\n *\r\n * On the wire, the leading and trailing forward slashes are\r\n * escaped without being required to so the chance of collisions is reduced;\r\n * however, by the time we see the objects, the characters already\r\n * look like regular forward slashes.\r\n*/\r\nCalendarDate.odataDateRegex = /^\\/Date\\((-?\\d+)(\\+|-)?(\\d+)?\\)\\/$/;\r\n\r\n// The captured indices for this expression are:\r\n// 0       - complete input\r\n// 1       - direction\r\n// 2,3,4   - years, months, days\r\n// 5,6,7,8 - hours, minutes, seconds, milliseconds\r\nCalendarDate.odataDurationRegex =\r\n\t/^([+-])?P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)(?:\\.(\\d+))?S)?)?/;\r\n\r\n/** END Copied and adapted from datajs */\r\n\r\nCalendarDate.dateStringRegex = /([Y]{4,}|[M]{2}|[D]{2})/g;\r\n\r\n/**\r\n * Converts a JavaScript Date object to an Office Open XML date\r\n * representation. Office Open XML date epoch starts at 00.01.1900\r\n * which is 31.12.1899 and is represented as a number of days since\r\n * beginning of the epoch.\r\n *\r\n * The Javascript Date epoch starts at 01.01.1970 and is represented\r\n * as a number of milliseconds before or after the beginning of the\r\n * epoch.\r\n *\r\n * The amount of days between 01.01.1900 and 01.01.1970 is exactly\r\n * 25567. According to the wrong offset in Excel (31.12.1899 instead\r\n * of 01.01.1900) and the known leap year bug in Excel, we need to\r\n * add two additional days.\r\n *\r\n * https://support.microsoft.com/en-us/help/214326/excel-incorrectly-assumes-that-the-year-1900-is-a-leap-year\r\n *\r\n *\r\n * @param {number} nTimestamp - JavaScript Date object or corresponding timestamp\r\n * @returns {number} - Amount of days since 01.01.1900\r\n * @private\r\n */\r\nCalendarDate._JsDateToExcel = function(nTimestamp) {\r\n\r\n\t/**\r\n\t * Fallback if date is before UTC 30.12.1899 00:00:00 which\r\n\t * corresponds to 0 in Excel\r\n\t */\r\n\treturn Math.max((nTimestamp / (86400 * 1000)) + (25567 + 2), 0);\r\n};\r\n\r\n/**\r\n * The method parses a given string value according to the provided\r\n * date pattern.\r\n *\r\n * Limitations:\r\n * Currently only the symbols d, m, y are supported which correspond\r\n * to day, month, year.\r\n *\r\n * @param {string} sValue - Date formatted string\r\n * @param {string} sPattern - ISO 8601 pattern that gets applied\r\n * @returns {number|null} - UNIX timestamp that represents the parsed date string\r\n * @private\r\n */\r\nCalendarDate._parseStringDate = function(sValue, sPattern) {\r\n\tvar matchArray, date, substring;\r\n\r\n\tdate = new Date(0);\r\n\r\n\tdo {\r\n\t\tmatchArray = CalendarDate.dateStringRegex.exec(sPattern);\r\n\r\n\t\tif (matchArray !== null) {\r\n\t\t\tsubstring = sValue.slice(matchArray.index, matchArray.index + matchArray[0].length);\r\n\r\n\t\t\tCalendarDate.oSymbols[matchArray[0].charAt(0)].apply(parseInt(substring, 10), date);\r\n\t\t}\r\n\t} while (matchArray !== null);\r\n\r\n\treturn date.getTime();\r\n};\r\n\r\nmodule.exports = CalendarDate;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/binding/type/CalendarDate.js\n// module id = 9\n// module chunks = 0","var Type = require('./Type');\n\n/**\n * The BooleanType class represents a boolean data type. BooleanType\n * data can work in two different ways. The first way is the Office\n * Open XML Spreadsheet built-in type that always shows TRUE/FALSE in\n * the users locale. This value can easily be used within formulas.\n *\n * @param {Object} [oConfig] - Configuration object for this numeric representation\n * @param {string} [oConfig.trueValue] - Contains the value that gets displayed if the Boolean is true\n * @param {string} [oConfig.falseValue] - Contains the value that gets displayed if the Boolean is false\n * @constructor\n */\nfunction BooleanType(oConfig) {\n\tType.call(this);\n\n\tthis.trueValue = oConfig ? oConfig.trueValue : null;\n\tthis.falseValue = oConfig ? oConfig.falseValue : null;\n}\n\nBooleanType.prototype = Object.create(Type.prototype);\nBooleanType.prototype.constructor = BooleanType;\n\nBooleanType.DEFAULT = {\n\tnumberFormat: 0\n};\n\n/**\n * This method indicates if the properties trueValue and falseValue\n * are configured correctly and the BooleanType supports a custom\n * format.\n *\n * @returns {boolean} - Whether to use a custom formatted BooleanType or the built-in type.\n */\nBooleanType.prototype.isCustomFormatted = function() {\n\treturn !!this.trueValue\n\t\t&& typeof this.trueValue === 'string'\n\t\t&& !!this.falseValue\n\t\t&& typeof this.falseValue === 'string';\n};\n\n/**\n * Creates the format according to the provided configuration. If the\n * format matches any builtin format, it will return a reference to\n * its ID instead of the format.\n *\n * Both cases can serve the Style class that consumes this information.\n *\n * @returns {Object} - Configuration object for NumberFormat initialization\n * @private\n */\nBooleanType.prototype._createConfiguration = function() {\n\tvar result = BooleanType.DEFAULT;\n\n\tif (this.isCustomFormatted()) {\n\t\tresult = {\n\t\t\tnumberFormat: {\n\t\t\t\tformat: '\"' + this.trueValue + '\";;\"' + this.falseValue + '\"'\n\t\t\t}\n\t\t};\n\t}\n\n\treturn result;\n};\n\nmodule.exports = BooleanType;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/binding/type/BooleanType.js\n// module id = 10\n// module chunks = 0","var Numeric = require('./Numeric');\n\n/**\n * The Currency class represents a currency data type. It handles the\n * formatting and accepts several options like second property for\n * the unit of measurement or if the unit of measurement should be\n * displayed.\n *\n * It styles currencies with its particular amount of decimals.\n *\n * @param {Object} oConfig - A configuration object that is used to specify the formatting\n * @param {string} oConfig.unitProperty - A custom format string that will be used as template\n * @param {boolean} [oConfig.displayUnit] - Indicating whether the unit of measurement will be shown (default: true)\n * @param {number} [oConfig.scale] - A fixed scale that will be applied to all cells within this column,\n * regardless of its particular unit of measurement\n * @constructor\n */\nfunction Currency(oConfig) {\n\tNumeric.call(this, oConfig);\n\n\tthis.displayUnit = typeof oConfig.displayUnit === 'boolean' ? oConfig.displayUnit : true;\n}\n\nCurrency.prototype = Object.create(Numeric.prototype);\nCurrency.prototype.constructor = Currency;\n\n/**\n * Defines the display default scale that is used for alignment. This\n * has no effect on the technical scale of currency values. It is\n * only used for alignment purposes so that different currencies with\n * different scale are still aligned correctly.\n *\n * @type {number}\n */\nCurrency.DEFAULT_SCALE = 3;\n\nCurrency.DIGITS = {\n\t'ADP': 0,\n\t'AFN': 0,\n\t'ALL': 0,\n\t'AMD': 0,\n\t'BHD': 3,\n\t'BIF': 0,\n\t'BYR': 0,\n\t'CAD': 2,\n\t'CHF': 2,\n\t'CLF': 4,\n\t'CLP': 0,\n\t'COP': 0,\n\t'CRC': 0,\n\t'CZK': 0,\n\t'DEFAULT': 2,\n\t'DJF': 0,\n\t'ESP': 0,\n\t'GNF': 0,\n\t'GYD': 0,\n\t'HUF': 0,\n\t'IDR': 0,\n\t'IQD': 0,\n\t'IRR': 0,\n\t'ISK': 0,\n\t'ITL': 0,\n\t'JOD': 3,\n\t'JPY': 0,\n\t'KMF': 0,\n\t'KPW': 0,\n\t'KRW': 0,\n\t'KWD': 3,\n\t'LAK': 0,\n\t'LBP': 0,\n\t'LUF': 0,\n\t'LYD': 3,\n\t'MGA': 0,\n\t'MGF': 0,\n\t'MMK': 0,\n\t'MNT': 0,\n\t'MRO': 0,\n\t'MUR': 0,\n\t'OMR': 3,\n\t'PKR': 0,\n\t'PYG': 0,\n\t'RSD': 0,\n\t'RWF': 0,\n\t'SLL': 0,\n\t'SOS': 0,\n\t'STD': 0,\n\t'SYP': 0,\n\t'TMM': 0,\n\t'TND': 3,\n\t'TRL': 0,\n\t'TWD': 0,\n\t'TZS': 0,\n\t'UGX': 0,\n\t'UYI': 0,\n\t'UZS': 0,\n\t'VND': 0,\n\t'VUV': 0,\n\t'XAF': 0,\n\t'XOF': 0,\n\t'XPF': 0,\n\t'YER': 0,\n\t'ZMK': 0,\n\t'ZWD': 0\n};\n\n/**\n * Creates the Style configuration needed for registering the Type\n * specific styling in the Styles class.\n *\n * @param {Object} oData - Business object that gets bound to the styling template\n * @returns {Object} - Styling configuration object\n * @private\n */\nCurrency.prototype._createConfiguration = function(oData) {\n\tvar i, j, scale, template, unit;\n\n\ttemplate = '#,##0';\n\n\t// Apply fixed scale, only if no unitProperty is provided\n\tif (!this.unitProperty && typeof this.scale === 'number') {\n\t\tscale = this.scale;\n\t} else {\n\t\tscale = Currency.DIGITS[oData[this.unitProperty]];\n\t}\n\n\t/* If the currency uses the default scale */\n\tif (typeof scale !== 'number') {\n\t\tscale = Currency.DIGITS.DEFAULT;\n\t}\n\n\t/* Apply separator or placeholder */\n\ttemplate += (scale > 0) ? '.' : '_.';\n\n\tfor (i = 0; i < scale; i++) {\n\t\ttemplate += '0';\n\t}\n\n\tfor (j = Currency.DEFAULT_SCALE - scale; j > 0; j--) {\n\t\ttemplate += '_0';\n\t}\n\n\t/* Add unit of measurement if required */\n\tif (this.displayUnit) {\n\t\tunit = oData[this.unitProperty] ? '\"' + oData[this.unitProperty] + '\"' : '_E_U_R';\n\n\t\t// Applies unit of measurement or a placeholder if unit is empty\n\t\ttemplate = template + ' ' + unit;\n\t}\n\n\t// Add formatting for negative values as well\n\ttemplate = '* ' + template + ';* - ' + template;\n\n\treturn { numberFormat: { format: template } };\n};\n\nmodule.exports = Currency;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/binding/type/Currency.js\n// module id = 11\n// module chunks = 0","var XMLFile\t\t = require('../xml/XMLFile'),\n\tSharedString\t= require('./SharedString');\n\n/**\n * The SharedStrings class represents the list of shared String\n * objects that is used in the Office Open XMl Spreadsheet. The\n * SharedStrings object reduces redundancy within the data by\n * providing a reference to unique Strings instead of repeating\n * them.\n *\n * Due to the fact that the Strings are shared within the whole\n * workbook, each instance of the document export only has one\n * single instance of SharedString and therefore it uses the\n * Singleton pattern to ensure this.\n *\n * @class\n */\nfunction SharedStrings() {\n\tif (SharedStrings.instance instanceof SharedStrings) {\n\t\treturn SharedStrings.instance;\n\t}\n\n\tXMLFile.call(this, SharedStrings.metadata);\n\n\tObject.defineProperty(this, 'map', {value: new Map(), writable: false});\n\tObject.defineProperty(this, '_shared', {value: new SharedString(''), writable: false});\n\n\tSharedStrings.instance = this;\n}\n\nSharedStrings.prototype = Object.create(XMLFile.prototype);\nSharedStrings.prototype.constructor = SharedStrings;\n\n/**\n * Retrieves the Singleton instance of SharedStrings. If no instance is present, it will create one.\n *\n * @function\n * @returns {object} - Singleton instance\n */\nSharedStrings.getInstance = function() {\n\tif (!SharedStrings.instance) {\n\t\tSharedStrings.instance = new SharedStrings();\n\t}\n\n\treturn SharedStrings.instance;\n};\n\nSharedStrings.metadata = {\n\tfilename: 'sharedStrings.xml',\n\ttag: 'sst',\n\troot: true,\n\tattributes: [\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\n\t\t}\n\n\t\t/*\n\t\t,{\n\t\t\tname: 'count', // Optional as long as uniqueCount is not set\n\t\t\tvalue: '0'\n\t\t},\n\t\t{\n\t\t\tname : 'uniqueCount', // Optional as long as count is not set\n\t\t\tvalue: '0'\n\t\t}\n\t\t*/\n\t]\n};\n\n/**\n * Adds the specified string value to the set of SharedStrings. The\n * method creates a SharedString proxy object that contains\n * information about the string itself as well as its index. The\n * index is zero-based and can be used for referencing within Cell\n * objects.\n *\n * @function insert\n * @param {string} sValue - The string that has to be inserted\n * @return {object} - The SharedString instance that represents the provided string value\n */\nSharedStrings.prototype.insert = function(sValue) {\n\tvar index;\n\n\tif (this.map.has(sValue)) {\n\t\treturn this.map.get(sValue);\n\t}\n\n\tthis._shared.setValue(sValue);\n\tindex = this.map.size;\n\tthis.map.set(sValue, index);\n\n\t/* The SharedString needs to be added to the child nodes as well for serialization purposes */\n\tthis.childs.push(this._shared.serialize());\n\n\treturn index;\n};\n\nmodule.exports = SharedStrings;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/data/SharedStrings.js\n// module id = 12\n// module chunks = 0","var Type = require('./Type');\nvar Alignment = require('../../style/Alignment');\n\n/**\n * The Text class represents textual information without any\n * particular formatting. It provides font and sizing details that\n * can be used by the Styles class.\n *\n * @param {Object} [oConfig] - Configuration object for this Text type\n * @param {Object} [oConfig.font] - Font configuration object\n * @param {number} [oConfig.font.size] - Font size\n * @param {string} [oConfig.font.name] - Font name i.E. Arial, Verdana, etc.\n * @param {Object} [oConfig.fill] - Cell fill configuration object\n * @param {Object} [oConfig.fill.color] - Cell fill background color\n * @param {Object} [oConfig.fill.type] - Cell fill type\n * @param {Object} [oConfig.template] - Text template for this Type\n * @param {Object} [oConfig.hierarchyLevel] - Property name that is used for hierarchy level indentation\n * @constructor\n */\nfunction Text(oConfig) {\n\tType.call(this);\n\n\tthis.font = oConfig ? oConfig.font : null;\n\tthis.fill = oConfig ? oConfig.fill : null;\n\tthis.template = oConfig ? oConfig.template : null;\n\tthis.hierarchyLevel = oConfig ? oConfig.hierarchyLevel : null;\n\n\tthis._styleIds = [];\n}\n\nText.prototype = Object.create(Type.prototype);\nText.prototype.constructor = Text;\n\nText.DEFAULT = {\n\tfont: {\n\t\tsize: 11,\n\t\tname: 'Arial'\n\t}\n};\n\n/**\n * This method creates the XLSX specific style configuration depending on the cell content\n *\n * @param {Object} oData - Line item that will be used to evaluate the cell content\n * @returns {Object} - Style configuration used by the Styles class\n * @private\n */\nText.prototype._createConfiguration = function(oData) {\n\tvar result = (this.font || this.fill) ? { font: this.font, fill: this.fill } : { font: Text.DEFAULT.font };\n\n\tif (this.hierarchyLevel) {\n\t\tresult.align = {\n\t\t\talign: Alignment.horizontal.LEFT,\n\t\t\tindent: 2 * oData[this.hierarchyLevel]\n\t\t};\n\t}\n\n\treturn result;\n};\n\n/**\n * Returns the assigned ID of the Type specific Style that is\n * registered in the Styles class.\n *\n * @param {Object} oData - Business Object that contains the property for hierarchy levels\n * @returns {number} - ID of the registered Style\n */\nText.prototype.getStyleId = function(oData) {\n\tvar styleId, level;\n\n\t/* Handle simple numeric without unitProperty */\n\tif (!this.hierarchyLevel) {\n\t\treturn Object.getPrototypeOf(Text.prototype).getStyleId.call(this);\n\t}\n\n\tif (!oData) {\n\t\treturn 0;\n\t}\n\n\tlevel = oData[this.hierarchyLevel];\n\tstyleId = this._styleIds[level];\n\n\tif (typeof styleId === 'undefined') {\n\t\tthis._styleIds[level] = this.styles.addStyle(this._createConfiguration(oData));\n\t}\n\n\treturn this._styleIds[level];\n};\n\n/**\n * Returns the data value of the business object that is bound by\n * this type. If a template is configured, it will automatically fill\n * the template with the values from the business object and returns\n * the processed string.\n *\n * @param {string|Array} properties - Name of the property or array of properties that shall be accessed.\n * @param {Object} oData - Business object that contains the data.\n *\n * @returns {string|number|boolean} - The value of the given property after type specific processing.\n */\nText.prototype.getValue = function(properties, oData) {\n\tvar match, regex, result, skip, value;\n\n\tif (!this.template) {\n\t\treturn typeof properties === 'string' ? oData[properties] : oData[properties[0]];\n\t}\n\n\t// Obtain if the further processing should be skipped due to missing values for the template\n\tskip = properties.every(function(property) {\n\t\treturn oData[property] === null\n\t\t\t|| typeof oData[property] === 'undefined'\n\t\t\t|| (typeof oData[property] === 'string' && oData[property] === '');\n\t});\n\n\tif (skip) {\n\t\treturn '';\n\t}\n\n\tresult = this.template;\n\tregex = /{([0-9]+)}/g;\n\n\tmatch = regex.exec(this.template);\n\twhile (match !== null) {\n\n\t\tvalue = oData[properties[match[1]]];\n\n\t\t// Overwrite empty or undefined values by an empty string\n\t\tif (value === null || typeof value === 'undefined') {\n\t\t\tvalue = '';\n\t\t}\n\n\t\t// Replaces the matched placeholder by the indexed property value\n\t\tresult = result.replace(match[0], value);\n\n\t\tmatch = regex.exec(this.template);\n\t}\n\n\treturn result;\n};\n\nmodule.exports = Text;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/binding/type/Text.js\n// module id = 13\n// module chunks = 0","var XMLNode = require('../xml/XMLNode');\n\n/**\n * The Alignment class defines the alignment of content within the\n * sheet cells. The Alignment is assigned to a particular Style that\n * is registered in the Styles class.\n *\n * @constructor\n */\nfunction Alignment() {\n\tXMLNode.call(this, Alignment.metadata);\n}\n\nAlignment.prototype = Object.create(XMLNode.prototype);\nAlignment.prototype.constructor = Alignment;\n\nAlignment.metadata = {\n\ttag: 'alignment'\n};\n\nAlignment.horizontal = {\n\tLEFT: 'left',\n\tCENTER: 'center',\n\tRIGHT: 'right',\n\tcontains: function(sAlign) {\n\n\t\treturn _contains(sAlign, Alignment.horizontal);\n\t}\n};\n\nAlignment.vertical = {\n\tTOP: 'top',\n\tMIDDLE: 'middle',\n\tBOTTOM: 'bottom',\n\tcontains: function(sAlign) {\n\n\t\treturn _contains(sAlign, Alignment.vertical);\n\t}\n};\n\n/**\n * Checks whether the requested alignment is contained or not. An\n * alignment that is contained can be assigned within styles. Other\n * alignments that are not contained are not supported and thus not\n * assignable. It differentiates between horizontal and vertical\n * alignments, depending on the aggregation that was provided.\n *\n * @param {string} sAlign - The alignment that should be checked\n * @param {Array} oAggregation - The aggregation the alignment might be in\n * @returns {boolean} - Returns true if the alignment is supported\n * @private\n */\nfunction _contains(sAlign, oAggregation) {\n\tvar key, contained = false;\n\n\tfor (key in oAggregation) {\n\t\tcontained = contained ? contained : oAggregation[key] === sAlign && typeof oAggregation[key] !== 'function';\n\t}\n\n\treturn contained;\n}\n\nAlignment.prototype.isDefault = function() {\n\treturn this.attributes.length == 0;\n};\n\n/**\n * Assigns the given indent to this Alignment object.\n *\n * @param {number} nIndent - Numerical value used as indentation\n */\nAlignment.prototype.setIndent = function(nIndent) {\n\n\t/* Remove indent */\n\tif (typeof nIndent != 'number' || nIndent <= 0) {\n\t\tthis.remove('indent');\n\t\tthis.remove('horizontal');\n\n\t\treturn;\n\t}\n\n\tthis._setAlignmentAttribute('indent', nIndent);\n\n\t/* A correct indent requires an explicit horizontal alignment */\n\tif (!this.horizontal) {\n\t\tthis.setHorizontalAlignment(Alignment.horizontal.LEFT);\n\t}\n};\n\n/**\n * Applies the given alignment as horizontal alignment.\n *\n * @param {string} sAlign - Horizontal alignment that gets applied\n */\nAlignment.prototype.setHorizontalAlignment = function(sAlign) {\n\n\t/* Ignore invalid values */\n\tif (!Alignment.horizontal.contains(sAlign)) {\n\t\treturn;\n\t}\n\n\tthis._setAlignmentAttribute('horizontal', sAlign);\n};\n\n/**\n * Applies the given alignment as vertical alignment.\n *\n * @param {string} sAlign - Vertical alignment that gets applied\n */\nAlignment.prototype.setVerticalAlignment = function(sAlign) {\n\n\t/* Ignore invalid values */\n\tif (!Alignment.vertical.contains(sAlign)) {\n\t\treturn;\n\t}\n\n\tthis._setAlignmentAttribute('vertical', sAlign);\n};\n\n/**\n * Assigns the given value as a named property on this Alignment object.\n *\n * @param {string} id - The named property id\n * @param {number|string} value - Textual or numerical value\n * @private\n */\nAlignment.prototype._setAlignmentAttribute = function(id, value) {\n\n\t/* Create attribute if not present */\n\tif (!this[id]) {\n\t\tthis.addAttribute({\n\t\t\tid: id,\n\t\t\tname: id\n\t\t});\n\t}\n\n\tthis[id].value = value;\n};\n\nAlignment.prototype.equals = function(oAlignment) {\n\treturn typeof oAlignment !== 'undefined' && oAlignment !== null\n\t\t&& this.vertical == oAlignment.vertical\n\t\t&& this.horizontal == oAlignment.horizontal\n\t\t&& this.indent == oAlignment.indent;\n};\n\nmodule.exports = Alignment;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/style/Alignment.js\n// module id = 14\n// module chunks = 0","var App\t\t\t\t\t= require('./objects/App'),\n\tContentTypes\t\t= require('./objects/ContentTypes'),\n\tCore\t\t\t\t= require('./objects/Core'),\n\tRelationships\t\t= require('./objects/Relationships'),\n\tSheet\t\t\t\t= require('./data/Sheet'),\n\tWorkbook\t\t\t= require('./objects/Workbook');\n\n/**\n * The XLSXBuilder class represents an Office Open XML Spreadsheet\n * (Microsoft Excel) that can be used to insert structured and\n * formatted data and pack a zipped *.xlsx document.\n *\n * XLSXBuilder requires JSZip 2.x or 3.x to be present.\n *\n * @param {(Object[]|string[])} aBinding - Binding configuration that is used for {@link Column} definition\n * @param {Object} [oContext] - Context object containing metadata for this particular XLSX\n * @param {string} [oContext.application] - Application that created this XLSX\n * @param {string} [oContext.version] - Application version that was used to create this XLSX\n * @param {string} [oContext.title] - Title of the XLSX document\n * @param {string} [oContext.modifiedBy] - User context for the exported document\n * @param {string} [oContext.sheetName] - The name of the data sheet that will be shown in Excel\n * @param {string} [oContext.metaSheetName] - The name of the metadata sheet that will be shown in Excel\n * @param {Object[]} [oContext.metainfo] - Optional Metadata that will be displayed in the additional Metadata Sheet\n * @param {string} [hierarchyLevel] - Name of the property that contains the hierarchy level of each lime item\n * @constructor\n */\nfunction XLSXBuilder(aBinding, oContext, hierarchyLevel) {\n\tvar aMetadataConfig, i, oMetainfoGroup, sSheetName, sMetadataSheetName;\n\n\tif (!(aBinding instanceof Array) || !aBinding.length) {\n\t\tthrow new Error('No binding provided');\n\t}\n\n\t/* Set default values */\n\tsSheetName = 'SAP Document Export';\n\tsMetadataSheetName = 'Metadata';\n\n\tthis.app = new this.objects.App(oContext);\n\tthis.core = new this.objects.Core(oContext);\n\tthis.workbook = new this.objects.Workbook();\n\n\t/* Overwrite default Sheet names if maintained */\n\tif (oContext) {\n\t\tsSheetName = oContext.sheetName ? oContext.sheetName : sSheetName;\n\t\tsMetadataSheetName = oContext.metaSheetName ? oContext.metaSheetName : sMetadataSheetName;\n\t}\n\n\tthis.sheet = this.workbook.addSheet(sSheetName, { columns: aBinding, hierarchyLevel: hierarchyLevel });\n\tthis.workbook.selectSheet(this.sheet);\n\n\tif (typeof oContext === 'object' && oContext.metainfo instanceof Array) {\n\n\t\t/* Define column configuration for metadata sheet */\n\t\taMetadataConfig = [\n\t\t\t{\n\t\t\t\tproperty: 'key',\n\t\t\t\tlabel: 'Key',\n\t\t\t\twidth: 20\n\t\t\t},\n\t\t\t{\n\t\t\t\tproperty: 'value',\n\t\t\t\tlabel: 'Value',\n\t\t\t\twidth: 20\n\t\t\t}\n\t\t];\n\n\t\t/* Add optional Metadata Sheet*/\n\t\tthis.metadata = this.workbook.addSheet(sMetadataSheetName, { columns: aMetadataConfig, hideHeader: true });\n\n\t\t/*\n\t\t * Add a copy of metadata to the Metadata Sheet. The method\n\t\t * #_insertIntoSheet uses Array#shift and would otherwise\n\t\t * manipulate the original metadata array.\n\t\t */\n\t\tfor (i = 0; i < oContext.metainfo.length; i++) {\n\t\t\toMetainfoGroup = oContext.metainfo[i];\n\n\t\t\tthis.metadata.createGroup(oMetainfoGroup.name, 1);\n\t\t\tthis._insertIntoSheet(oMetainfoGroup.items.slice(), this.metadata);\n\t\t}\n\t}\n}\n\nXLSXBuilder.prototype = {\n\n\tobjects: {\n\t\tApp: App,\n\t\tContentTypes: ContentTypes,\n\t\tCore: Core,\n\t\tRelationships: Relationships,\n\t\tSheet: Sheet,\n\t\tWorkbook: Workbook\n\t},\n\n\t/**\n\t * Triggers the packaging process for the Office Open XML\n\t * SpreadSheet. You need to call the method insert() first,\n\t * otherwise the generated Document will contain no data.\n\t *\n\t * The method returns a promise to allow the library to work\n\t * asynchronously.\n\t *\n\t * @function build\n\t * @returns {object} - Packed zip file as Blob or Nodebuffer, depending on the runtime environment\n\t */\n\tbuild: function() {\n\t\tvar files, zip, i, j, fileConfig, FileType, xmlObject, relation, zipConfig, promise;\n\n\t\tfiles = [\n\t\t\t{\n\t\t\t\tname: '[Content_Types].xml',\n\t\t\t\tpath: '',\n\t\t\t\ttype: this.objects.ContentTypes\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: '.rels',\n\t\t\t\tpath: '_rels/',\n\t\t\t\ttype: this.objects.Relationships,\n\t\t\t\trelationships: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: 'xl/workbook.xml',\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: 'docProps/app.xml',\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: 'docProps/core.xml',\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t];\n\t\tzip = new JSZip();\n\n\t\tfor (i = 0; i < files.length; i++) {\n\t\t\tfileConfig = files[i];\n\t\t\tFileType = fileConfig.type;\n\t\t\txmlObject = new FileType();\n\n\t\t\tif (xmlObject instanceof this.objects.Relationships) {\n\t\t\t\tfor (j = 0; j < fileConfig.relationships.length; j++) {\n\t\t\t\t\trelation = fileConfig.relationships[j];\n\t\t\t\t\txmlObject.addRelationship(relation.target, relation.type);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tzip.file(fileConfig.path + fileConfig.name, xmlObject.serialize());\n\t\t}\n\n\t\t// Add document metadata\n\t\tzip.file(this.app.getAbsolutePath(), this.app.serialize());\n\t\tzip.file(this.core.getAbsolutePath(), this.core.serialize());\n\n\t\t// Add workbook and its related files\n\t\tzip.file(this.workbook.getAbsolutePath(), this.workbook.serialize());\n\t\tzip.file(this.workbook.getRelationships().getAbsolutePath(), this.workbook.getRelationships().serialize());\n\n\t\tthis.workbook.getRelatedFiles().forEach(function(file, index, array) {\n\t\t\tzip.file(file.getAbsolutePath(), file.serialize());\n\t\t});\n\n\t\tzipConfig = {\n\t\t\tcompression: 'DEFLATE',\n\t\t\ttype: JSZip.support.nodebuffer ? 'nodebuffer' : 'arraybuffer'\n\t\t};\n\n\t\tif (zip.generateAsync) {\n\t\t\tpromise = zip.generateAsync(zipConfig);\n\t\t} else { // Zip.generate from JSZip 2.x\n\t\t\tpromise = new Promise(function(resolve, reject) {\n\t\t\t\tvar zipped = zip.generate(zipConfig);\n\n\t\t\t\tresolve(zipped);\n\t\t\t});\n\t\t}\n\n\t\treturn promise;\n\t},\n\n\t/**\n\t * Appends the specified set of data to the Open Document Spreadsheet.\n\t * All data will be bound according to the {@link ColumnConfiguration}.\n\t *\n\t * @function append\n\t * @param {(Object[]|Object)} aData - Array of data that gets appended to the Spreadsheet\n\t */\n\tappend: function(aData) {\n\t\tthis._insertIntoSheet(aData, this.sheet);\n\t},\n\n\t/**\n\t * Inserts the given data into the specified Sheet. The method will throw an Error if no Sheet is provided.\n\t *\n\t * @param {Array} aData - Array of business objects that should be inserted\n\t * @param {Sheet} oSheet - The Sheet where the data should be inserted into\n\t * @private\n\t */\n\t_insertIntoSheet: function(aData, oSheet) {\n\t\tvar array;\n\n\t\t/* We need to check if param is null or undefined because [null].length results in 1 */\n\t\tif (typeof aData === 'undefined' || aData === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tarray = aData instanceof Array ? aData : [aData];\n\n\t\twhile (array.length) {\n\t\t\toSheet.insert(array.shift());\n\t\t}\n\t}\n};\n\nmodule.exports = XLSXBuilder;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/XLSXBuilder.js\n// module id = 17\n// module chunks = 0","var XMLFile = require('../xml/XMLFile');\n\n/**\n * This class represents the app.xml within the generated Excel. The\n * App contains information about the application that created the\n * Office Open XML Spreadsheet.\n *\n * @param {Object} [oContext] - Context object containing metadata for this particular Excel\n * @param {string} [oContext.application] - Application that created this Excel\n * @param {string} [oContext.version] - Application version that was used to create this Excel\n * @constructor\n */\nfunction App(oContext) {\n\tXMLFile.call(this, App.metadata);\n\n\tif (oContext) {\n\n\t\tif (oContext.application) {\n\t\t\tthis.application.value = oContext.application;\n\t\t}\n\n\t\tif (oContext.version) {\n\t\t\tthis.version.value = oContext.version;\n\t\t}\n\t}\n}\n\nApp.prototype = Object.create(XMLFile.prototype);\nApp.prototype.constructor = App;\n\nApp.metadata = {\n\tpath: 'docProps/',\n\tfilename: 'app.xml',\n\ttag: 'Properties',\n\troot: true,\n\tattributes: [\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/extended-properties'\n\t\t},\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tsuffix: 'vt',\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes'\n\t\t}\n\t],\n\tproperties: [\n\t\t{\n\t\t\tid: 'application',\n\t\t\ttag: 'Application',\n\t\t\tvalue: 'SAP UI5' // Default value, can be overridden\n\t\t},\n\t\t{\n\t\t\ttag: 'DocSecurity',\n\t\t\tvalue: '0'\n\t\t},\n\t\t{\n\t\t\ttag: 'Company',\n\t\t\tvalue: 'SAP SE'\n\t\t},\n\t\t{\n\t\t\ttag: 'SharedDoc',\n\t\t\tvalue: 'false'\n\t\t},\n\t\t{\n\t\t\tid: 'version',\n\t\t\ttag: 'AppVersion',\n\t\t\tvalue: '1.54' // Default value, can be overridden\n\t\t}\n\t]\n};\n\nmodule.exports = App;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/objects/App.js\n// module id = 18\n// module chunks = 0","var XMLElement = require('./XMLElement');\n\n/**\n * The class XMLAttribute is a wrapper for representing XML-like attributes attributes.\n * It is mainly used for defining namespaces and namespace-related attributes.\n *\n * @param {object} oConfig - Object representation of the XMLNode containing at least the tag of the element.\n * @param {string} oConfig.name - String representation of the XML tag.\n * @param {string} [oConfig.prefix] - Prefix of the {@link XMLAttribute} that will be used for XML namespace purposes.\n * @param {string} [oConfig.suffix] - Suffix of the {@link XMLAttribute} that will be used for XML namespace purposes.\n * @param {string} [oConfig.value] - Textual value of the {@link XMLAttribute}.\n * @class\n * @module xml/XMLAttribute\n */\nfunction XMLAttribute(oConfig) {\n\tXMLElement.call(this, oConfig);\n\n\tthis.name = oConfig.name ? oConfig.name : '';\n\tthis.prefix = oConfig.prefix ? oConfig.prefix : '';\n\tthis.suffix = oConfig.suffix ? oConfig.suffix : '';\n}\n\nXMLAttribute.prototype = Object.create(XMLElement.prototype);\nXMLAttribute.prototype.constructor = XMLAttribute;\n\n/**\n * Performes a String serialization of the XMLAttribute. The representation is formatted as follows:\n * <prefix>:<name>:<suffix>=\"<value>\"\n *\n * i.E. ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"'\n * for { name: 'xmlns', suffix: 'xsi', value: 'http://www.w3.org/2001/XMLSchema-instance' }\n *\n * Note that the serialized String always comes with a leading whitespace to allow easy concatenation.\n *\n * @function serialize\n * @returns {string} - String representation of the XMLAttribute\n */\nXMLAttribute.prototype.serialize = function(){\n\treturn ' ' + (this.prefix ? this.prefix + ':' : '') + this.name\n\t\t+ (this.suffix ? ':' + this.suffix : '') + '=\"' + this.xmlEncode(this.value) + '\"';\n};\n\nmodule.exports = XMLAttribute;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/xml/XMLAttribute.js\n// module id = 19\n// module chunks = 0","var XMLFile = require('../xml/XMLFile');\n\n/**\n * This class represents the [Content_Types].xml within the generated Excel.\n *\n * @constructor\n */\nfunction ContentTypes() {\n\tXMLFile.call(this, ContentTypes.metadata);\n}\n\nContentTypes.prototype = Object.create(XMLFile.prototype);\nContentTypes.prototype.constructor = ContentTypes;\n\n\nContentTypes.FILENAME = '';\nContentTypes.metadata = {\n\tfilename: '[Content_Types].xml',\n\ttag: 'Types',\n\troot: true,\n\tattributes: [\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tvalue: 'http://schemas.openxmlformats.org/package/2006/content-types'\n\t\t}\n\t],\n\tproperties: [\n\t\t{\n\t\t\ttag: 'Default',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Extension',\n\t\t\t\t\tvalue: 'xml'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'ContentType',\n\t\t\t\t\tvalue: 'application/xml'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'Default',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Extension',\n\t\t\t\t\tvalue: 'rels'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'ContentType',\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-package.relationships+xml'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'Override',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'PartName',\n\t\t\t\t\tvalue: '/xl/workbook.xml'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'ContentType',\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'Override',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'PartName',\n\t\t\t\t\tvalue: '/xl/worksheets/sheet1.xml'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'ContentType',\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'Override',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'PartName',\n\t\t\t\t\tvalue: '/xl/styles.xml'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'ContentType',\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'Override',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'PartName',\n\t\t\t\t\tvalue: '/xl/sharedStrings.xml'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'ContentType',\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'Override',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'PartName',\n\t\t\t\t\tvalue: '/docProps/core.xml'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'ContentType',\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-package.core-properties+xml'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'Override',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'PartName',\n\t\t\t\t\tvalue: '/docProps/app.xml'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'ContentType',\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.extended-properties+xml'\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n};\n\nmodule.exports = ContentTypes;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/objects/ContentTypes.js\n// module id = 20\n// module chunks = 0","var XMLFile = require('../xml/XMLFile');\n\n/**\n * This class represents the core.xml within the generated Excel. The\n * Core contains basic information about the content and the owner of\n * the file.\n *\n * @param {Object} [oContext] - Context object containing metadata for this particular Excel\n * @param {string} [oContext.title] - Title of the Excel document\n * @param {string} [oContext.modifiedBy] - User context for the exported document\n * @constructor\n */\nfunction Core(oContext) {\n\tXMLFile.call(this, Core.metadata);\n\n\tif (oContext) {\n\n\t\tif (oContext.title) {\n\t\t\tthis.title.value = oContext.title;\n\t\t}\n\n\t\tif (oContext.modifiedBy) {\n\t\t\tthis.modifiedBy.value = oContext.modifiedBy;\n\t\t}\n\t}\n}\n\nCore.prototype = Object.create(XMLFile.prototype);\nCore.prototype.constructor = Core;\n\nCore.metadata = {\n\tpath: 'docProps/',\n\tfilename: 'core.xml',\n\ttag: 'cp:coreProperties',\n\troot: true,\n\tattributes: [\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tsuffix: 'cp',\n\t\t\tvalue: 'http://schemas.openxmlformats.org/package/2006/metadata/core-properties'\n\t\t},\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tsuffix: 'dc',\n\t\t\tvalue: 'http://purl.org/dc/elements/1.1/'\n\t\t},\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tsuffix: 'dcterms',\n\t\t\tvalue: 'http://purl.org/dc/terms/'\n\t\t},\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tsuffix: 'dcmitype',\n\t\t\tvalue: 'http://purl.org/dc/dcmitype/'\n\t\t},\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tsuffix: 'xsi',\n\t\t\tvalue: 'http://www.w3.org/2001/XMLSchema-instance'\n\t\t}\n\t],\n\tproperties: [\n\t\t{\n\t\t\tid: 'title',\n\t\t\ttag: 'dc:title',\n\t\t\tvalue: 'Table Export' // Default value, can be overridden\n\t\t},\n\t\t{\n\t\t\ttag: 'dc:creator',\n\t\t\tvalue: 'SAP UI5 Document Export'\n\t\t},\n\t\t{\n\t\t\ttag: 'dcterms:created',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tprefix: 'xsi',\n\t\t\t\t\tname: 'type',\n\t\t\t\t\tvalue: 'dcterms:W3CDTF'\n\t\t\t\t}\n\t\t\t],\n\t\t\tvalue: new Date().toISOString()\n\t\t},\n\t\t{\n\t\t\ttag: 'cp:keywords',\n\t\t\tvalue: 'SAP UI5 EXPORT'\n\t\t},\n\t\t{\n\t\t\tid: 'modifiedBy',\n\t\t\ttag: 'cp:lastModifiedBy',\n\t\t\tvalue: 'SAP UI5' // Default value, can be overridden\n\t\t}\n\t]\n};\n\nmodule.exports = Core;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/objects/Core.js\n// module id = 21\n// module chunks = 0","var XMLNode = require('../xml/XMLNode');\n\n/**\n * The SharedString class represents each shared String within the\n * SharedStrings file.\n *\n * @param {string} sValue - The String that gets represented by this SharedString object\n * @class\n */\nfunction SharedString(sValue) {\n\tXMLNode.call(this, SharedString.metadata);\n\n\tthis.setValue(sValue);\n}\n\nSharedString.prototype = Object.create(XMLNode.prototype);\nSharedString.prototype.constructor = SharedString;\n\n\nSharedString.metadata = {\n\ttag: 'si',\n\tproperties: [\n\t\t{\n\t\t\tid: 'text',\n\t\t\ttag: 't'\n\t\t}\n\t]\n};\n\n/**\n * Assigns the given value to the current SharedString instance.\n *\n * @function\n * @param {string} sValue - The string value that should be added\n */\nSharedString.prototype.setValue = function(sValue) {\n\n\tif (sValue && typeof sValue == 'string') {\n\t\tthis.text.value = sValue;\n\t} else {\n\n\t\t/**\n\t\t * There are other implementations for creating a string\n\t\t * representation out of a number that might be more\n\t\t * convenient like new String(number).toString() or\n\t\t * number.toString() but '' + number is the best performing.\n\t\t */\n\t\tthis.text.value = '' + sValue;\n\t}\n};\n\nmodule.exports = SharedString;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/data/SharedString.js\n// module id = 22\n// module chunks = 0","var ColumnConfiguration\t= require('../binding/ColumnConfiguration'),\n\tReferenceNode\t\t= require('./ReferenceNode'),\n\tSharedStrings\t\t= require('../data/SharedStrings'),\n\tSheet\t\t\t\t= require('../data/Sheet'),\n\tStyles\t\t\t\t= require('../style/Styles');\n\n/**\n * This class represents the workbook.xml file within the generated\n * Office Open XML Spreadsheet. The workbook is the central element\n * of the Office Open XML Spreadsheet that references all the content.\n *\n * @constructor\n */\nfunction Workbook() {\n\tvar key;\n\n\tReferenceNode.call(this, Workbook.metadata);\n\n\t/* Create and register central Styles instance for this workbook */\n\tthis._styles = new Styles();\n\tthis._styles.setPath(this.getPath());\n\tthis.addRelatedFile(this._styles);\n\n\t/* Create and register central SharedStrings instance for this workbook */\n\tthis._sharedStrings = SharedStrings.getInstance();\n\tthis._sharedStrings.setPath(this.getPath());\n\tthis.addRelatedFile(this._sharedStrings);\n\n\tfor (key in Workbook.RELATIONS) {\n\t\tthis._relationships.addRelationship(Workbook.RELATIONS[key].target, Workbook.RELATIONS[key].type);\n\t}\n\n\tthis._registeredSheets = [];\n}\n\nWorkbook.prototype = Object.create(ReferenceNode.prototype);\nWorkbook.prototype.constructor = Workbook;\n\nWorkbook.RELATIONS = {\n\tsharedStrings: {\n\t\ttarget: 'sharedStrings.xml',\n\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings'\n\t},\n\tstyles: {\n\t\ttarget: 'styles.xml',\n\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles'\n\t}\n};\n\nWorkbook.metadata = {\n\tfilename: 'workbook.xml',\n\tpath: 'xl/',\n\ttag: 'workbook',\n\troot: true,\n\tattributes: [\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\n\t\t},\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tsuffix: 'r',\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships'\n\t\t}\n\t],\n\tproperties: [\n\t\t{\n\t\t\ttag: 'bookViews',\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'workbookView',\n\t\t\t\t\tattributes: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'xWindow',\n\t\t\t\t\t\t\tvalue: '0'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'yWindow',\n\t\t\t\t\t\t\tvalue: '0'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'windowWidth',\n\t\t\t\t\t\t\tvalue: '22260'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'windowHeight',\n\t\t\t\t\t\t\tvalue: '12645'\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: 'sheets',\n\t\t\ttag: 'sheets'\n\t\t}\n\t]\n};\n\n/**\n * Adds a new {@link Sheet} to this {@link Workbook}\n *\n * @param {string} sName - Name of the {@link Sheet} that is used as label in Microsoft Excel\n * @param {Object} oColumnConfig - The column configuration of this Sheet\n * @param {boolean} [bHideHeader] - Hides the header row (optional - default: false)\n * @returns {Sheet} - The newly added {@link Sheet}\n */\nWorkbook.prototype.addSheet = function(sName, oColumnConfig) {\n\tvar oColumnConfiguration, nCount, sId, oSheet, sSheetFileName;\n\n\tnCount = this.sheets.childs.length + 1;\n\tsSheetFileName = 'sheet' + nCount + '.xml';\n\tsId = this._relationships.addRelationship('worksheets/' + sSheetFileName,\n\t\t'http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet');\n\n\tthis.sheets.addChild({\n\t\ttag: 'sheet',\n\t\tattributes: [\n\t\t\t{\n\t\t\t\tname: 'name',\n\t\t\t\tvalue: sName\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'sheetId',\n\t\t\t\tvalue: '' + nCount\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'id',\n\t\t\t\tprefix: 'r',\n\t\t\t\tvalue: sId\n\t\t\t}\n\t\t]\n\t});\n\n\toColumnConfiguration = new ColumnConfiguration(oColumnConfig, this._styles);\n\toSheet = new Sheet(oColumnConfiguration);\n\toSheet.setFileName(sSheetFileName);\n\toSheet.setPath(this.getPath() + 'worksheets/');\n\n\tthis.addRelatedFile(oSheet);\n\tthis._registeredSheets.push(oSheet);\n\n\treturn oSheet;\n};\n\n/**\n * Set the given sheet as selected. Unselects all other sheets in the workbook.\n *\n * @param {Sheet} oSheet - The Sheet object that should be selected\n */\nWorkbook.prototype.selectSheet = function(oSheet) {\n\n\tif (!(oSheet instanceof Sheet) || this._registeredSheets.indexOf(oSheet) < 0) {\n\t\tthrow new Error('Could not select sheet. Sheet not found.');\n\t}\n\n\t/* Remove selection on all sheets */\n\tthis._registeredSheets.forEach(function(sheetElement, index, array) {\n\t\tsheetElement.views.defaultView.remove('selected');\n\t});\n\n\t/* Select the particular Sheet */\n\toSheet.views.defaultView.addAttribute({\n\t\tid: 'selected',\n\t\tname: 'tabSelected',\n\t\tvalue: '1' // Refers to W3C XML Schema boolean (true)\n\t});\n};\n\nmodule.exports = Workbook;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/objects/Workbook.js\n// module id = 23\n// module chunks = 0","var Column\t= require('./Column'),\n\tText\t= require('./type/Text'),\n\tRow\t\t= require('../data/Row'),\n\tCell\t= require('../data/Cell');\n\n/**\n * ColumnConfiguration represents the configuration of all columns within\n * one Sheet. The ColumnConfiguration handles the mapping of object\n * properties to certain columns,, labeling, type definition and also\n * display information like width and alignment.\n *\n * @param {Object} oConfig -  An configuration object that contains all necessary column definitions\n * @param {Object} oConfig.columns -  An array of Column definitions. {@see Column} for further details\n * @param {string} [oConfig.hierarchyLevel] -  Name of the property that holds the hierarchy level\n * @param {boolean} [oConfig.hideHeader] - Flag that allows to hide the header row\n * @param {Styles} oStyles - Style collection that is used to register Cell or row specific styles\n * @module binding/ColumnBinding\n * @constructor\n */\nfunction ColumnConfiguration(oConfig, oStyles) {\n\tvar aColumns, oColumn, i;\n\n\tthis.columns = [];\n\tthis._row = null;\n\tthis.styles = oStyles;\n\tthis.hideHeader = oConfig.hideHeader;\n\n\tObject.defineProperty(this, 'hierarchyLevelProperty', { value: oConfig.hierarchyLevel });\n\n\taColumns = oConfig.columns;\n\n\tfor (i = 0; i < aColumns.length; i++) {\n\n\t\t/* As of specification, the hierarchy level indentation will only be applied on the first row */\n\t\tif (i == 0) {\n\t\t\tif (typeof aColumns[i] === 'string') {\n\t\t\t\taColumns[i] = { property: aColumns[i] };\n\t\t\t}\n\n\t\t\taColumns[i].hierarchyLevel = this.hierarchyLevelProperty;\n\t\t}\n\n\t\toColumn = aColumns[i] instanceof Column ? aColumns[i] : new Column(aColumns[i], this.styles);\n\t\tthis.columns.push(oColumn);\n\t}\n}\n\n/**\n * Initializes the objects that are necessary for the binding. This\n * components are:\n * - a template Row\n * - a Cell for each Column\n * - a Style for each data type referenced by each Column\n *\n * @private\n */\nColumnConfiguration.prototype._initBinding = function() {\n\tvar i;\n\n\tthis._row = new Row();\n\n\tfor (i = 0; i < this.columns.length; i++) {\n\t\tthis._row.addCell(this.columns[i].getCell());\n\t}\n};\n\n\n/**\n * Creates an new Row and binds the provided data to the Row Cells according to the current ColumnConfiguration.\n *\n * @param {Object} oData - The data object that has to be bound to the row\n * @param {number} nHierarchyLevel - Hierarchy level that will be used for indent and outline\n * @returns {Row} - Returns the created Row that contains the provided data\n */\nColumnConfiguration.prototype.bind = function(oData, nHierarchyLevel) {\n\tvar i, normalizedHierarchyLevel;\n\n\tif (this._row === null) {\n\t\tthis._initBinding();\n\t}\n\n\t/* Normalise hierarchy depth to not exceed the maximum depth of 7 */\n\tnormalizedHierarchyLevel = Math.min(nHierarchyLevel, 7);\n\n\t/*\n\t * We need to add, update or delete the outline attribute because\n\t * we reuse the row object\n\t */\n\tif (normalizedHierarchyLevel && !this._row.outline) {\n\t\tthis._row.addAttribute({\n\t\t\tid: 'outline',\n\t\t\tname: 'outlineLevel',\n\t\t\tvalue: normalizedHierarchyLevel\n\t\t});\n\t} else if (normalizedHierarchyLevel && this._row.outline) {\n\t\tthis._row.outline.value = normalizedHierarchyLevel;\n\t} else if (!normalizedHierarchyLevel && this._row.outline) {\n\t\tthis._row.remove('outline');\n\t}\n\n\tfor (i = 0; i < this.columns.length; i++) {\n\t\tthis.columns[i].bind(oData);\n\t}\n\n\treturn this._row;\n};\n\n\n/**\n * Creates the header Row according to the current ColumnConfiguration and returns it.\n *\n * @returns {Row} - Header row according to the ColumnConfiguration\n */\nColumnConfiguration.prototype.getHeader = function() {\n\tvar cell, row, type;\n\n\tif (this.hideHeader) {\n\t\treturn null;\n\t}\n\n\trow = new Row();\n\ttype = new Text({\n\t\tfont: {\n\t\t\tname: 'Arial',\n\t\t\tsize: 11,\n\t\t\tbold: true\n\t\t},\n\t\tfill: {\n\t\t\tcolor: 'F7F7F7'\n\t\t}\n\t});\n\n\t/* Register header style */\n\ttype.registerAt(this.styles);\n\n\trow.setStyle(type.getStyleId());\n\trow.addAttribute({\n\t\tname: 'customFormat',\n\t\tvalue: '1'\n\t});\n\n\tthis.columns.forEach(function(column, index, array) {\n\n\t\t/* Create new Cell and assign value */\n\t\tcell = new Cell(type);\n\t\tcell.setValue('label', column);\n\n\t\trow.addCell(cell);\n\t});\n\n\treturn row;\n};\n\nColumnConfiguration.prototype.getGroupHeader = function(sGroupName) {\n\tvar cell, row, type;\n\n\trow = new Row();\n\ttype = new Text({\n\t\tfont: {\n\t\t\tname: 'Arial',\n\t\t\tsize: 11,\n\t\t\tbold: true\n\t\t},\n\t\tfill: {\n\t\t\tcolor: 'F2F2F2'\n\t\t}\n\t});\n\n\t/* Register header style */\n\ttype.registerAt(this.styles);\n\n\trow.setStyle(type.getStyleId());\n\trow.addAttribute({\n\t\tname: 'customFormat',\n\t\tvalue: '1'\n\t});\n\n\trow.spans.value = '1:' + this.size();\n\n\t/* Create new Cell and assign value */\n\tcell = new Cell(type);\n\tcell.setValue('name', {name: sGroupName});\n\n\trow.addCell(cell);\n\n\treturn row;\n};\n\n\n/**\n * Returns the size of the ColumnConfiguration - respectively the\n * count of the configured columns.\n *\n * @returns {number} Count of configured columns\n */\nColumnConfiguration.prototype.size = function() {\n\treturn this.columns.length;\n};\n\nmodule.exports = ColumnConfiguration;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/binding/ColumnConfiguration.js\n// module id = 24\n// module chunks = 0","var Cell\t\t\t= require('../data/Cell'),\n\tCalendarDate \t= require('../binding/type/CalendarDate'),\n\tNumeric \t\t= require('../binding/type/Numeric'),\n\tCurrency \t\t= require('../binding/type/Currency'),\n\tBooleanType \t= require('../binding/type/BooleanType'),\n\tText\t\t \t= require('../binding/type/Text');\n\n/**\n * The Column class represents the field type of columns. It handles\n * styling, data types and data binding.\n *\n * @param {(Object|string)} oData - Data object representing the Column configuration\n * @param {string} oData.property - References the data object property that is bound as value for this column\n * @param {string} [oData.align] - Optional alignment. Default: Column.Align.Left\n * @param {string} [oData.label] - Optional column label that will be shown in the header row\n * @param {string} [oData.type] - Optional data type for this column. Default: Column.Type.Text\n * @param {string} [oData.width] - Optional width of the\n * @param {Styles} oStyles - Styles collection that is needed to register each Style a Column uses\n * @class\n * @module binding/Column\n */\nfunction Column(oData, oStyles) {\n\tvar oColumnData;\n\n\t/* Fallback assignment if only a key is provided */\n\toColumnData = typeof oData === 'string' ? {property: oData} : oData;\n\tif (!oColumnData || !oColumnData.property) { throw new Error('The property for the column is not defined'); }\n\n\tthis.align = oColumnData.align ? oColumnData.align : Column.Align.Left;\n\tthis.property = oColumnData.property;\n\tthis.label = oColumnData.label ? oColumnData.label : oColumnData.property;\n\tthis.width = oColumnData.width;\n\tthis.styles = oStyles;\n\tthis.type = this._initType(oColumnData);\n}\n\nColumn.Align = {\n\tLeft: 'left',\n\tCenter: 'center',\n\tRight: 'right'\n};\n\n/**\n * Initializes the data type for this Column. Type specific\n * formatting information will be evaluated and applied.\n *\n * @param {Object} oData - Configuration object for this Column that also contains type and formatting information\n * @param {string} oData.type - Specifies the data type\n * @param {boolean} [oData.delimiter] - Specifies if a thousands delimiter is shown\n * @param {number} [oData.scale] - Specifies the the decimal scale\n * @param {string} [oData.calendar] - Specifies the calendar if type is date, datetime or time\n * @param {string} [oData.format] - Specifies a custom format if type is date, datetime or time\n * @param {string} [oData.unit] - Specifies the UoM if type is number\n * @param {string} [oData.unitProperty] - Name of the property that contains the UoM if type is number or currency\n * @param {boolean} [oData.displayUnit] - Specifies if the UoM will be shown or not if type is number or currency\n * @param {string} [oData.trueValue] - Specifies the displayed value if the boolean type has the value true\n * @param {string} [oData.falseValue] - Specifies the displayed value if the boolean type has the value false\n * @param {string} [oData.template] - Specifies a template string that can be filled with several properties\n * @param {string} [oData.hierarchyLevel] - Specifies the name of the property that contains the hierarchy level\n * @param {string} [oData.inputFormat] - Specifies the input format of a string based date\n *\n * @returns {Type} - Returns the specific Type object that contains all the formatting\n * @private\n */\nColumn.prototype._initType = function(oData) {\n\tvar type, sType;\n\n\tsType = oData.type;\n\n\tif (sType === 'date' || sType === 'datetime' || sType === 'time') {\n\t\ttype = new CalendarDate({\n\t\t\tcalendar: oData.calendar,\n\t\t\tformat: oData.format,\n\t\t\ttype: sType,\n\t\t\tinputFormat: oData.inputFormat\n\t\t});\n\n\t\t/* Add \"UTC\" to all columns headers of type datetime to indicate that all timestamps in EXCEL are UTC */\n\t\tthis.label = sType === 'datetime' ? this.label + ' (UTC)' : this.label;\n\n\t} else if (sType === 'number' || sType === 'percent' || sType === 'exponent') {\n\t\ttype = new Numeric({\n\t\t\tdelimiter: oData.delimiter,\n\t\t\tscale: oData.scale,\n\t\t\ttype: oData.type,\n\t\t\tunit: oData.unit,\n\t\t\tunitProperty: oData.unitProperty\n\t\t});\n\t} else if (sType === 'currency') {\n\t\ttype = new Currency({\n\t\t\ttype: sType,\n\t\t\tunitProperty: oData.unitProperty,\n\t\t\tdisplayUnit: oData.displayUnit,\n\t\t\tscale: oData.scale\n\t\t});\n\t} else if (sType === 'boolean') {\n\t\ttype = new BooleanType({\n\t\t\ttrueValue: oData.trueValue,\n\t\t\tfalseValue: oData.falseValue\n\t\t});\n\t} else {\n\t\ttype = new Text({\n\t\t\ttype: 'text',\n\t\t\ttemplate: oData.template,\n\t\t\thierarchyLevel: oData.hierarchyLevel\n\t\t});\n\t}\n\n\ttype.registerAt(this.styles);\n\n\treturn type;\n};\n\n/**\n * Returns the Cell object that is referenced by this particular\n * Column. Every Column references only one single Cell that gets\n * reused for each and every Row.\n *\n * When binding the actual data to a row, the Cell content, its\n * references and its styling get updated and a serialized version\n * of the row is stored within the sheet.\n *\n * @returns {Cell} - The Cell that belongs to this particular Column\n */\nColumn.prototype.getCell = function() {\n\tif (!this.cell) {\n\t\tthis.cell = new Cell(this.type);\n\t}\n\n\treturn this.cell;\n};\n\n/**\n * This method binds the actual business object property to the columns cell.\n *\n * @param {object} oData - Business object that gets bound to the Cell of this Column.\n */\nColumn.prototype.bind = function(oData) {\n\n\t/*\n\t * Due to the fact that Cell#setValue updates the Style depending\n\t * on the actual Cell value (i.E. Unit of Measurement for\n\t * Currencies), we need to provide the original business object\n\t * so that the Cell knows the whole business object instead of\n\t * just the value of its particular property.\n\t */\n\tthis.cell.setValue(this.property, oData);\n};\n\nmodule.exports = Column;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/binding/Column.js\n// module id = 25\n// module chunks = 0","var XMLFile\t\t\t= require('../xml/XMLFile'),\n\tRelationships\t= require('./Relationships');\n\n/**\n * This class represents the a Office Open XML Spreadsheet object\n * that is related to other objects via Relationships. The object\n * manages its Relationships by itself to encapsulate the complexity.\n *\n * A ReferenceNode also provides information about its path so that\n * all relationships that are connected to this ReferenceNode are are\n * relative to its path.\n *\n * @param {Object} oConfig - Configuration object that is used by the super class XMLFile\n * @constructor\n */\nfunction ReferenceNode(oConfig) {\n\tXMLFile.call(this, oConfig);\n\n\tthis._relatedFiles = [];\n\tthis._relationships = new Relationships(this);\n\n\tthis.addRelatedFile(this._relationships);\n}\n\nReferenceNode.prototype = Object.create(XMLFile.prototype);\nReferenceNode.prototype.constructor = ReferenceNode;\n\n\nReferenceNode.prototype.addRelatedFile = function(oXMLFile) {\n\tif (!(oXMLFile instanceof XMLFile)) {\n\t\tthrow new Error('A related file must be of type XMLFile');\n\t}\n\n\tthis._relatedFiles.push(oXMLFile);\n};\n\nReferenceNode.prototype.getRelationships = function() {\n\treturn this._relationships;\n};\n\n/**\n * Returns an Array of {@link XMLFile} objects that are reference by\n * this {@link ReferenceNode}. The method provides a flat copy of the\n * original data to avoid manipulation.\n *\n * @returns {Array} Array containing referenced files\n */\nReferenceNode.prototype.getRelatedFiles = function() {\n\treturn this._relatedFiles.slice();\n};\n\nmodule.exports = ReferenceNode;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/objects/ReferenceNode.js\n// module id = 26\n// module chunks = 0","var XMLFile\t\t\t= require('../xml/XMLFile'),\n\tStyle\t\t\t= require('./Style'),\n\tFont\t\t\t= require('./Font'),\n\tFill\t\t\t= require('./Fill'),\n\tBorder\t\t\t= require('./Border'),\n\tNumberFormat\t= require('./NumberFormat');\n\n/**\n *\n * @class\n * @module style/Styles\n */\nfunction Styles() {\n\tXMLFile.call(this, Styles.metadata);\n\n\t/* Microsoft Excel fix - specific fill that needs to be present */\n\tthis.addFill({ type: 'none' }); // Add a default fill at index 0\n\tthis.addFill({ type: 'gray125' }); // Needs to have index 1\n\tthis.addStyle(Style.DEFAULT); // Apply base style to feed the hard-coded cellStyles and cellStyleXfs\n}\n\nStyles.prototype = Object.create(XMLFile.prototype);\nStyles.prototype.constructor = Styles;\n\nStyles.metadata = {\n\tfilename: 'styles.xml',\n\ttag: 'styleSheet',\n\troot: true,\n\tattributes: [\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\n\t\t}\n\t],\n\tproperties: [\n\t\t{\n\t\t\tid: 'numberFormats',\n\t\t\ttag: 'numFmts',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'count',\n\t\t\t\t\tname: 'count',\n\t\t\t\t\tvalue: '0'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: 'fonts',\n\t\t\ttag: 'fonts',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'count',\n\t\t\t\t\tname: 'count',\n\t\t\t\t\tvalue: '0'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: 'fills',\n\t\t\ttag: 'fills',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'count',\n\t\t\t\t\tname: 'count',\n\t\t\t\t\tvalue: '0'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: 'borders',\n\t\t\ttag: 'borders',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'count',\n\t\t\t\t\tname: 'count',\n\t\t\t\t\tvalue: '0'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'cellStyleXfs',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'count',\n\t\t\t\t\tvalue: '1'\n\t\t\t\t}\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'xf',\n\t\t\t\t\tattributes: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'numFmtId',\n\t\t\t\t\t\t\tvalue: '0'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'fontId',\n\t\t\t\t\t\t\tvalue: '0'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'fillId',\n\t\t\t\t\t\t\tvalue: '0'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'borderId',\n\t\t\t\t\t\t\tvalue: '0'\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: 'cellXfs',\n\t\t\ttag: 'cellXfs',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'count',\n\t\t\t\t\tname: 'count',\n\t\t\t\t\tvalue: '0'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'cellStyles',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'count',\n\t\t\t\t\tvalue: '1'\n\t\t\t\t}\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'cellStyle',\n\t\t\t\t\tattributes: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'name',\n\t\t\t\t\t\t\tvalue: 'Normal'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'xfId',\n\t\t\t\t\t\t\tvalue: '0'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'builtinId',\n\t\t\t\t\t\t\tvalue: '0'\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'dxfs',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'count',\n\t\t\t\t\tvalue: '0'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'tableStyles',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'count',\n\t\t\t\t\tvalue: '0'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'defaultTableStyle',\n\t\t\t\t\tvalue: 'TableStyleMedium2'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'defaultPivotStyle',\n\t\t\t\t\tvalue: 'PivotStyleLight16'\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n};\n\n\n/**\n * Adds the specified Style to the Styles class according to the\n * Style configuration. The method will return a Style object that\n * references Font, Fill, Border and an optional NumberFormat. If\n * some of the referenced Font, Fill, Border or NumberFormat objects\n * are not present yet, it will create them automatically, otherwise\n * it will re-use existing ones.\n *\n * The method ensures that particular Style combinations exist only\n * once and there are no duplicates.\n *\n * @param {Object} oData - Configuration object that defines the Style information\n * @param {Object} [oData.font] - Configuration object that defines the Font information\n * @param {string} [oData.font.name] - Name of the used Font i.E. 'Arial'\n * @param {string} [oData.font.size] - Preferred Font size i.E. '12'\n * @param {boolean} [oData.font.bold] - Defines the Font weight\n * @param {Object} [oData.fill] - Configuration object that defines the Fill information\n * @param {string} [oData.fill.color] - HEX string defining the color of the cell fill\n * @param {string} [oData.fill.type] - Defines the type of the fill i.E. 'none' or 'solid'\n * @param {Object} [oData.border] - Configuration object that defines the Border information\n * @param {Object|number} [oData.numberFormat] - Configuration object that defines the NumberFormat information\n * @param {string} [oData.numberFormat.format] - Formatting template that will be used\n * @param {Object} [oData.align] - Defines the text alignment within the cell\n * @param {string} [oData.align.horizontal] - Horizontal alignment\n * @param {string} [oData.align.vertical] - Vertical alignment\n * @param {string} [oData.align.indent] - Cell indentation\n * @returns {number} - The ID of the unique Style object that needs to be referenced\n */\nStyles.prototype.addStyle = function(oData) {\n\tvar style, fontId, fillId, borderId, numberFormatId;\n\n\t/* Add Font, Fill, Border and NumberFormat if needed */\n\tfontId = this.addFont(oData.font);\n\tfillId = this.addFill(oData.fill);\n\tborderId = this.addBorder(oData.border);\n\n\t/* Fallback to avoid custom NumberFormats that won't be used if oData.numberFormat is undefined */\n\tif (typeof oData.numberFormat === 'undefined') {\n\t\toData.numberFormat = 0;\n\t}\n\n\tnumberFormatId =\n\t\tNumberFormat._isBuiltin(oData.numberFormat) ? oData.numberFormat : this.addNumberFormat(oData.numberFormat);\n\n\t/* Create temporary Style */\n\tstyle = new Style();\n\n\tstyle.setFontId(fontId);\n\tstyle.setFillId(fillId);\n\tstyle.getBorderId(borderId);\n\tstyle.setNumberFormatId(numberFormatId);\n\tstyle.setAlignment(oData.align);\n\n\t/* Add Style if not already present */\n\treturn this._addToAggregation(style, this.cellXfs);\n};\n\n\n/**\n * Adds the specific item to the provided aggregation. This Method\n * should only be called by the library itself due to possible\n * failures. It automatically updates the count within the XML\n * representation of this aggregation.\n *\n * This method should only be used for Font, Fill, Border or\n * NumberFormat objects.\n *\n * @param {Font|Fill|Border|NumberFormat|Style} oNewItem - The item that needs to be appended to the aggregation\n * @param {Array} aAggregation - An array that represents the aggregation\n * @returns {number} - The zero-based index of the element after it was inserted\n * @private\n */\nStyles.prototype._addToAggregation = function(oNewItem, aAggregation) {\n\tvar count, i;\n\n\ti = -1;\n\n\taAggregation.childs.forEach(function(existingItem, index, array) {\n\t\tif (existingItem.equals(oNewItem)) {\n\t\t\ti = index;\n\t\t}\n\t});\n\n\tif (i === -1) {\n\t\taAggregation.addChild(oNewItem);\n\t\tcount = aAggregation.childs.length;\n\n\t\taAggregation.count.value = count;\n\t\ti = count - 1;\n\t}\n\n\treturn i;\n};\n\n\n/**\n * This method adds a RGB color to the Styles collection that is\n * referenced by several Styles.\n *\n * If this particular color is already present, it will not add it a\n * second time.\n *\n * @param {string} sHexColor - HEX string representing a RGB color\n */\nStyles.prototype.addColor = function(sHexColor) {\n\tvar alreadyPresent;\n\n\tif (!this.colors) {\n\t\tthis.addChild({\n\t\t\tid: 'colors',\n\t\t\ttag: 'colors',\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tid: 'mru',\n\t\t\t\t\ttag: 'mruColors'\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\t}\n\n\talreadyPresent = this.colors.mru.childs.some(function(color) {\n\t\treturn color.rgb.value === 'FF' + sHexColor;\n\t});\n\n\tif (alreadyPresent) {\n\t\treturn;\n\t}\n\n\tthis.colors.mru.addChild({\n\t\ttag: 'color',\n\t\tattributes: [\n\t\t\t{\n\t\t\t\tid: 'rgb',\n\t\t\t\tname: 'rgb',\n\t\t\t\tvalue: 'FF' + sHexColor\n\t\t\t}\n\t\t]\n\t});\n};\n\n\n/**\n * This method adds a Font to the Styles collection that can be\n * referenced by several Styles. The Font is instantiated according\n * to the provided configuration object.\n *\n * If this particular Font is already present, it will not add it a\n * second time. This ensures that each referenced Font is unique\n * according to the criteria of Font#equals.\n *\n * The method returns the index which deals as an identifier for this\n * Font.\n *\n * @param {Object} oData - Configuration object for this Font\n * @returns {number} - The index of this Font used for reference by Style objects\n */\nStyles.prototype.addFont = function(oData) {\n\tvar oFont = new Font(oData);\n\n\treturn this._addToAggregation(oFont, this.fonts);\n};\n\n\n/**\n * This method adds a Fill to the Styles collection that can be\n * referenced by several Styles. The Fill is instantiated according\n * to the provided configuration object.\n *\n * If this particular Fill is already present, it will not add it a\n * second time. This ensures that each referenced Fill is unique\n * according to the criteria of Fill#equals.\n *\n * The method returns the index which deals as an identifier for this\n * Fill.\n *\n * @param {Object} oData - Configuration object for this Fill\n * @returns {number} - The index of this Fill used for reference by Style objects\n */\nStyles.prototype.addFill = function(oData) {\n\tvar index, oFill;\n\n\toFill = new Fill(oData);\n\n\tindex = this._addToAggregation(oFill, this.fills);\n\n\tif (oFill.getFill() !== null) {\n\t\tthis.addColor(oFill.getFill());\n\t}\n\n\treturn index;\n};\n\n\n/**\n * This method adds a Border to the Styles collection that can be\n * referenced by several Styles. The Border is instantiated according\n * to the provided configuration object.\n *\n * If this particular Border is already present, it will not add it a\n * second time. This ensures that each referenced Border is unique\n * according to the criteria of Border#equals.\n *\n * The method returns the index which deals as an identifier for this\n * Border.\n *\n * @param {Object} oData - Configuration object for this Border\n * @returns {number} - The index of this Border used for reference by Style objects\n */\nStyles.prototype.addBorder = function(oData) {\n\tvar oBorder = new Border(oData);\n\n\treturn this._addToAggregation(oBorder, this.borders);\n};\n\n\n/**\n * This method adds a NumberFormat to the Styles collection that can\n * be referenced by several Styles. The NumberFormat is instantiated\n * according to the provided configuration object.\n *\n * If this particular NumberFormat is already present, it will not\n * add it a second time. This ensures that each referenced\n * NumberFormat is unique according to the criteria of\n * NumberFormat#equals.\n *\n * The method returns the index which deals as an identifier for this\n * NumberFormat.\n *\n * @param {Object} oData - Configuration object for this NumberFormat\n * @returns {number} - The index of this NumberFormat used for reference by Style objects\n */\nStyles.prototype.addNumberFormat = function(oData) {\n\tvar index, numberFormat;\n\n\tnumberFormat = new NumberFormat(oData);\n\tindex = this._addToAggregation(numberFormat, this.numberFormats);\n\n\tnumberFormat.setId(NumberFormat.ID_OFFSET + index);\n\n\treturn numberFormat.getId();\n};\n\nmodule.exports = Styles;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/style/Styles.js\n// module id = 27\n// module chunks = 0","var XMLNode = require('../xml/XMLNode');\nvar Alignment = require('./Alignment');\n\n/**\n * Represents a particular Style within the Office Open XML Spreadsheet.\n * Instances of this type will be created by the Styles Class after\n * registering a new Style.\n *\n * @constructor\n */\nfunction Style() {\n\tXMLNode.call(this, Style.metadata);\n}\n\nStyle.prototype = Object.create(XMLNode.prototype);\nStyle.prototype.constructor = Style;\n\nStyle.metadata = {\n\ttag: 'xf',\n\tattributes: [\n\t\t{\n\t\t\tid: 'numberFormat',\n\t\t\tname: 'numFmtId',\n\t\t\tvalue: '0'\n\t\t},\n\t\t{\n\t\t\tid: 'font',\n\t\t\tname: 'fontId',\n\t\t\tvalue: '0'\n\t\t},\n\t\t{\n\t\t\tid: 'fill',\n\t\t\tname: 'fillId',\n\t\t\tvalue: '0'\n\t\t},\n\t\t{\n\t\t\tid: 'border',\n\t\t\tname: 'borderId',\n\t\t\tvalue: '0'\n\t\t}\n\t]\n};\n\nStyle.DEFAULT = {\n\tfont: {\n\t\tname: 'Arial',\n\t\tsize: 11,\n\t\tfamily: '2',\n\t\tcolor: '1',\n\t\tbold: false\n\t},\n\tfill: {\n\t\ttype: 'none'\n\t}\n};\n\nStyle.prototype.getAlignment = function() {\n\treturn this.alignment ? this.alignment : null;\n};\n\nStyle.prototype.getFontId = function() {\n\treturn this.font.value;\n};\n\nStyle.prototype.getFillId = function() {\n\treturn this.fill.value;\n};\n\nStyle.prototype.getBorderId = function() {\n\treturn this.border.value;\n};\n\nStyle.prototype.getNumberFormatId = function() {\n\treturn this.numberFormat.value;\n};\n\n/**\n * Applies the alignment to the Style. The alignment must match the\n * predefined options of <code>Alignment</code> as far as it is not\n * null. Other values will be ignored.\n *\n * The value <code>null</code> will delete the current alignment.\n *\n * @param {Object} oAlign - Alignment configuration that gets applied or null\n * @param {string} [oAlign.horizontal] - Horizontal alignment\n * @param {string} [oAlign.vertical] - Vertical alignment\n * @param {number} [oAlign.indent] - Cell indentation\n */\nStyle.prototype.setAlignment = function(oAlign) {\n\tvar alignment, alignProperty;\n\n\talignProperty = 'alignment';\n\n\t// Removes the applyAlignment automatically when sAlign is null\n\tthis._apply(oAlign, 'Alignment');\n\n\tif (typeof oAlign === 'undefined' || oAlign === null) {\n\t\tthis.remove(alignProperty);\n\n\t\treturn;\n\t}\n\n\tif (!(alignProperty in this)) {\n\t\talignment = new Alignment();\n\n\t\tthis.addChild(alignment);\n\t\tObject.defineProperty(this, alignProperty, {value: alignment, writable: false, configurable: true});\n\t}\n\n\tthis[alignProperty].setHorizontalAlignment(oAlign.horizontal);\n\tthis[alignProperty].setVerticalAlignment(oAlign.vertical);\n\tthis[alignProperty].setIndent(oAlign.indent);\n};\n\nStyle.prototype.setFontId = function(nFontId) {\n\tthis._apply(nFontId, 'Font');\n\n\tthis.font.value = nFontId;\n};\n\nStyle.prototype.setFillId = function(nFillId) {\n\tthis._apply(nFillId, 'Fill');\n\n\tthis.fill.value = nFillId;\n};\n\nStyle.prototype.setBorderId = function(sBorderId) {\n\tthis.border.value = sBorderId;\n};\n\nStyle.prototype.setNumberFormatId = function(nNumFmtId) {\n\tthis._apply(nNumFmtId, 'NumberFormat');\n\n\tthis.numberFormat.value = nNumFmtId;\n};\n\nStyle.prototype._apply = function(nId, sType) {\n\tvar applyProperty = 'apply' + sType;\n\n\tthis.remove(applyProperty);\n\n\tif (nId) {\n\t\tthis.addAttribute({\n\t\t\tid: applyProperty,\n\t\t\tname: applyProperty,\n\t\t\tvalue: '1'\n\t\t});\n\t}\n};\n\nStyle.prototype.equals = function(oStyle) {\n\tif (!(oStyle instanceof Style)) {\n\t\treturn false;\n\t}\n\n\treturn this.getFontId() === oStyle.getFontId()\n\t\t&& this.getFillId() === oStyle.getFillId()\n\t\t&& this.getBorderId() === oStyle.getBorderId()\n\t\t&& this.getNumberFormatId() === oStyle.getNumberFormatId()\n\t\t&& ( (!this.alignment && !oStyle.alignment) || (this.alignment && this.alignment.equals(oStyle.alignment)) );\n};\n\nmodule.exports = Style;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/style/Style.js\n// module id = 28\n// module chunks = 0","var XMLNode = require('../xml/XMLNode');\n\n/**\n * The Font class represents a Font configuration within an Office\n * Open XML Spreadsheet.\n *\n * @param {Object} oData - Configuration object for this Font\n * @param {boolean} [oData.bold] - Boolean value indicating if the Font should be bold\n * @param {string} [oData.name] - The name of the font that gets used by this Font object i.E. Arial, Verdana, etc.\n * @param {number|String} [oData.size] - The font size that is been used\n * @param {number} [oData.family] - The font family reference {@see getFamily}\n * @constructor\n */\nfunction Font(oData) {\n\tXMLNode.call(this, Font.metadata);\n\n\tif (oData && oData instanceof Object) {\n\t\tthis.setName(oData.name)\n\t\t\t.setSize(oData.size)\n\t\t\t.setFamily(oData.family)\n\t\t\t.setBold(!!oData.bold);\n\t}\n}\n\nFont.prototype = Object.create(XMLNode.prototype);\nFont.prototype.constructor = Font;\n\nFont.DEFAULT_SIZE = 11;\nFont.DEFAULT_NAME = 'Arial';\n\nFont.metadata = {\n\ttag: 'font',\n\tproperties: [\n\t\t{\n\t\t\tid: 'size',\n\t\t\ttag: 'sz',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'valueAttribute',\n\t\t\t\t\tname: 'val',\n\t\t\t\t\tvalue: Font.DEFAULT_SIZE\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: 'color',\n\t\t\ttag: 'color',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'valueAttribute',\n\t\t\t\t\tname: 'theme',\n\t\t\t\t\tvalue: '1'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: 'name',\n\t\t\ttag: 'name',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'valueAttribute',\n\t\t\t\t\tname: 'val',\n\t\t\t\t\tvalue: Font.DEFAULT_NAME\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: 'family',\n\t\t\ttag: 'family',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'valueAttribute',\n\t\t\t\t\tname: 'val',\n\t\t\t\t\tvalue: 2\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n};\n\n/**\n * Checks if the current Font is equal to the given parameter.\n *\n * @param {Font} oFont - The Font to compare with\n * @return {boolean} - Returns true if both Font objects contain the same configuration.\n */\nFont.prototype.equals = function(oFont) {\n\tif (!(oFont instanceof Font)) {\n\t\treturn false;\n\t}\n\n\treturn this.getName() == oFont.getName()\n\t\t&& this.getSize() == oFont.getSize()\n\t\t&& this.isBold() == oFont.isBold()\n\t\t&& this.getColor() == oFont.getColor()\n\t\t&& this.getFamily() == oFont.getFamily();\n};\n\n/**\n * Returns whether the Font will be displayed bold or not.\n *\n * @returns {boolean} - Returns true if the Font is bold\n */\nFont.prototype.isBold = function() {\n\treturn !!this.bold;\n};\n\n/**\n * Returns the size of this Font.\n *\n * @returns {number} - The size of the Font\n */\nFont.prototype.getSize = function() {\n\treturn this.size.valueAttribute.value;\n};\n\n/**\n * Returns the name of this Font. I.E. Arial, Calibri, etc.\n *\n * @returns {string} - The name of the Font\n */\nFont.prototype.getName = function() {\n\treturn this.name.valueAttribute.value;\n};\n\n/**\n * Returns the color reference of this Font.\n *\n * @returns {string} - The color as HEX string\n */\nFont.prototype.getColor = function() {\n\treturn this.color.valueAttribute.value;\n};\n\n/**\n * Returns the Font family reference of this Font. The reference is\n * defined within the Office Open XML specification.\n * 1 : Roman (Times New Roman, SAP-icons)\n * 2 : Swiss (Arial, Calibri, Segoe UI, Tahoma, Verdana)\n * 3 : Modern\n * 4 : Script\n * 5 : Decorative\n * 6-14 : Reserved for future use\n *\n * @returns {number} - The Font family ID\n */\nFont.prototype.getFamily = function() {\n\treturn this.family.valueAttribute.value;\n};\n\n/**\n * This method can be used to set the Font to bold or not.\n *\n * @param {boolean} bBold - A boolean value that indicates if the Font should be bold or not\n * @return {Font} - Returns the current Font object for chaining\n */\nFont.prototype.setBold = function(bBold) {\n\tvar boldProperty = 'bold';\n\n\t/* Early return if bold status is already correct */\n\tif (bBold === !!this[boldProperty]) {\n\t\treturn this;\n\t}\n\n\tif (bBold) {\n\t\tthis.addChild({\n\t\t\tid: boldProperty,\n\t\t\ttag: 'b'\n\t\t});\n\t} else {\n\t\tthis.remove(boldProperty);\n\t}\n\n\treturn this;\n};\n\n/**\n * This method is used to set the Font family reference for the used font.\n *\n * @see {@link getFamily}\n * @param {number} nFamily - Number that references the Font family\n * @returns {Font} - Returns the current Font object for chaining\n */\nFont.prototype.setFamily = function(nFamily) {\n\n\tif (nFamily > 0 && nFamily < 15) {\n\t\tthis.family.valueAttribute.value = nFamily;\n\t}\n\n\treturn this;\n};\n\n/**\n * Assigns the given font name to this object.\n *\n * @param {string} sName - Name of the font i.E. Arial, Calibri, etc.\n * @return {Font} - Returns the current Font object for chaining\n */\nFont.prototype.setName = function(sName) {\n\tif (sName && typeof sName === 'string') {\n\t\tthis.name.valueAttribute.value = sName;\n\t}\n\n\t/*\n\t * If the font name is Calibri we need to add another child node:\n\t *\n\t *\t{\n\t *\t\ttag: 'scheme',\n\t *\t\tattributes: [\n\t *\t\t\t{\n\t *\t\t\t\tname: 'val',\n\t *\t\t\t\tvalue: 'minor'\n\t *\t\t\t}\n\t *\t\t]\n\t *\t}\n\t */\n\n\treturn this;\n};\n\n/**\n * Assigns the given font size to this object.\n *\n * @param {number} nSize - Textual representation of the font size\n * @return {Font} - Returns the current Font object for chaining\n */\nFont.prototype.setSize = function(nSize) {\n\n\t/* Check preconditions */\n\tif (typeof nSize !== 'number' || isNaN(nSize) || nSize < 1 || nSize > 96) {\n\t\tthrow new Error('The size ' + nSize + ' is not supported.');\n\t}\n\n\tthis.size.valueAttribute.value = nSize;\n\n\treturn this;\n};\n\nmodule.exports = Font;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/style/Font.js\n// module id = 29\n// module chunks = 0","var XMLNode = require('../xml/XMLNode');\n\n/**\n * This Class represents a background fill of cells within the Office\n * Open Spreadsheet document. The Fill accepts a configuration object\n * which might have either an \"color\" or an \"type\" property.\n *\n * @param {Object} oData - Configuration object for this Fill\n * @param {string} [oData.color] - HEX string defining the colored fill\n * @param {string} [oData.type] - Color independent fill type\n * @constructor\n */\nfunction Fill(oData) {\n\tXMLNode.call(this, Fill.metadata);\n\n\tif (oData) {\n\t\tif (oData.color) {\n\t\t\tthis.setFill(oData.color);\n\t\t} else if (oData.type) {\n\t\t\tthis.setType(oData.type);\n\t\t}\n\t}\n}\n\nFill.prototype = Object.create(XMLNode.prototype);\nFill.prototype.constructor = Fill;\n\nFill.DEFAULT_TYPE = 'none';\n\nFill.metadata = {\n\ttag: 'fill',\n\tproperties: [\n\t\t{\n\t\t\tid: 'fill',\n\t\t\ttag: 'patternFill',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'type',\n\t\t\t\t\tname: 'patternType',\n\t\t\t\t\tvalue: Fill.DEFAULT_TYPE\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n};\n\n/**\n * Checks if the current Fill is equal to the one that was provided.\n *\n * @param {Fill} oFill - The Fill that gets compared to the current Fill\n * @returns {boolean} - Returns true if the compared objects are of the same type and contain the same color fill\n */\nFill.prototype.equals = function(oFill) {\n\tif (!(oFill instanceof Fill)) {\n\t\treturn false;\n\t}\n\n\treturn this.getType() === oFill.getType()\n\t\t&& this.getFill() === oFill.getFill();\n};\n\n/**\n * Returns the color of the current Fill.\n *\n * @returns {string|null} - String containing the color HEX color of the Fill or null of no color is assigned\n */\nFill.prototype.getFill = function() {\n\n\t/* The opacity needs to be removed before returning the HEX color */\n\treturn this.fill.childs.length ? this.fill.color.rgb.value.substring(2) : null;\n};\n\nFill.prototype.setFill = function(sColor) {\n\tthis.reset();\n\n\tif (sColor && typeof sColor === 'string' && /^[A-Fa-f0-9]{6}$/.test(sColor)) {\n\t\tthis.fill.type.value = 'solid';\n\n\t\t/**\n\t\t * Apply the provided color as forground color of the\n\t\t * background. We add 'FF' in front of the HEX-color\n\t\t * for opacity.\n\t\t */\n\t\tthis.fill.addChild({\n\t\t\tid: 'color',\n\t\t\ttag: 'fgColor',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'rgb',\n\t\t\t\t\tname: 'rgb',\n\t\t\t\t\tvalue: 'FF' + sColor\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\n\t\t/**\n\t\t * Add default background layer which will be used once the\n\t\t * foreground color uses transparency\n\t\t */\n\t\tthis.fill.addChild({\n\t\t\ttag: 'bgColor',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'indexed',\n\t\t\t\t\tvalue: '64'\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\t}\n};\n\n/**\n * Returns the current Fill type.\n *\n * @returns {string} - Current Fill type\n */\nFill.prototype.getType = function() {\n\treturn this.fill.type.value;\n};\n\n/**\n * Assigns the given type as Fill type. The Fill will be reset to\n * default before the type is applied.\n *\n * @param {string} sType - Type that needs to be assigned\n */\nFill.prototype.setType = function(sType) {\n\tthis.reset();\n\n\tthis.fill.type.value = sType;\n};\n\n/**\n * Resets the current fill to avoid side effects that might occur\n * when the fill is modified.\n */\nFill.prototype.reset = function() {\n\tthis.fill.type.value = 'none';\n\tthis.fill.childs.length = 0;\n};\n\nmodule.exports = Fill;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/style/Fill.js\n// module id = 30\n// module chunks = 0","var XMLNode = require('../xml/XMLNode');\n\n/**\n * This class represents border configuration for Office Open XML Spreadsheets.\n * @constructor\n */\nfunction Border() {\n\tXMLNode.call(this, Border.metadata);\n}\n\nBorder.prototype = Object.create(XMLNode.prototype);\nBorder.prototype.constructor = Border;\n\nBorder.metadata = {\n\ttag: 'border',\n\tproperties: [\n\t\t{\n\t\t\ttag: 'left'\n\t\t},\n\t\t{\n\t\t\ttag: 'right'\n\t\t},\n\t\t{\n\t\t\ttag: 'top'\n\t\t},\n\t\t{\n\t\t\ttag: 'bottom'\n\t\t},\n\t\t{\n\t\t\ttag: 'diagonal'\n\t\t}\n\t]\n};\n\n/**\n * Checks if the current Border is equal to the given parameter.\n *\n * @param {Border} oBorder - Border that get's compared to the current one\n * @return {boolean} - Returns true if both Borders have the same configuration\n */\nBorder.prototype.equals = function(oBorder) {\n\n\t/**\n\t * Once it is a Border object we always return true because we\n\t * don't provide more than one border type\n\t */\n\treturn oBorder instanceof Border;\n};\n\nmodule.exports = Border;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/style/Border.js\n// module id = 31\n// module chunks = 0","var XMLNode = require('../xml/XMLNode');\n\n/**\n * The NumberFormat class is used to store custom formatting for\n * numeric values. In addition to a variety of built-in formats that\n * cannot be used as identifier for a particular format, the user can\n * create up to 250 different number formats.\n *\n * (https://support.office.com/en-us/article/Excel-specifications-and-limits-1672b34d-7043-467e-8e27-269d656771c3)\n *\n * @param {Object} oData - Configuration object that is used for initialization\n * @param {string} oData.format - Custom format that will be applied\n * @constructor\n */\nfunction NumberFormat(oData) {\n\tXMLNode.call(this, NumberFormat.metadata);\n\n\tthis.format.value = oData && oData.format ? oData.format : NumberFormat.DEFAULT;\n}\n\nNumberFormat.prototype = Object.create(XMLNode.prototype);\nNumberFormat.prototype.constructor = NumberFormat;\n\nNumberFormat.metadata = {\n\ttag: 'numFmt',\n\tattributes: [\n\t\t{\n\t\t\tid: 'formatId',\n\t\t\tname: 'numFmtId'\n\t\t},\n\t\t{\n\t\t\tid: 'format',\n\t\t\tname: 'formatCode'\n\t\t}\n\t]\n};\n\nNumberFormat.BUILTIN_IDS = [ 0, 1, 2, 3, 4, 9, 10, 11, 12, 13, 14, 15,\n\t16, 17, 18, 19, 20, 21, 22, 37, 38, 39, 40, 45, 46, 47, 48, 49 ];\nNumberFormat.ID_OFFSET = 166;\nNumberFormat.DEFAULT = '#,##0.00';\n\n/**\n * This method returns the ID of this NumberFormat. If there was no\n * ID assigned yet, it will return undefined.\n *\n * @returns {number} - The ID of this NumberFormat\n */\nNumberFormat.prototype.getId = function() {\n\treturn this.formatId.value;\n};\n\n\n/**\n * Returns the format of this NumberFormat as a string.\n *\n * @returns {string} - The format template that gets applied\n */\nNumberFormat.prototype.getFormat = function() {\n\treturn this.format.value;\n};\n\n\n/**\n * Assigns the provided ID to the current NumberFormat.\n *\n * @param {number|string} sId - The ID of this NumberFormat that can be referenced\n */\nNumberFormat.prototype.setId = function(sId) {\n\tvar iId = typeof sId === 'number' ? sId : parseInt(sId, 10);\n\n\t/* Checks if NaN, below zero or builtin ID */\n\tif (isNaN(iId) || iId < 0 || NumberFormat._isBuiltin(iId)) {\n\t\treturn;\n\t}\n\n\tthis.formatId.value = sId;\n};\n\n\n/**\n * Sets a specific format.\n *\n * @param {string} sFormat - The format that gets applied by this NumberFormat\n */\nNumberFormat.prototype.setFormat = function(sFormat) {\n\tthis.format.value = sFormat;\n};\n\n\n/**\n * Checks if a given ID is a builtin ID or not. Builtin IDs cannot be used for custom NumberFormats.\n *\n * @param {number} iId - ID that needs to be checked if it is a builtin ID\n *\n * @returns {boolean} - Returns true if the provided ID is a builtin ID that cannot be used\n * @private\n */\nNumberFormat._isBuiltin = function(iId) {\n\treturn NumberFormat.BUILTIN_IDS.indexOf(iId) > -1;\n};\n\n\n/**\n * Compares another NumberFormat to the current one. This method will\n * match NumberFormat objects by its format regardless of their ID.\n *\n * @param {NumberFormat} oNumberFormat - The NumberFormat to compare with\n * @returns {boolean} - Returns true if the format template is equal to the one from the compared object\n */\nNumberFormat.prototype.equals = function(oNumberFormat) {\n\tif (!(oNumberFormat instanceof NumberFormat)) {\n\t\treturn false;\n\t}\n\n\treturn this.getFormat() === oNumberFormat.getFormat();\n};\n\nmodule.exports = NumberFormat;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/style/NumberFormat.js\n// module id = 32\n// module chunks = 0"],"sourceRoot":""}